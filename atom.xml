<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2016-01-13T15:06:33.506Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[docker(4)-nexus3]]></title>
    <link href="http://blog.decbug.com/2016/01/13/docker_distribution_nexus/"/>
    <id>http://blog.decbug.com/2016/01/13/docker_distribution_nexus/</id>
    <published>2016-01-12T16:00:00.000Z</published>
    <updated>2016-01-13T15:06:33.506Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br><a id="more"></a></p>
<h1 id="下载安装nexu3_repo_manager_oss">下载安装nexu3 repo manager oss</h1><p>下载链接<a href="https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-" target="_blank" rel="external">https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-</a><br>我选择了<a href="http://download.sonatype.com/nexus/oss/nexus-installer-3.0.0-m6-unix-archive.tar.gz" target="_blank" rel="external">Unix bundle</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.sonatype.com/nexus/oss/nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line">tar -zxf nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./nexus run</span><br></pre></td></tr></table></figure></p>
<p>时间会比较久，直到出现<strong>Started Nexus Repository Manager 3.0.0-xxxxxxx</strong><br>然后访问<a href="http://192.168.1.173:8081/" target="_blank" rel="external">http://192.168.1.173:8081/</a>，其中的IP换成安装nexus3机器的IP</p>
<h1 id="配置https">配置https</h1><p>registry V2需要https，参考这里进行配置<a href="https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound" target="_blank" rel="external">https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound</a></p>
<p>还有这位印度GG的视频<a href="http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/" target="_blank" rel="external">http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/</a></p>
<p>按照<a href="http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html" target="_blank" rel="external">http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html</a>生成不了jdx，奇怪</p>
<p>个人感觉还是nexus比原生的registry好用，希望能搞定</p>
<p>累成狗了，明天继续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-搭建registry]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution_build/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution_build/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-01-13T15:04:08.994Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br><a id="more"></a></p>
<h1 id="架构">架构</h1><p><img src="http://dockerone.com/uploads/article/20150512/1e111941614512fcc0bdeb2e80ee9384.png" alt=""></p>
<p>就采用<a href="http://dockone.io/people/%E9%9A%BE%E6%98%93" target="_blank" rel="external">钟成</a>提到的架构</p>
<h1 id="进展1">进展1</h1><p>搭建了registry+front，配置了https<br>折腾一天，累成狗了，不详细写拉。直接看代码吧，都写成脚本和compose了<br><a href="https://github.com/CodeJuan/private_registry" target="_blank" rel="external">https://github.com/CodeJuan/private_registry</a></p>
<h1 id="进展2">进展2</h1><p>还要实现后端镜像存储和前端负载均衡，明天继续吧</p>
<h1 id="参考">参考</h1><p><a href="http://www.mworks92.com/2016/01/13/secure-registry-test/" target="_blank" rel="external">关于私有安全docker registry的实验</a><br><a href="http://blog.gesha.net/archives/613/" target="_blank" rel="external">搭建Docker私有仓库Registry-v2</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-distribution分析]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-01-13T07:12:13.286Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry" target="_blank" rel="external">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution" target="_blank" rel="external">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br><a id="more"></a></p>
<h1 id="通过docker运行">通过docker运行</h1><p>先尝试一个简单的用法，即直接pull一个registry好了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从DaoCloud pull一个registry镜像</span></span><br><span class="line">docker pull daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker run -p <span class="number">5000</span>:<span class="number">5000</span> --name registry daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker pull golang:<span class="number">1.5</span>.<span class="number">2</span></span><br><span class="line">docker tag golang:<span class="number">1.5</span>.<span class="number">2</span> localhost:<span class="number">5000</span>/golang</span><br><span class="line">docker push localhost:<span class="number">5000</span>/golang</span><br></pre></td></tr></table></figure></p>
<p>通过查看源码中的Dockerfile，有一句<code>VOLUME [&quot;/var/lib/registry&quot;]</code>，那么这个路径就是docker里存放push上来的镜像的路径<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 获取registry的ID</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 进入docker中调试,31f029b39e3c就是上一条命令获取到的ID</span></span><br><span class="line">docker exec -it <span class="number">31</span>f029b39e3c bash</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 这个路径下就有一个golang的文件夹</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/registry/docker/registry/v2/repositories</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 退出docker</span></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在宿主机中查看路径</span></span><br><span class="line">docker inspect <span class="number">31</span>f029b39e3c</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 查看Mounts字段</span></span><br><span class="line"><span class="preprocessor"># /var/lib/docker/volumes/3bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/docker/volumes/<span class="number">3</span>bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 果然也有docker/registry/v2/repositories/golang</span></span><br></pre></td></tr></table></figure></p>
<h1 id="源码运行">源码运行</h1><h2 id="下载并安装源码">下载并安装源码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:docker/distribution.git</span><br><span class="line"><span class="built_in">cd</span> distribution</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过查看distribution的Dockerfile，发现需要把$PWD/Godeps/_workspace添加到GOPATH</span></span><br><span class="line"><span class="comment"># 不然就会编译不过，会报缺少一堆库。当然，如果不嫌麻烦的话，也可以把缺失的库都go get下来</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$GOPATH</span>:<span class="variable">$PWD</span>/Godeps/_workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile添加了DOCKER_BUILDTAGS，在make时会用到</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_BUILDTAGS=<span class="string">"include_rados include_oss include_gcs"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装</span></span><br><span class="line">sudo yum install librados2-devel</span><br><span class="line">sudo yum install httpd-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">make clean binaries</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">bin/registry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动，也是查看Dockerfile</span></span><br><span class="line"><span class="comment"># ENTRYPOINT ["registry"] CMD ["/etc/docker/registry/config.yml"]</span></span><br><span class="line"><span class="comment"># 而这个config.yml又是从cmd/registry/config-dev.yml拷贝过去的</span></span><br><span class="line"><span class="comment"># 所以，我们这里直接用cmd/registry/config-dev.yml</span></span><br><span class="line">bin/registry cmd/registry/config-dev.yml</span><br></pre></td></tr></table></figure>
<p>这样就运行起来了，但是仅仅是运行还不够，还得深入了解一下原理</p>
<h1 id="源码分析">源码分析</h1><h2 id="makefile">makefile</h2><p>在上一节中，输入了<code>make clean binaries</code>构建出binaries，那么这个binaries就会build<br><code>${PREFIX}/bin/registry ${PREFIX}/bin/digest ${PREFIX}/bin/registry-api-descriptor-template</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PREFIX&#125;/bin/registry: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/registry</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/digest: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/digest</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/registry-api-descriptor-template: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -o $@ $&#123;GO_LDFLAGS&#125; $&#123;GO_GCFLAGS&#125; ./cmd/registry-api-descriptor-template</span><br></pre></td></tr></table></figure></p>
<p>结合前面的启动命令<code>bin/registry cmd/registry/config-dev.yml</code>，就找到了registry的程序入口，就是<code>cmd/registry/main.go</code></p>
<h2 id="流程">流程</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd<span class="regexp">/registry/</span>main.go<span class="regexp">/main -&gt; registry/</span>registry.go/<span class="string">Cmd:</span>Excute</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(2)-compose]]></title>
    <link href="http://blog.decbug.com/2016/01/11/docker_compose/"/>
    <id>http://blog.decbug.com/2016/01/11/docker_compose/</id>
    <published>2016-01-10T16:00:00.000Z</published>
    <updated>2016-01-12T12:11:22.614Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br><a id="more"></a></p>
<h1 id="docker-compose简介">docker-compose简介</h1><blockquote>
<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services. Then, using a single command, you create and start all the services from your configuration. To learn more about all the features of Compose see the list of features.<br>有点类似AWS的栈的概念，通过compose把一堆docker启动并组合起来，就是一个完整的服务。<br>与dockerfile的区别：</p>
<ul>
<li>docerfile对应的是一个docker，compose定义的是一组docker。</li>
</ul>
</blockquote>
<h1 id="install">install</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="number">1.5</span>.<span class="number">2</span>/docker-compose-`uname <span class="operator">-s</span>`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 由于github经常连不上，那么也可以用DaoCloud的链接</span></span><br><span class="line"><span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<h1 id="把当前用户加到docker组">把当前用户加到docker组</h1><p>由于docker的运行需要root权限，在非root用户时每次都要输入<code>sudo</code>，有点麻烦。<br>可以把当前用户加入到docker组，这样就不用每次都输入sudo了，方法</p>
<ul>
<li>sudo vi /etc/group</li>
<li>在docker组的最后加入当前用户名<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker:</span><span class="string">x:</span><span class="number">993</span>:your_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="简单的docker-compose">简单的docker-compose</h1><p>代码在<a href="https://github.com/CodeJuan/test_docker_compose" target="_blank" rel="external">https://github.com/CodeJuan/test_docker_compose</a></p>
<h2 id="创建一个app-py">创建一个app.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen %s times.'</span> % redis.get(<span class="string">'hits'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建requirements-txt">创建requirements.txt</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">flask</span></span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p>这里没有指定版本，那么pip install的就是最新的版本</p>
<h2 id="创建Dockerfile">创建Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> daocloud.io/python:<span class="number">2</span>-<span class="built_in">onbuild</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">. /code</span><br><span class="line"></span><span class="built_in">WORKDIR</span> <span class="bash">/code</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">pip install -r requirements.txt</span><br><span class="line"></span><span class="built_in">CMD</span> <span class="bash">python app.py</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-yml">docker-compose.yml</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: .</span><br><span class="line">  ports:</span><br><span class="line">   -<span class="ruby"> <span class="string">"5000:5000"</span></span><br><span class="line"></span>  volumes:</span><br><span class="line">   -<span class="ruby"> .<span class="symbol">:/code</span></span><br><span class="line"></span>  links:</span><br><span class="line">   -<span class="ruby"> redis</span><br><span class="line"></span>redis:</span><br><span class="line">  build: ./redis</span><br></pre></td></tr></table></figure>
<h2 id="DaoCloud的redis默认有随机密码">DaoCloud的redis默认有随机密码</h2><p>所以需要给redis写一个dockerfile<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM daocloud.io/daocloud/dao-redis:master-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量，表示不需要密码</span></span><br><span class="line">ENV REDIS_PASS=<span class="keyword">*</span><span class="keyword">*</span>None<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://blog.decbug.com/tags/docker-compose/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django]]></title>
    <link href="http://blog.decbug.com/2016/01/05/django/"/>
    <id>http://blog.decbug.com/2016/01/05/django/</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2016-01-05T12:59:17.804Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br><a id="more"></a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp products</span><br><span class="line"><span class="comment">#rm migrate</span></span><br><span class="line">python manage.py sql products</span><br><span class="line">python manage.py syncdb</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br>]]>
    
    </summary>
    
      <category term="django" scheme="http://blog.decbug.com/tags/django/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[吐槽KPI]]></title>
    <link href="http://blog.decbug.com/2015/12/31/kpi/"/>
    <id>http://blog.decbug.com/2015/12/31/kpi/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2015-12-31T15:20:02.297Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>
<a id="more"></a>
<h1 id="转载—手抄版">转载—手抄版</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/blob/master/images/blog/tucao.jpg?raw=true" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>]]>
    
    </summary>
    
      <category term="KPI" scheme="http://blog.decbug.com/tags/KPI/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件开发中的反馈]]></title>
    <link href="http://blog.decbug.com/2015/12/29/feedback_software/"/>
    <id>http://blog.decbug.com/2015/12/29/feedback_software/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2015-12-29T14:45:13.162Z</updated>
    <content type="html"><![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>
<a id="more"></a>
<h2 id="关于实验的思考">关于实验的思考</h2><p>同样的人，同样的场景，为何结果会有这么大的差异？原因就在于，是否可以用眼睛观察。<br>结合本文的主题，就是：有反馈和没反馈的区别。我们在有反馈的时候，可以及时根据输出情况调整我们的方向，以避免弯路。<br>反馈在现实中是如此重要，那么在软件开发过程中又是怎样的情况呢？</p>
<h1 id="软件开发与反馈">软件开发与反馈</h1><p>软件开发，其实也是一个输入输出系统，用户的需求经过我们的分析设计开发直到成为一个可运行的产品。<br>然而，在开发过程中，我们对反馈却不够重视。也许会有很极端的情况，我们的产品一直都不符合要求，直到最后死亡。<br>联想到现实生活中，我们看到的高楼大厦，也是从无到有创造出来的，一般很少有失败的情形，当然开发商跑路的烂尾楼除外。那么，二者究竟有什么差异导致不同的结局呢？<br>因为楼房在修建过程中，看得见摸得着，每时每刻都有反馈，细小的误差都会在最快的时间内解决。<br>那么软件开发为什么很难得到反馈呢？盖因软件不可见，只有可以运行的软件才能被我们感知。<br>在《程序员修炼之道》里有提到曳光弹</p>
<blockquote>
<p>注重实效的程序员往往更喜欢使用曳光弹。曳光弹之所以行之有效，是因为它们与真正的子弹在相同环境、相同条件下工作。它们快速飞向目标，所以枪手可以得到即时的反馈。</p>
</blockquote>
<h2 id="时间-成本">时间-成本</h2><p><img src="http://agilemodeling.com/images/costOfChangeTraditional.gif" alt=""></p>
<ul>
<li>时间越久，成本就越高</li>
<li>及时反馈，及时发现问题，及时解决</li>
</ul>
<h2 id="软件开发该如何反馈">软件开发该如何反馈</h2><p><img src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-36-52-metablogapi/1830.image_5F00_6DC23340.png" alt=""></p>
<p>敏捷也好，持续集成也罢，从头到尾都强调着反馈。<br><a href="http://blogs.msdn.com/b/brian_harry/archive/2011/09/20/10213910.aspx" target="_blank" rel="external">软件开发中反馈的重要性</a></p>
<h1 id="后记">后记</h1><p>这个是在公司内网发的一篇完成任务的帖子，凭记忆复述了一遍，感觉不如原文多矣。文笔变差了～sigh</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>]]>
    
    </summary>
    
      <category term="agile" scheme="http://blog.decbug.com/tags/agile/"/>
    
      <category term="feedback" scheme="http://blog.decbug.com/tags/feedback/"/>
    
      <category term="SoftwareEngineering" scheme="http://blog.decbug.com/categories/SoftwareEngineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs(MEAN)]]></title>
    <link href="http://blog.decbug.com/2015/12/28/mean/"/>
    <id>http://blog.decbug.com/2015/12/28/mean/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2015-12-29T13:28:58.495Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>
<a id="more"></a>
<h1 id="安装">安装</h1><h2 id="通过binary安装nodejs">通过binary安装nodejs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v5.<span class="number">3.0</span>/node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line">tar -zxf node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v5.<span class="number">3.0</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="安装MEAN">安装MEAN</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g mean-cli</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>]]>
    
    </summary>
    
      <category term="angular" scheme="http://blog.decbug.com/tags/angular/"/>
    
      <category term="express" scheme="http://blog.decbug.com/tags/express/"/>
    
      <category term="mongoDB" scheme="http://blog.decbug.com/tags/mongoDB/"/>
    
      <category term="nodejs" scheme="http://blog.decbug.com/tags/nodejs/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试travis CI]]></title>
    <link href="http://blog.decbug.com/2015/12/23/travisci/"/>
    <id>http://blog.decbug.com/2015/12/23/travisci/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2015-12-23T13:17:48.723Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>
<a id="more"></a>
<h1 id="步骤">步骤</h1><ul>
<li>首先，用github帐号登录<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>把某个工程打开，我选的工程是<a href="https://github.com/CodeJuan/python_convert_json2lua" target="_blank" rel="external">https://github.com/CodeJuan/python_convert_json2lua</a></li>
<li><p>创建’.travis.yml’，根据<a href="https://docs.travis-ci.com/user/languages/python" target="_blank" rel="external">https://docs.travis-ci.com/user/languages/python</a>填写一个python的yml</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">language:</span> python</span><br><span class="line"><span class="label">python:</span></span><br><span class="line">  - <span class="string">"2.7"</span></span><br><span class="line"><span class="preprocessor"># command to install dependencies</span></span><br><span class="line"><span class="label">install:</span> <span class="string">"pip install simplejson"</span></span><br><span class="line"><span class="preprocessor"># command to run tests</span></span><br><span class="line"><span class="label">script:</span> python go.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击工程的status图标，拷贝链接<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/travis_status.png" alt=""></p>
</li>
<li><p>在readme加上</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua.svg?branch=master</span>)](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果如图</p>
</li>
</ul>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/demo.png" alt=""></p>
<h1 id="感想">感想</h1><ul>
<li>有提交就触发，很方便</li>
<li>log很完整</li>
<li>可以自由配置环境</li>
<li>省去自己搭建jenkins的步骤</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>]]>
    
    </summary>
    
      <category term="travisCI" scheme="http://blog.decbug.com/tags/travisCI/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一次去中心化的性能优化]]></title>
    <link href="http://blog.decbug.com/2015/12/15/decentralized/"/>
    <id>http://blog.decbug.com/2015/12/15/decentralized/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-15T12:43:28.345Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>
<a id="more"></a>
<h1 id="过程">过程</h1><h2 id="原来的流程">原来的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/data2compute.jpg" alt=""></p>
<p>如图，为简化流程，只画了一个存储节点和计算节点<code>典型的数据向计算迁移</code>，当数据特别大（数十G～百G）的时候，从存储节点拷贝到计算节点将特别耗时间。</p>
<p>而计算工具的身材特别苗条，几百M而已，拷贝过去也就是分分钟的事，如果能把计算工具放到存储节点，拷贝的时间就可以忽略不计，这个方法叫<code>计算向数据迁移</code></p>
<h2 id="优化后的流程">优化后的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/compute2data.jpg" alt=""></p>
<p>只是把百兆的计算工具拷过去，省去以前拷贝几百G数据的步骤～</p>
<h1 id="结论">结论</h1><p>虽然不是什么很新的技术，但是简单几步就解决了业务问题，还是比较值得高兴一下的。</p>
<p>后面如果能把计算工具封装成docker，放到docker registry上去，每次计算的时候，存储节点把镜像pull过来，应该会比较好玩吧～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>]]>
    
    </summary>
    
      <category term="decentralized" scheme="http://blog.decbug.com/tags/decentralized/"/>
    
      <category term="optimization" scheme="http://blog.decbug.com/tags/optimization/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(2):web框架]]></title>
    <link href="http://blog.decbug.com/2015/12/15/golang_revel/"/>
    <id>http://blog.decbug.com/2015/12/15/golang_revel/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-28T12:09:50.226Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，</p>
<p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a></p>
<a id="more"></a>
<h1 id="beego">beego</h1><p>接下来就要深入学习一下了，用revel弄一个restful api玩玩。然而由于revel写restful api太难了，于是改为使用比较出名的<code>beego</code>，国人出品的框架，不知效果如何。</p>
<p>老规矩，从hello world开始</p>
<h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装框架</span></span><br><span class="line">go get github.com/astaxie/beego</span><br><span class="line"><span class="comment"># 安装工具</span></span><br><span class="line">go get github.com/beego/bee</span><br></pre></td></tr></table></figure>
<h2 id="建立工程">建立工程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span><br><span class="line">bee new <span class="built_in">test</span>_beego</span><br></pre></td></tr></table></figure>
<h2 id="运行">运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>_beego</span><br><span class="line">bee run</span><br></pre></td></tr></table></figure>
<p><img src="http://beego.me/docs/images/beerun.png" alt=""></p>
<h1 id="Restful_API">Restful API</h1><h2 id="安装mysql">安装mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server mariadb</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h2 id="生成代码">生成代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee generate scaffold post -fields=<span class="string">"title:string,body:text"</span></span><br></pre></td></tr></table></figure>
<h2 id="在server后台运行bee_run">在server后台运行bee run</h2><p>在todo工程里运行<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee run</span><br></pre></td></tr></table></figure></p>
<h2 id="添加路由">添加路由</h2><p>在main.go添加路由<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/post/"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetAll;post:Post"</span>)</span><br><span class="line">beego.Router(<span class="string">"/post/:id:int"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetOne;put:Put;delete:Delete"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="注册数据库">注册数据库</h2><p>提示没有default数据库，所以需要注册一下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">	<span class="string">"github.com/beego/samples/todo/controllers"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入orm和mysql驱动</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego/orm"</span></span><br><span class="line">	_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在init时注册</span></span><br><span class="line"><span class="keyword">func</span> init() &#123;</span><br><span class="line">orm.RegisterDriver(<span class="string">"mysql"</span>, orm.DR_MySQL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意第三个参数连接字符串</span></span><br><span class="line">orm.RegisterDataBase(<span class="string">"default"</span>, <span class="string">"mysql"</span>, <span class="string">"root:@/test?charset=utf8"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">	beego.Router(<span class="string">"/task/"</span>, &amp;controllers.TaskController&#123;&#125;, <span class="string">"get:ListTasks;post:NewTask"</span>)</span><br><span class="line">	beego.Router(<span class="string">"/task/:id:int"</span>, &amp;controllers.TaskController&#123;&#125;, <span class="string">"get:GetTask;put:UpdateTask"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加post路由</span></span><br><span class="line">	beego.Router(<span class="string">"/post/"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetAll;post:Post"</span>)</span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="改index">改index</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">'container'</span> <span class="attribute">ng-controller</span>=<span class="value">'PostCtrl'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">'charcoal rounded-box'</span>&gt;</span>Blog<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Posts<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">'t in posts'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">'checkbox'</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&#123;&#123;t.Id&#125;&#125;,&#123;&#123;t.Title&#125;&#125;,&#123;&#123;t.Body&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">'text'</span> <span class="attribute">class</span>=<span class="value">'rounded-box'</span> <span class="attribute">placeholder</span>=<span class="value">'add new post here'</span> <span class="attribute">ng-model</span>=<span class="value">'postText'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'addPost()'</span>&gt;</span>New Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'delPost()'</span>&gt;</span>Delete Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'updatePost()'</span>&gt;</span>Update Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="改angularjs，增加PostCtrl">改angularjs，增加PostCtrl</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PostCtrl</span>(<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line">  $scope.posts = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> logError = <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code '</span>+status+<span class="string">': '</span>+data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/post/'</span>).</span><br><span class="line">      success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; $scope.posts = data; &#125;).</span><br><span class="line">      error(logError);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.addPost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $http.post(<span class="string">'/post/'</span>, &#123;Title: $scope.postText&#125;).</span><br><span class="line">      error(logError).</span><br><span class="line">      success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.delPost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $http.delete(<span class="string">'/post/'</span>+$scope.postText).</span><br><span class="line">        error(logError).</span><br><span class="line">        success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $scope.updatePost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $http.put(<span class="string">'/post/'</span>+$scope.postText, &#123;Body: <span class="string">"hahaha"</span>&#125;).</span><br><span class="line">          error(logError).</span><br><span class="line">          success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  refresh().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sqlite">sqlite</h2><hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，</p>
<p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a></p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讲讲缓存]]></title>
    <link href="http://blog.decbug.com/2015/12/14/cache/"/>
    <id>http://blog.decbug.com/2015/12/14/cache/</id>
    <published>2015-12-13T16:00:00.000Z</published>
    <updated>2015-12-14T13:34:22.846Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>
<a id="more"></a>
<h1 id="存储金字塔">存储金字塔</h1><p>首先要说的算存储金字塔，如下图所示</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/hierarchy.jpg" alt=""></p>
<p>可以看到，从上往下，速度越慢，容量越大，相应的成本就越低。</p>
<p>如果成本允许的情况下，我们自然尽量采购金字塔顶端的设备，然而现实却是残酷的，我们没有那么多资源可以挥霍。</p>
<h1 id="缓存的概念">缓存的概念</h1><p>在计算机体系中，缓存的概念其实是相对的。</p>
<ul>
<li>寄存器是L1的缓存</li>
<li>L1是L2的缓存</li>
<li>CPU缓存是内存的缓存</li>
<li>内存是硬盘的缓存</li>
</ul>
<h1 id="CPU_Cache_hit_&amp;_miss">CPU Cache hit &amp; miss</h1><p>我不说话，我只上图，能用图说清楚的，我就不说话。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/the-memory-system-15-638.jpg" alt=""></p>
<h2 id="这里顺便提以下CPU的提前预取？">这里顺便提以下CPU的提前预取？</h2><blockquote>
<p>为了利用空间局部性，同时也为了覆盖传输延迟，可以随机性地在数据被用到之前就将其取入缓存。这一技术称为预取（Prefetch）。本质上讲，加载整个缓存块其实即是一种预取。</p>
</blockquote>
<p>大概就是，CPU会提前给你把数据取过来，如果取到的数据正好是你要用的数据，那么恭喜你，速度会很快。</p>
<h2 id="阶梯延时">阶梯延时</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cpu_cache.jpg" alt=""></p>
<h1 id="内存数据库">内存数据库</h1><p>也是将热点数据放在内存中，相当于是把内存当作硬盘的缓存</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/redis-memcached-pdf-12-728.jpg" alt=""></p>
<h1 id="硬盘自身的缓存">硬盘自身的缓存</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/disk.jpg" alt=""></p>
<h1 id="CDN">CDN</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cache-hit-ratio-latency-graph.png" alt=""></p>
<h1 id="总结">总结</h1><ul>
<li>可以看到，缓存命中的性能会比缓存miss高很多</li>
<li>合理利用缓存，将热点数据放在缓存中</li>
<li>缓存的概念很广泛，不仅仅是CPU缓存</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>]]>
    
    </summary>
    
      <category term="cache" scheme="http://blog.decbug.com/tags/cache/"/>
    
      <category term="storage" scheme="http://blog.decbug.com/tags/storage/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openwrt内啥内啥]]></title>
    <link href="http://blog.decbug.com/2015/12/03/openwrt/"/>
    <id>http://blog.decbug.com/2015/12/03/openwrt/</id>
    <published>2015-12-02T16:00:00.000Z</published>
    <updated>2015-12-13T06:09:18.531Z</updated>
    <content type="html"><![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>
<a id="more"></a>
<h1 id="HG225D">HG225D</h1><p>购于淘宝，一定要uboot的刷不死版本，如果可以的话，建议买升级到64M内存的版本，速度会快一些。</p>
<h2 id="刷机">刷机</h2><ul>
<li>固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，<a href="http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d" target="_blank" rel="external">http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d</a></li>
<li>按住reset不放，再给路由通电，直到power灯开始一闪一闪</li>
<li>进入<a href="192.168.1.1">192.168.1.1</a>，此时看到的是刷机界面，选择刚才的固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，耐心等待即可</li>
</ul>
<h2 id="内啥内啥的配置">内啥内啥的配置</h2><p>需要配置ss、Redsocks和chinadns，其中chinadns的作用就是，只有被墙了网站才会走ss。</p>
<ul>
<li>进入服务-ss，填入你的服务器信息</li>
<li>进入服务-Redsocks，勾选启用Redsocks，在透明代理区域中，填写正确的代理服务器、代理服务器端口、代理服务器类型，加密方式以及密码。其中代理服务器类型选择<code>ss代理</code></li>
<li>还是在Redsocks，UDP转发区域，也填入和透明代理一样的信息</li>
<li>进入网络-DHCP/DNS，在常规设置的DNS转发处填写<code>127.0.0.1#1153</code></li>
<li>还是DHCP/DNS，点击HOSTS和解析文件，勾选<code>忽略解析文件</code></li>
</ul>
<p>再应用并保存所用配置，重启路由，就可以嘿嘿嘿了！</p>
<h1 id="DB120">DB120</h1><ul>
<li>刷飞翔的<a href="http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/" target="_blank" rel="external">http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/</a></li>
<li>然后更新chinaDNS-C到1.21<br><a href="http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk" target="_blank" rel="external">http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk</a></li>
<li>不更新的话，就有一些访问不了</li>
</ul>
<h1 id="WNDR4300">WNDR4300</h1><ul>
<li>下载石像鬼<a href="https://github.com/gygy/gygy.github.io" target="_blank" rel="external">https://github.com/gygy/gygy.github.io</a></li>
<li>按住reset开机</li>
<li>等电源灯变绿并一闪一闪</li>
<li>用tftp把刚下载好的固件传给4300</li>
<li>刷好后关机再开机以激活5G</li>
<li>填写相关配置，然后<a href="https://github.com/gygy" target="_blank" rel="external">@gygy</a>提供了三种方式，点一下按钮就OK了。</li>
</ul>
<h1 id="FAST-FWR171失败的经历，可以不用看">FAST-FWR171失败的经历，可以不用看</h1><h2 id="原厂固件">原厂固件</h2><p>FWR171到703N<br><a href="http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0" target="_blank" rel="external">http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0</a></p>
<h2 id="openwrt">openwrt</h2><p><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin</a><br><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</a></p>
<p>先刷factory</p>
<p>然后ssh root@192.168.1.1</p>
<p>passwd改密码</p>
<h2 id="开启wifi">开启wifi</h2><p>/etc/config/wireless  radio0的disable一行需要删掉或注释掉<br>顺便加个密<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'psk2'  </span></span><br><span class="line"></span><br><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'openwrt1234'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="改_/etc/config/network">改 /etc/config/network</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'loopback'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'lo'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'127.0.0.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.0.0.0'</span></span><br><span class="line"></span><br><span class="line">config globals <span class="comment">'globals'</span></span><br><span class="line">        <span class="keyword">option</span> ula_prefix <span class="comment">'fdaa:5a73:9c8e::/48'</span></span><br><span class="line"></span><br><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'192.168.1.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure>
<h2 id="搞挂了">搞挂了</h2><p>电脑的IP  192.168.1.2  gateway192.168.1.1 255.255.255.0<br>first_boot<br>reboot -f</p>
<p>ssh 192.168.1.1</p>
<h2 id="network">network</h2><p>加上<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line"><span class="preprocessor">#       option proto 'static'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'dhcp'</span></span><br><span class="line"><span class="preprocessor">#       option ipaddr '192.168.1.1'</span></span><br><span class="line"><span class="preprocessor">#       option netmask '255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure></p>
<p>连接已有的路由上网</p>
<p>装东西</p>
<p>软件安装</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="operator"><span class="keyword">update</span></span><br><span class="line">opkg <span class="keyword">install</span> kmod-macvlan ip</span></span><br></pre></td></tr></table></figure>
<p>编辑开机启动文件，在开机时虚拟出另外一张有线网卡，以区别WAN和LAN。</p>
<p>vi /etc/rc.local</p>
<p>在文件的exit 0之前加入以下内容。这里的MAC地址可以改成别的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ip</span> <span class="tag">link</span> <span class="tag">add</span> <span class="tag">link</span> <span class="tag">eth0</span> <span class="tag">eth2</span> <span class="tag">type</span> <span class="tag">macvlan</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">hw</span> <span class="tag">ether</span> 00<span class="pseudo">:11</span><span class="pseudo">:22</span><span class="pseudo">:33</span><span class="pseudo">:44</span><span class="pseudo">:5b</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">up</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">exit</span> 0</span><br></pre></td></tr></table></figure></p>
<p>把虚拟出的网卡分配给LAN使用。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uci set network<span class="class">.lan</span><span class="class">.ifname</span>=eth2</span><br></pre></td></tr></table></figure></p>
<p>创建WAN接口。这里的协议设为DHCP，可以直接将703N插入已经存在的有线网络中，即可上网。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uci set network.wan=interface</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.proto</span>=dhcp</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.hostname</span>=openwrt-wan</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.ifname</span>=eth0</span><br><span class="line">uci commit network</span><br></pre></td></tr></table></figure>
<h2 id="install_ss">install ss</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="keyword">install</span> http://ncu.dl.sourceforge.net/<span class="keyword">project</span>/openwrt-dist/shadowsocks-libev/<span class="number">2.4</span>.<span class="number">1</span>-<span class="number">6</span>f44d53/ar71xx/shadowsocks-libev-spec-polarssl_2.<span class="number">4.1</span>-<span class="number">1</span>_ar71xx.ipk</span><br></pre></td></tr></table></figure>
<p>提示空间不够。。。。</p>
<h2 id="刷明月固件">刷明月固件</h2><ul>
<li><a href="http://pan.baidu.com/s/1i3uYGeh#path=%252F" target="_blank" rel="external">http://pan.baidu.com/s/1i3uYGeh#path=%252F</a>，下载最新的7100的upgrade固件</li>
<li>scp固件到路由的/tmp</li>
<li>ssh连上路由，cd到/tmp</li>
<li><code>sysupgrade -v openwrt-ar71xx-generic-tl-wr2543-v1-squashfs-sysupgrade.bin</code></li>
<li>耐心等待</li>
</ul>
<h1 id="参考">参考</h1><p><a href="http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html" target="_blank" rel="external">http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html</a><br><a href="http://www.isucc.me/555.html" target="_blank" rel="external">http://www.isucc.me/555.html</a><br><a href="http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html" target="_blank" rel="external">http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html</a><br><a href="http://www.tuicool.com/articles/3Q7V7z3" target="_blank" rel="external">http://www.tuicool.com/articles/3Q7V7z3</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>]]>
    
    </summary>
    
      <category term="openwrt" scheme="http://blog.decbug.com/tags/openwrt/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试open falcon]]></title>
    <link href="http://blog.decbug.com/2015/11/29/open_falcon/"/>
    <id>http://blog.decbug.com/2015/11/29/open_falcon/</id>
    <published>2015-11-28T16:00:00.000Z</published>
    <updated>2015-11-29T09:47:36.738Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y redis</span><br><span class="line">sudo yum install -y mysql-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOME=/home/work</span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$HOME</span>/open-falcon</span><br><span class="line">mkdir -p <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/scripts.git</span><br><span class="line"><span class="built_in">cd</span> ./scripts/</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/graph-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/dashboard-db-schema.sql</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/portal-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/links-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/uic-db-schema.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DOWNLOAD=<span class="string">"https://github.com/XiaoMi/open-falcon/releases/download/0.0.5/open-falcon-0.0.5.tar.gz"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">mkdir ./tmp</span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget <span class="variable">$DOWNLOAD</span> -O open-falcon-latest.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxf open-falcon-latest.tar.gz -C ./tmp/</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `find ./tmp/ -name <span class="string">"*.tar.gz"</span>`;<span class="keyword">do</span> \</span><br><span class="line">    app=`<span class="built_in">echo</span> <span class="variable">$x</span>|cut <span class="operator">-d</span> <span class="string">'-'</span> <span class="operator">-f</span>2`; \</span><br><span class="line">    mkdir -p <span class="variable">$app</span>; \</span><br><span class="line">    tar -zxf <span class="variable">$x</span> -C <span class="variable">$app</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>]]>
    
    </summary>
    
      <category term="monitoring" scheme="http://blog.decbug.com/tags/monitoring/"/>
    
      <category term="ops" scheme="http://blog.decbug.com/tags/ops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(1):初学]]></title>
    <link href="http://blog.decbug.com/2015/11/28/golang/"/>
    <id>http://blog.decbug.com/2015/11/28/golang/</id>
    <published>2015-11-27T16:00:00.000Z</published>
    <updated>2015-12-28T11:28:09.858Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/" target="_blank" rel="external">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>
<a id="more"></a>
<hr>
<h1 id="安装go">安装go</h1><p>原本以为需要用源码来安装，上网查了一下，得知centos7可以直接<code>yum</code>安装，so easy。</p>
<h2 id="还是通过二进制安装一下吧">还是通过二进制安装一下吧</h2><p>yum安装的版本太低了，还是得自己安装1.5<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -xzf go1.<span class="number">5.1</span><span class="class">.linux-amd64</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">echo <span class="string">'export GOROOT="/usr/local/go"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export GOPATH="$HOME/code/go_code"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">. ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="golang_plugin_for_idea">golang plugin for idea</h1><p>作为idea的用户，自然首选的IDE还是idea，所以得装一个golang的插件<a href="https://github.com/go-lang-plugin-org/go-lang-idea-plugin" target="_blank" rel="external">https://github.com/go-lang-plugin-org/go-lang-idea-plugin</a><br>然后参考<a href="https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html" target="_blank" rel="external">https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html</a>进行安装即可</p>
<ol>
<li>file-settings-plugins</li>
<li>Browse repo</li>
<li>Manage repo</li>
<li>Custom plugin</li>
<li>add url <code>https://plugins.jetbrains.com/plugins/nightly/5047</code>，这个nightly不错，我先试试</li>
<li>一路ok/close</li>
<li>然后在file-settings-plugins输入go,选择安装。</li>
</ol>
<p>接下来就创建一个新的go工程，SDK就选择之前解压出来的<code>/usr/local/go</code></p>
<hr>
<h1 id="hello_world">hello world</h1><p>创建一个hello.go，内容如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">     fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后go run hello.go<br>也可以打包成一个可执行文件，go build hello.go</p>
<h1 id="simple_http_server">simple http server</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> handler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"Hi there, I love %s!"</span>, r.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="传说中的routine">传说中的routine</h1><p>大概说一下我的理解，由于线程的切换成本较高，上下文，栈恢复之类的，所以需要考虑其他办法。<br>多个routine，可以粗略的理解为共用一个线程，其CPU的抢占都是由routine自身来决定。由于只有一个线程，所以免去了切换的开销。<br>感觉还是怪怪的，就先简单理解为routine的开销较小，可以有更高的并发数吧。</p>
<hr>
<h1 id="web_frame">web frame</h1><p>打算试试revel<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/revel/cmd/revel</span><br></pre></td></tr></table></figure></p>
<p>提示<code>package golang.org/x/net/websocket: unrecognized import path &quot;golang.org/x/net/websocket&quot;</code></p>
<p>我只在我的办公机上装了SS，其他的几台挖掘机都没装，所以下不了。。<br>看来我真的得把我的openwrt的路由弄好，用来全局Fxxk了。<br>心情不好，今天就玩到这吧，擦擦擦！</p>
<blockquote>
<p>把内啥路由搞好了，HOHO，链接<a href="http://blog.decbug.com/2015/12/03/openwrt/">http://blog.decbug.com/2015/12/03/openwrt/</a>。搞好了三台，网件WNDR4300、华为HG225D和DB120，搞挂了一个迅捷171。继续开搞吧</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get revel framework</span></span><br><span class="line">go get github.com/revel/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get 'revel' command</span></span><br><span class="line">go get github.com/revel/cmd/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get samples and run chat app</span></span><br><span class="line">go get github.com/revel/samples</span><br><span class="line">vi src/github.com/codejuan/my-app/conf/app.conf <span class="comment">#8080</span></span><br><span class="line">sudo /sbin/iptables -I INPUT -p tcp -m tcp --dport <span class="number">8080</span> -j ACCEPT</span><br><span class="line">revel run github.com/revel/samples/chat</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[virtualbox共享文件夹]]></title>
    <link href="http://blog.decbug.com/2015/11/24/virtualbox_share/"/>
    <id>http://blog.decbug.com/2015/11/24/virtualbox_share/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2015-11-24T12:57:50.114Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><h2 id="设置共享文件夹">设置共享文件夹</h2><p>点击virtualbox的菜单，选择devices-shared folders settings<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/1.png" alt=""></p>
<h2 id="选中host上的一个文件夹">选中host上的一个文件夹</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/2.png" alt=""></p>
<h2 id="安装virtualbox插件">安装virtualbox插件</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/3.png" alt=""><br>会提示没有插件什么什么的，一路点next就行<br>装完之后需要重启</p>
<h2 id="映射host共享文件夹">映射host共享文件夹</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use x: \\vboxsvr\share</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/4.png" alt=""></p>
<p>然后在网络驱动器就会出现一个X盘，之后就能通过它来传文件了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>]]>
    
    </summary>
    
      <category term="share" scheme="http://blog.decbug.com/tags/share/"/>
    
      <category term="virtualbox" scheme="http://blog.decbug.com/tags/virtualbox/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过python将json转换成lua]]></title>
    <link href="http://blog.decbug.com/2015/11/23/json2lua/"/>
    <id>http://blog.decbug.com/2015/11/23/json2lua/</id>
    <published>2015-11-22T16:00:00.000Z</published>
    <updated>2015-11-24T11:43:35.314Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>某需求要将json转换成lua代码，同事们的做法是人肉翻译，肉眼读json，然后一条条拷贝到lua，如果遇到嵌套多的情况，一不小心就搞错了。<br>即使没有出错，顺利翻译完成，一条简单的json将耗时半小时。如果是100条，将浪费50个小时，太恐怖了。</p>
<p>我在翻译了一次之后，实在是无法接受，于是想通过python来解析json，然后按照格式生成lua代码，也就是<code>用代码写代码</code>。<br>这样可以避免机械劳动，不再浪费生命，可以从原来的半小时减少到1分钟，并且不容易出错。</p>
<a id="more"></a>
<hr>
<h1 id="效果">效果</h1><p>原始的json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">glossary</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">title</span>": <span class="value"><span class="string">"example glossary"</span></span>,</span><br><span class="line">		"<span class="attribute">GlossDiv</span>": <span class="value">&#123;</span><br><span class="line">            "<span class="attribute">title</span>": <span class="value"><span class="string">"S"</span></span>,</span><br><span class="line">			"<span class="attribute">GlossList</span>": <span class="value">&#123;</span><br><span class="line">                "<span class="attribute">GlossEntry</span>": <span class="value">&#123;</span><br><span class="line">                    "<span class="attribute">ID</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">SortAs</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">GlossTerm</span>": <span class="value"><span class="string">"Standard Generalized Markup Language"</span></span>,</span><br><span class="line">					"<span class="attribute">Acronym</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">Abbrev</span>": <span class="value"><span class="string">"ISO 8879:1986"</span></span>,</span><br><span class="line">					"<span class="attribute">GlossDef</span>": <span class="value">&#123;</span><br><span class="line">                        "<span class="attribute">para</span>": <span class="value"><span class="string">"A meta-markup language, used to create markup languages such as DocBook."</span></span>,</span><br><span class="line">						"<span class="attribute">GlossSeeAlso</span>": <span class="value">[<span class="string">"GML"</span>, <span class="string">"XML"</span>]</span><br><span class="line">                    </span>&#125;</span>,</span><br><span class="line">					"<span class="attribute">GlossSee</span>": <span class="value"><span class="string">"markup"</span></span><br><span class="line">                </span>&#125;</span><br><span class="line">            </span>&#125;</span><br><span class="line">        </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>转换成lua的样子<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> msg = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> glossary = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossDiv = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossList = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossEntry = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossDef = &#123;&#125;</span><br><span class="line">GlossDef.GlossSeeAlso = &#123;<span class="string">"GML"</span>,<span class="string">"XML"</span>&#125;</span><br><span class="line">GlossDef.para = <span class="string">"A meta-markup language, used to create markup languages such as DocBook."</span></span><br><span class="line">GlossEntry.GlossDef = GlossDef</span><br><span class="line">GlossEntry.GlossSee = <span class="string">"markup"</span></span><br><span class="line">GlossEntry.Acronym = <span class="string">"SGML"</span></span><br><span class="line">GlossEntry.GlossTerm = <span class="string">"Standard Generalized Markup Language"</span></span><br><span class="line">GlossEntry.Abbrev = <span class="string">"ISO 8879:1986"</span></span><br><span class="line">GlossEntry.SortAs = <span class="string">"SGML"</span></span><br><span class="line">GlossEntry.ID = <span class="string">"SGML"</span></span><br><span class="line">GlossList.GlossEntry = GlossEntry</span><br><span class="line">GlossDiv.GlossList = GlossList</span><br><span class="line">GlossDiv.title = <span class="string">"S"</span></span><br><span class="line">glossary.GlossDiv = GlossDiv</span><br><span class="line">glossary.title = <span class="string">"example glossary"</span></span><br><span class="line">msg.glossary = glossary</span><br></pre></td></tr></table></figure></p>
<h1 id="思路">思路</h1><ul>
<li>simplejson解析原始的json文件</li>
<li>识别出array，subitem，alue</li>
<li>subitem递归下去，然后一层一层往上汇总</li>
<li>根据规律分别组装出lua代码</li>
<li>输出</li>
</ul>
<hr>
<h1 id="步骤">步骤</h1><h3 id="simplejson">simplejson</h3><p>先要安装simplejson</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install simplejson</span><br></pre></td></tr></table></figure>
<h3 id="分析value">分析value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printValue</span><span class="params">(key, value, prefix, substring)</span>:</span></span><br><span class="line">    left = <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(prefix, key, <span class="string">' = '</span>)</span><br><span class="line">    right = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'None'</span> <span class="keyword">in</span> substring:</span><br><span class="line">        right = <span class="string">'gLuaNULL.null'</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'True'</span> <span class="keyword">in</span> substring:</span><br><span class="line">        right = <span class="string">'true'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = <span class="string">'"&#123;&#125;"'</span>.format(value)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(left, right)</span><br></pre></td></tr></table></figure>
<p>根据不同的值，转换成lua的结果。例如<code>None</code>对应的是<code>gLuaNULL.null</code>，<code>True</code>对应<code>true</code>,普通的值就等于’”json中的值”‘<br>例如<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"GlossEntry": &#123;</span><br><span class="line">		"ID": "SGML"</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>转换成<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlossEntry.ID = <span class="string">"SGML"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="分析array">分析array</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"GlossSeeAlso": ["GML", "XML"]</span><br></pre></td></tr></table></figure>
<p>类似于这样的，就要转换成<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlossDef.GlossSeeAlso = &#123;<span class="string">"GML"</span>,<span class="string">"XML"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>python代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printArray</span><span class="params">(key, value, prefix)</span>:</span></span><br><span class="line">    elements = <span class="string">'&#123;'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> value:</span><br><span class="line">        elements += <span class="string">'"&#123;&#125;",'</span>.format(i)</span><br><span class="line">    elements = elements[:-<span class="number">1</span>]</span><br><span class="line">    elements += <span class="string">'&#125;'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(prefix, key, <span class="string">' = '</span>, elements)</span><br></pre></td></tr></table></figure></p>
<h3 id="分析subitem">分析subitem</h3><p>需要用到递归，将item不停的传递下去，直到完成<br>不多解释了，直接看代码吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSubItem</span><span class="params">(key, value, prefix)</span>:</span></span><br><span class="line">    <span class="comment">#print '&#123;&#125;11111111111'.format(key)</span></span><br><span class="line">    local = <span class="string">'local '</span> + key + <span class="string">' = &#123;&#125;'</span></span><br><span class="line">    <span class="keyword">print</span> local</span><br><span class="line">    parseJson(value, key+<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125; = &#123;&#125;'</span>.format(prefix, key, key)</span><br><span class="line">    <span class="comment">#print '&#123;&#125;22222222222'.format(key)</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="代码链接">代码链接</h1><p>放在<a href="https://github.com/CodeJuan/python_convert_json2lua" target="_blank" rel="external">https://github.com/CodeJuan/python_convert_json2lua</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>某需求要将json转换成lua代码，同事们的做法是人肉翻译，肉眼读json，然后一条条拷贝到lua，如果遇到嵌套多的情况，一不小心就搞错了。<br>即使没有出错，顺利翻译完成，一条简单的json将耗时半小时。如果是100条，将浪费50个小时，太恐怖了。</p>
<p>我在翻译了一次之后，实在是无法接受，于是想通过python来解析json，然后按照格式生成lua代码，也就是<code>用代码写代码</code>。<br>这样可以避免机械劳动，不再浪费生命，可以从原来的半小时减少到1分钟，并且不容易出错。</p>]]>
    
    </summary>
    
      <category term="json" scheme="http://blog.decbug.com/tags/json/"/>
    
      <category term="lua" scheme="http://blog.decbug.com/tags/lua/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(4):rabbitmq-server、kombu、tcpdump]]></title>
    <link href="http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/"/>
    <id>http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/</id>
    <published>2015-11-09T16:00:00.000Z</published>
    <updated>2015-11-17T14:50:21.882Z</updated>
    <content type="html"><![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html" target="_blank" rel="external">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html" target="_blank" rel="external">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>说起来还是ubuntu安装简单，apt-get install rabbitmq-server就够了</p>
<h1 id="management_plugin">management plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用management</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p>然后访问<code>serverIP:15672</code>，就可以进入管理页面。此时只有guest帐号可用，然而rabbitmq-server的默认配置，guest帐号只能本机才能用，所以需要add_user</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加用户</span></span><br><span class="line">sudo rabbitmqctl add_user <span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置管理员权限</span></span><br><span class="line">sudo rabbitmqctl <span class="built_in">set</span>_user_tags <span class="built_in">test</span> administrator</span><br></pre></td></tr></table></figure>
<p>然后再访问<code>serverIP:15672</code>，用刚才创建的test账户登录，就能看到管理界面了。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_management.png" alt=""></p>
<h1 id="tracing_plugin">tracing plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/bin</span><br><span class="line"><span class="comment"># enable tracing</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_tracing</span><br><span class="line"><span class="comment"># trace on</span></span><br><span class="line">rabbitmqctl trace_on </span><br><span class="line"><span class="comment"># stop</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_tracing.png" alt=""></p>
<h1 id="kombu">kombu</h1><blockquote>
<p>Kombu是一个为Python写的消息库，目标是为AMQ协议提供一个傻瓜式的高层接口，让Python中的消息传递变得尽可能简单，并且也提供一些常见消息传递问题的解决方案。</p>
</blockquote>
<h2 id="kombu_cast">kombu_cast</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, routing_key=<span class="string">'video'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># connections</span></span><br><span class="line"><span class="keyword">with</span> Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>) <span class="keyword">as</span> conn:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># produce</span></span><br><span class="line">    producer = conn.Producer(serializer=<span class="string">'json'</span>)</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    producer.publish(&#123;<span class="string">'name'</span>: <span class="string">'/tmp/lolcat1.avi'</span>, <span class="string">'size'</span>: now&#125;,</span><br><span class="line">                      exchange=media_exchange, routing_key=<span class="string">'video'</span>,</span><br><span class="line">                      declare=[video_queue])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the declare above, makes sure the video queue is declared</span></span><br><span class="line">    <span class="comment"># so that the messages can be delivered.</span></span><br><span class="line">    <span class="comment"># It's a best practice in Kombu to have both publishers and</span></span><br><span class="line">    <span class="comment"># consumers declare the queue.  You can also declare the</span></span><br><span class="line">    <span class="comment"># queue manually using:</span></span><br><span class="line">    <span class="comment">#     video_queue(conn).declare()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># consume</span></span><br><span class="line"><span class="comment">#    with conn.Consumer(video_queue, callbacks=[process_media]) as consumer:</span></span><br><span class="line"><span class="comment">#        # Process messages and handle events on all channels</span></span><br><span class="line"><span class="comment">#        while True:</span></span><br><span class="line"><span class="comment">#            conn.drain_events()</span></span><br></pre></td></tr></table></figure>
<h2 id="kombu_consumer">kombu_consumer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>)</span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Consume from several queues on the same channel:</span></span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, key=<span class="string">'video'</span>)</span><br><span class="line">image_queue = Queue(<span class="string">'image'</span>, exchange=media_exchange, key=<span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> conn.Consumer([video_queue, image_queue],</span><br><span class="line">                         callbacks=[process_media]) <span class="keyword">as</span> consumer:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        conn.drain_events()</span><br></pre></td></tr></table></figure>
<h1 id="tcpdump">tcpdump</h1><p>抓包利器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump tcp -i wlan1 -n dst port <span class="number">5672</span>  -w cast.cap</span><br><span class="line"><span class="comment"># tcp 表示抓tcp协议</span></span><br><span class="line"><span class="comment"># -i，表示抓哪个网卡。我这里算wlan1抓无线网卡1</span></span><br><span class="line"><span class="comment"># -w 表示写入到哪个文件</span></span><br><span class="line"><span class="comment"># dst port 5672表示只抓目的端口为5672的数据</span></span><br></pre></td></tr></table></figure></p>
<p>然后用wireshark打开cast.cap<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_cast.png" alt=""></p>
<p>顺便抓了下consumer的<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_consume.png" alt=""></p>
<p>等有时间把每一包的意思都解释一下，今天就到这吧。<br>抓的包放在<br><a href="https://github.com/CodeJuan/test_rabbitmq" target="_blank" rel="external">https://github.com/CodeJuan/test_rabbitmq</a><br>可以对照代码看看</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="rabbitmq" scheme="http://blog.decbug.com/tags/rabbitmq/"/>
    
      <category term="tcpdump" scheme="http://blog.decbug.com/tags/tcpdump/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译构建时间优化]]></title>
    <link href="http://blog.decbug.com/2015/11/05/compile_optimize/"/>
    <id>http://blog.decbug.com/2015/11/05/compile_optimize/</id>
    <published>2015-11-04T16:00:00.000Z</published>
    <updated>2015-11-08T12:16:52.030Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br><a id="more"></a></p>
<h1 id="分析各组件的依赖关系">分析各组件的依赖关系</h1><p>既然无人支持，但我还是得试试。<br>于是顺手写了个脚本分析组件之间的依赖关系，并且看C++代码，将项目整体分为4层。UI是C#工程，用显式加载的方式调用C++，故可以独立出来。<br>脚本<a href="http://blog.decbug.com/2015/07/26/pe_depen/">http://blog.decbug.com/2015/07/26/pe_depen/</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">framework</td>
</tr>
<tr>
<td style="text-align:center">midware</td>
</tr>
<tr>
<td style="text-align:center">plugin</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">UI</td>
</tr>
</tbody>
</table>
<p>下层依赖上层，也就是下层必须等待上层编译完成。同一层的组件相互独立，可以并行构建。</p>
<p>分层之后，编译还是那么滴慢，毕竟CPU内存资源有限，再优化的意义也不大。</p>
<h1 id="升级服务器">升级服务器</h1><p>正当我无可奈何之际，公司出了这么一个要求：让每个项目的编译构建时间小于15分钟，这时候大家才重视起来。。各种资源刷刷滴都来了。</p>
<h2 id="时间还增加了？">时间还增加了？</h2><p>有了领导的重视，事情就好办了，服务器刷刷的就到位了，24核96G，还有20T的硬盘，看着都爽啊。<br>高高兴兴的把构建脚本拷贝过去，然后自动下代码，开始编译。<br>原本以为在硬件有极大提升的情况下，构建时间应该会缩短一半多，达到50分钟的水平。<br>可实际情况却让我无比郁闷，竟然时间还增加了。想起之前在领导面前夸下的海口，说有办法搞到25分钟左右，领导才同意申请服务器的。</p>
<h2 id="分析并解决">分析并解决</h2><p>只好开始新一轮的构建，手动更新一下代码，发现更新速度超级慢，猜测是网络的原因，导致下载很慢，经过分析，网络正常。<br>内存和CPU都极其给力，自然不会是瓶颈。于是把怀疑目标转向硬盘，用crystal mark测试一下硬盘速度，果然奇慢无比。看来真的是硬盘拖累了速度啊。<br>远程开机，查看bios中关于磁盘的设置，竟然是RAID5。。。。<br>好吧，反正是编译机器，不需要数据安全，那就改成不raid吧，再次编译，时间减少到了60分钟。</p>
<h1 id="分析VC的工程文件">分析VC的工程文件</h1><h2 id="减少文件拷贝">减少文件拷贝</h2><p>sln：其实就是一个配置文件，把用到VC工程即vcxproj都include进来<br>vcxproj其实就是xml文件，记录着cpp h的相对路径，各种编译选项等等。可以把它当成xml进行读写。</p>
<p>查看每个vcxproj，发现prebuild和postbuild的event都会做拷贝文件的操作，大约会拷贝近300M的文件。看了下拷贝路径，原来是用于本地调试的，对于编译构建来说，完全用不着。<br>写个powershell脚本，在编译的ant脚本里调用一下，每次构建之前都调用一次，把这两个event都disable掉。<br>经过测试，时间从60分钟降低到50分钟</p>
<h2 id="开启mp">开启mp</h2><p>观察编译过程，CPU利用率始终上不去，没有发挥多核的优势啊，得想办法把CPU都利用起来。<br>看了下编译选项，有个/MP引起了我的注意，看看微软咋说的<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/MP (<span class="keyword">Build </span>with <span class="keyword">Multiple </span>Processes)</span><br><span class="line"><span class="label">The</span> /MP compiler option can significantly reduce <span class="keyword">build </span>time when you compile many files.</span><br></pre></td></tr></table></figure></p>
<p>我那可是24核的机器啊，不开启多核编译真的是太浪费资源了。<br>老规矩，windows平台，写个powershell脚本，遍历所有工程的vcxproj文件，把/MP都打开。</p>
<p>在ant编译脚本里加入套餐，在编译之前执行powershell脚本，再次测试，时间降低到40分钟。</p>
<h1 id="分布式编译">分布式编译</h1><p>继续观察编译过程，大部分时间的CPU都能有90%以上，但有一段时间内CPU始终只有10%左右。打开任务管理器，选择列，命令行。看下MSBUILD进程的命令行，找出此时是在搞哪个SLN，想办法把这个SLN的时间降下来。<br>找到SLN后，查看它的代码结构，发现优化的空间不大。只好用别的方法，由于link的原因，每个SLN的编译过程，都是串行的，所以CPU一直上不去。<br>找incredi build，可以并行link，充分利用CPU，修改编译脚本，在编译这个SLN的时候，不用MSBUILD，改incredi build，CPU果然上去了。<br>经测试，整体的时间从40分钟降低到30分钟</p>
<h1 id="这不是终点">这不是终点</h1><p>虽然用到incredi build，但这只是伪分布式，所有的计算资源都是在一台服务器上，当代码继续膨胀，编译时间还是会变长。<br>这只是在治标不治本，真正要做到分布式构建，每个组件都能并行构建的话。需要把隐式加载改为显式加载，即组件之间只通过头文件进行依赖，而不是通过lib，这样就不用等待上游的完成。</p>
<p>具体方法是：</p>
<ul>
<li>都改成loadlibrary，GetFunctionProcess的方式加载组件，组件之间在编译过程中相互独立。</li>
<li>如此便可把将每个组件的编译过程推送到agent上执行</li>
<li>汇总每个agent上的编译结果（DLL）</li>
</ul>
<p>这样整体的编译构建时间，就是编译最慢的那个组件的时间了。</p>
<p>然而我已换部门，只能先把demo弄好，等待后来者完善了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br>]]>
    
    </summary>
    
      <category term="build" scheme="http://blog.decbug.com/tags/build/"/>
    
      <category term="compile" scheme="http://blog.decbug.com/tags/compile/"/>
    
      <category term="optimize" scheme="http://blog.decbug.com/tags/optimize/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cobbler自动部署系统]]></title>
    <link href="http://blog.decbug.com/2015/11/01/cobbler/"/>
    <id>http://blog.decbug.com/2015/11/01/cobbler/</id>
    <published>2015-10-31T17:00:00.000Z</published>
    <updated>2015-11-19T13:47:26.242Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/" target="_blank" rel="external">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>
<a id="more"></a>
<h1 id="开启PXE">开启PXE</h1><p>由于cobbler是通过PXE给裸机装系统的，所以要先改裸机的BIOS设置，改为从网卡启动。</p>
<h2 id="某品牌主板的设置方法">某品牌主板的设置方法</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/1.jpg" alt=""><br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/2.jpg" alt=""><br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/3.jpg" alt=""></p>
<h2 id="另一品牌主板的设置方法">另一品牌主板的设置方法</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/MicroStar.jpg" alt=""></p>
<h1 id="安装cobbler">安装cobbler</h1><p>参考官网的quick start <a href="http://cobbler.github.io/manuals/quickstart/" target="_blank" rel="external">http://cobbler.github.io/manuals/quickstart/</a></p>
<h2 id="disable_SELinux">disable SELinux</h2><p>由于我对SELinux不熟悉，根据官网的建议，还是把SELinux Disable吧</p>
<p>参考<a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html" target="_blank" rel="external">https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html</a></p>
<p>修改<code>/etc/sysconfig/selinux</code>，修改<code>SELINUX</code>的值为<code>disabled</code>，并增加一行<code>SETLOCALDEFS=0</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=enforcing  <span class="comment"># 改为 disabled</span></span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h2 id="Installing_Cobbler">Installing Cobbler</h2><h3 id="错误的方法">错误的方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cobbler</span><br></pre></td></tr></table></figure>
<p>提示没有package，说明要添加源。<br>按照<a href="http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html" target="_blank" rel="external">http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html</a>说</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-X-Y.noarch.rpm</span></span><br><span class="line">  sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/<span class="number">7</span>/x86_64/epel-release-<span class="number">7</span>-<span class="number">0</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>还是不行，因为我不知道具体的版本号。</p>
<p>只好找到最新release的页面<a href="http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html" target="_blank" rel="external">http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html</a>，根据<code>Packages will be provided as soon as possible, please check</code>的提示，找到<a href="http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/" target="_blank" rel="external">http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/</a></p>
<p>添加源</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-web-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/koan-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少python的一堆库，</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">python-simplejson</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br><span class="line"><span class="tag">python-cheetah</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br></pre></td></tr></table></figure>
<p>使用pip安装simplejson和cheetah，还是报这个错，看来此路不通，需要另想它法。</p>
<h3 id="正确的方法">正确的方法</h3><p>找到了这个链接<a href="http://cobbler.readthedocs.org/en/latest/installation-guide.html" target="_blank" rel="external">http://cobbler.readthedocs.org/en/latest/installation-guide.html</a></p>
<p>Make sure you have the EPEL repository enabled on your system:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment"># sudo curl -o cobbler30.repo http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler30/CentOS_CentOS-7/home:libertas-ict:cobbler30.repo</span></span><br></pre></td></tr></table></figure>
<p>接下来</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cobbler cobbler-web</span><br></pre></td></tr></table></figure>
<p>就安装成功了</p>
<h2 id="启动cobbler">启动cobbler</h2><h3 id="改配置">改配置</h3><p><code>/etc/cobbler/settings</code></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">default_password_crypted:</span> <span class="string">"$1$bfI7WLZz$PxXetL97LkScqJFxnW7KS1"</span> <span class="preprocessor"># 123456</span></span><br><span class="line">openssl passwd -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="label">next_server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"><span class="label">server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"></span><br><span class="line">manage_dhcp = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service httpd start</span><br><span class="line">sudo service xinetd start</span><br><span class="line">sudo service cobblerd start</span><br><span class="line"></span><br><span class="line">sudo chkconfig cobblerd on</span><br><span class="line">sudo chkconfig xinetd on</span><br><span class="line">sudo chkconfig httpd on</span><br></pre></td></tr></table></figure>
<p>检查配置</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:</span><br><span class="line">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class="line">2 : <span class="operator"><span class="keyword">change</span> <span class="string">'disable'</span> <span class="keyword">to</span> <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line"><span class="number">3</span> : <span class="keyword">some</span> network boot-loaders <span class="keyword">are</span> missing <span class="keyword">from</span> /<span class="keyword">var</span>/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> <span class="keyword">to</span> download them, <span class="keyword">or</span>, <span class="keyword">if</span> you <span class="keyword">only</span> want <span class="keyword">to</span> handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* <span class="keyword">version</span> <span class="keyword">of</span> the syslinux package installed <span class="keyword">and</span> can <span class="keyword">ignore</span> this message entirely.  Files <span class="keyword">in</span> this directory, should you want <span class="keyword">to</span> support <span class="keyword">all</span> architectures, should include pxelinux.0, menu.c32, elilo.efi, <span class="keyword">and</span> yaboot. The <span class="string">'cobbler get-loaders'</span> command <span class="keyword">is</span> the easiest way <span class="keyword">to</span> resolve these requirements.</span><br><span class="line"><span class="number">4</span> : file /etc/xinetd.d/rsync does <span class="keyword">not</span> exist</span><br><span class="line"><span class="number">5</span> : debmirror package <span class="keyword">is</span> <span class="keyword">not</span> installed, it will be required <span class="keyword">to</span> manage debian deployments <span class="keyword">and</span> repositories</span><br><span class="line"><span class="number">6</span> : The <span class="keyword">default</span> <span class="keyword">password</span> used <span class="keyword">by</span> the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) <span class="keyword">is</span> still <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">'cobbler'</span> <span class="keyword">and</span> should be <span class="keyword">changed</span>, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> <span class="keyword">to</span> generate new one</span><br><span class="line"><span class="number">7</span> : fencing tools were <span class="keyword">not</span> <span class="keyword">found</span>, <span class="keyword">and</span> <span class="keyword">are</span> required <span class="keyword">to</span> <span class="keyword">use</span> the (optional) <span class="keyword">power</span> management features. <span class="keyword">install</span> cman <span class="keyword">or</span> fence-agents <span class="keyword">to</span> <span class="keyword">use</span> them</span></span><br></pre></td></tr></table></figure>
<p>根据提示一一修改<br>解决方法</p>
<ol>
<li>disable selinux</li>
<li>改配置文件</li>
<li>执行cobbler get-loaders</li>
<li>新建/etc/xinetd.d/rsync，增加disable = no,修改 rsync 和 tftp 这两个服务的 xinetd 配置</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/xinetd.d/rsync</span></span><br><span class="line"><span class="title">service</span> rsync</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vi /etc/xinetd.d/tftp</span></span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>不支持debian系，cobbler服务器能同时部署CentOS/Fedora/Debian/Ubuntu系统，所以需要安装debmirror，安装debmirror-20090807-1.el5.noarch.rpm，在此之前，需要先安装一些其他的依赖包：<br>暂时不管，我这里只测试centos<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://rpmfind.net/linux/epel/<span class="number">6</span>/x86_64/debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br><span class="line">sudo rpm -ivh debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum install ed patch perl perl-Compress-Zlib perl-Cwd perl-Digest-MD5 perl-Digest-SHA1 perl-LockFile-Simple perl-libwww-perl</span></span><br><span class="line"><span class="preprocessor"># wget ftp://fr2.rpmfind.net/linux/epel/5/ppc/debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># rpm –ivh debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># 修改/etc/debmirror.conf 配置文件，注释掉 @dists 和 @arches 两行</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># vim /etc/debmirror.conf</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#@dists=”sid”;</span></span><br><span class="line">@sections=”main,main/debian-installer,contrib,non-free”;</span><br><span class="line"><span class="preprocessor">#@arches=”i386″;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>生成密码。修改默认系统密码用 openssl 生成一串密码后加入到 cobbler 的配置文件（/etc/cobbler/settings）里，替换 default_password_crypted 字段：</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openssl passwd -1 -salt ‘bihan’ ‘Abcd1234′</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span></span><br><span class="line"><span class="comment"># vi /etc/cobbler/settings</span></span><br><span class="line">修改内容如下：</span><br><span class="line"><span class="symbol">default_password_crypted:</span> “<span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span>″</span><br></pre></td></tr></table></figure>
<ol>
<li>yum install cman或者fence-agents，我装的是fence-agents</li>
</ol>
<p>改完之后运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service cobblerd restart</span><br><span class="line">sudo cobbler sync</span><br><span class="line"><span class="comment"># 再check一下</span></span><br><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>就只剩下debmirror的问题了，可以暂时不管</p>
<p>下载并挂载iso</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget wget http://mirrors.sina.cn/centos/<span class="number">7</span>/isos/x86_64/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso</span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo mount -t iso9660 -o loop,ro ./CentOS-7-x86_64-Minimal-1503-01.iso /mnt</span></span><br><span class="line">sudo mount -t iso9660 -o loop,ro /home/i3/save/iso/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso /mnt/centos</span><br><span class="line"><span class="comment">#sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt</span></span><br><span class="line">sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt/centos</span><br><span class="line"><span class="comment">#sudo vi /etc/fstab</span></span><br><span class="line"><span class="comment"># 增一行/home/i3/save/iso/CentOS-7-x86_64-Minimal-1503-01.iso   /home/i3/save/cobbler_os iso9660 defaults,ro,loop  0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#umount /somedir</span></span><br></pre></td></tr></table></figure>
<p>挂载时报错</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># sudo cobbler import --name=centos7 --<span class="keyword">arch</span>=x86_64 --path=/mnt/centos</span><br><span class="line">task started: 2015-11-04_215116_import</span><br><span class="line">task started (id=Media import, time=Wed Nov  4 21:51:16 2015)</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel6</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Found a matching signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Adding distros from path /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64:</span><br><span class="line">creating new distro: centos7-x86_64</span><br><span class="line">trying symlink: /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64 -&gt; /<span class="keyword">var</span>/www/cobbler/links/centos7-x86_64</span><br><span class="line">creating new profile: centos7-x86_64</span><br><span class="line">Exception occured: &lt;<span class="keyword">type</span> 'exceptions.UnicodeEncodeError'&gt;</span><br><span class="line">Exception value: 'ascii' codec can't <span class="keyword">encode</span> character <span class="keyword">u</span>'\u2018' <span class="keyword">in</span> position 3: ordinal not <span class="keyword">in</span> <span class="keyword">range</span>(128)</span><br><span class="line">Exception Info:</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 87, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    rc = self._run(self)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 231, <span class="keyword">in</span> runner</span><br><span class="line">    self.logger</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/api.py"</span>, <span class="keyword">line</span> 938, <span class="keyword">in</span> import_tree</span><br><span class="line">    <span class="keyword">return</span> import_module.<span class="keyword">run</span>(path,mirror_name,network_root,kickstart_file,<span class="keyword">arch</span>,breed,os_version)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 140, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    os.path.walk(self.path, self.distro_adder, distros_added)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 238, <span class="keyword">in</span> walk</span><br><span class="line">    func(arg, top, names)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 255, <span class="keyword">in</span> distro_adder</span><br><span class="line">    adtls.<span class="keyword">append</span>(self.add_entry(dirname,kernel,initrd))</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 360, <span class="keyword">in</span> add_entry</span><br><span class="line">    self.profiles.add(profile,<span class="keyword">save</span>=True)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/collection.py"</span>, <span class="keyword">line</span> 352, <span class="keyword">in</span> add</span><br><span class="line">    self.lite_sync.add_single_profile(ref.name)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/action_litesync.py"</span>, <span class="keyword">line</span> 133, <span class="keyword">in</span> add_single_profile</span><br><span class="line">    self.sync.pxegen.make_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 330, <span class="keyword">in</span> make_pxe_menu</span><br><span class="line">    self.make_actual_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 480, <span class="keyword">in</span> make_actual_pxe_menu</span><br><span class="line">    menu_items = self.get_menu_items()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 404, <span class="keyword">in</span> get_menu_items</span><br><span class="line">    <span class="keyword">arch</span>=distro.<span class="keyword">arch</span>, include_header=False)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 702, <span class="keyword">in</span> write_pxe_file</span><br><span class="line">    image, <span class="keyword">arch</span>, kickstart_path)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 880, <span class="keyword">in</span> build_kernel_options</span><br><span class="line">    append_line = self.templar.render(append_line,utils.flatten(blended),None)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/templar.py"</span>, <span class="keyword">line</span> 137, <span class="keyword">in</span> render</span><br><span class="line">    data_out = data_out.<span class="keyword">replace</span>(<span class="string">"@@%s@@"</span> % str(x), str(search_table[str(x)]))</span><br><span class="line"></span><br><span class="line">!!! TASK FAILED !!!</span><br></pre></td></tr></table></figure>
<p>删除</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler profile remove --name=centos7-x86_64</span><br><span class="line">sudo cobbler distro remove --name=centos7-x86_64</span><br></pre></td></tr></table></figure>
<p>再重来，看看是不是哪里代码的问题</p>
<p>python编码的问题，在python的Lib\site-packages文件夹下新建一个sitecustomize.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf8  </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler distro report</span><br><span class="line">sudo cobbler system add --name=<span class="built_in">test</span> --profile=centos7-x86_64</span><br><span class="line">sudo cobbler system list</span><br><span class="line">sudo cobbler system report --name=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待安装机器的mac和IP</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --interface=eth0 --mac=d0:<span class="number">27</span>:<span class="number">88</span>:d1:<span class="number">4</span>d:<span class="number">7</span>f --ip-address=<span class="number">192.168</span>.<span class="number">161.52</span> --netmask=<span class="number">255.255</span>.<span class="number">255.0</span> --static=<span class="number">1</span> </span><br><span class="line"><span class="comment">#--dns-name=bogon</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --gateway=<span class="number">192.168</span>.<span class="number">161.1</span> </span><br><span class="line"><span class="comment">#--hostname=bogon</span></span><br><span class="line">sudo cobbler sync</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>]]>
    
    </summary>
    
      <category term="cobbler" scheme="http://blog.decbug.com/tags/cobbler/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="system" scheme="http://blog.decbug.com/tags/system/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>