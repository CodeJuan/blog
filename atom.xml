<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Continuous Learning</title>
  <subtitle>浮云一别后，流水十年间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.decbug.com/"/>
  <updated>2016-08-15T14:12:19.841Z</updated>
  <id>http://blog.decbug.com/</id>
  
  <author>
    <name>CodeJuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker基础知识--namespace cgroup</title>
    <link href="http://blog.decbug.com/2016/08/15/docker_basic/"/>
    <id>http://blog.decbug.com/2016/08/15/docker_basic/</id>
    <published>2016-08-14T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下docker基础知识</p>
<p>namespace是环境隔离，cgroup是资源隔离，加起来就是docker的基础</p>
<a id="more"></a>
<h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><ol>
<li>CLONE_NEWPID</li>
<li>CLONE_NEWUTS</li>
<li>CLONE_NEWNS</li>
<li>CLONE_NEWIPC</li>
<li>CLONE_NEWNET</li>
<li>CLONE_NEWUSER</li>
</ol>
<h2 id="不带namespace"><a href="#不带namespace" class="headerlink" title="不带namespace"></a>不带namespace</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子进程堆栈空间大小</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> STACK_SIZE (<span class="number">1024</span> * <span class="number">1024</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> child_stack[STACK_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* <span class="keyword">const</span> child_cmd[] = &#123;</span><br><span class="line">    <span class="string">"/bin/bash"</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">child</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Child start!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Child pid in child process: %5d\n"</span>, getpid());</span><br><span class="line">    <span class="comment">//使用bash替换掉原进程便于观察</span></span><br><span class="line">    execv(child_cmd[<span class="number">0</span>], child_cmd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Child stop!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Parent start!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Parent pid: %5d\n"</span>, getpid());</span><br><span class="line">    <span class="keyword">int</span> child_pid = clone(child, child_stack+STACK_SIZE, SIGCHLD, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Child pid in parent process: %5d\n"</span>, child_pid);</span><br><span class="line">    waitpid(child_pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Parent stop!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i3@i3:~/code/namespace$ ./base</span><br><span class="line">Parent <span class="operator"><span class="keyword">start</span>!</span><br><span class="line"><span class="keyword">Parent</span> pid:  <span class="number">7816</span></span><br><span class="line"><span class="keyword">Child</span> pid <span class="keyword">in</span> <span class="keyword">parent</span> process:  <span class="number">7817</span></span><br><span class="line"><span class="keyword">Child</span> <span class="keyword">start</span>!</span><br><span class="line"><span class="keyword">Child</span> pid <span class="keyword">in</span> <span class="keyword">child</span> process:  <span class="number">7817</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="UTS"><a href="#UTS" class="headerlink" title="UTS"></a>UTS</h2><h1 id="cgroup"><a href="#cgroup" class="headerlink" title="cgroup"></a>cgroup</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://yq.aliyun.com/articles/57743" target="_blank" rel="external">https://yq.aliyun.com/articles/57743</a><br><a href="http://coolshell.cn/articles/17049.html" target="_blank" rel="external">http://coolshell.cn/articles/17049.html</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下docker基础知识&lt;/p&gt;
&lt;p&gt;namespace是环境隔离，cgroup是资源隔离，加起来就是docker的基础&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="cgroup" scheme="http://blog.decbug.com/tags/cgroup/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="namespace" scheme="http://blog.decbug.com/tags/namespace/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes尝试有状态服务</title>
    <link href="http://blog.decbug.com/2016/08/03/k8s_stateful/"/>
    <id>http://blog.decbug.com/2016/08/03/k8s_stateful/</id>
    <published>2016-08-02T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有状态服务的概念"><a href="#有状态服务的概念" class="headerlink" title="有状态服务的概念"></a>有状态服务的概念</h1><p>既然名叫有状态，那么就与之相对，会有我们很熟悉的无状态。无状态的概念，就是只负责运算，不负责任何数据的存储，这样就能很轻松地做到水平扩展。</p>
<blockquote>
<p>之前写的关于无状态的例子</p>
</blockquote>
<p>那么，有状态的概念又是什么呢，简单来说，就是会有数据的存储，需要持久化。</p>
<a id="more"></a>
<h1 id="k8s的petset"><a href="#k8s的petset" class="headerlink" title="k8s的petset"></a>k8s的petset</h1><p>简单来说，pod是用来跑无状态服务，petset就是跑有状态服务。<br>1.3之前k8s大多是用于无状态的web应用，但是我们实际业务却有很多有状态的服务，对于谷歌来说，绝对不会放弃这一块的机会，所以petset就应运而生。</p>
<p>那么，作为有状态服务的基石，petset需要具备哪些特征呢：</p>
<ol>
<li>有唯一的编号</li>
<li>在网络上有个不会改变的标识，k8s是通过域名实现的。pod，则是名字后面还有随机数，所以需要有service来做转发</li>
<li>每个有状态服务，都需要有自己的卷，这样就能保证数据可靠存储</li>
</ol>
<h1 id="petset的典型场景"><a href="#petset的典型场景" class="headerlink" title="petset的典型场景"></a>petset的典型场景</h1><p>MySQL<br>Zookeeper<br>Cassandra<br>redis</p>
<h1 id="小试验"><a href="#小试验" class="headerlink" title="小试验"></a>小试验</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># A headless service to <span class="operator"><span class="keyword">create</span> DNS <span class="keyword">records</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  <span class="keyword">name</span>: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">80</span></span><br><span class="line">    <span class="keyword">name</span>: web</span><br><span class="line">  # *.nginx.<span class="keyword">default</span>.svc.cluster.<span class="keyword">local</span></span><br><span class="line">  clusterIP: <span class="keyword">None</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">apiVersion: apps/v1alpha1</span><br><span class="line">kind: PetSet</span><br><span class="line">metadata:</span><br><span class="line">  <span class="keyword">name</span>: web</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"nginx"</span></span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  <span class="keyword">template</span>:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">      annotations:</span><br><span class="line">        pod.alpha.kubernetes.io/<span class="keyword">initialized</span>: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: <span class="number">0</span></span><br><span class="line">      containers:</span><br><span class="line">      - <span class="keyword">name</span>: nginx</span><br><span class="line">        image: gcr.io/google_containers/nginx-slim:<span class="number">0.8</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">          <span class="keyword">name</span>: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - <span class="keyword">name</span>: www</span><br><span class="line">          mountPath: /usr/<span class="keyword">share</span>/nginx/html</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      <span class="keyword">name</span>: www</span><br><span class="line">      annotations:</span><br><span class="line">        volume.alpha.kubernetes.io/<span class="keyword">storage</span>-<span class="keyword">class</span>: anything</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteOnce"</span> ]</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          <span class="keyword">storage</span>: <span class="number">1</span>Gi</span></span><br></pre></td></tr></table></figure>
<p>提示<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./kubectl <span class="operator"><span class="keyword">describe</span> pvc www-web-<span class="number">0</span></span><br><span class="line"><span class="keyword">Name</span>:		www-web-<span class="number">0</span></span><br><span class="line">Namespace:	<span class="keyword">default</span></span><br><span class="line"><span class="keyword">Status</span>:		Pending</span><br><span class="line">Volume:</span><br><span class="line">Labels:		app=nginx</span><br><span class="line"><span class="keyword">Capacity</span>:</span><br><span class="line"><span class="keyword">Access</span> Modes:</span><br><span class="line"><span class="keyword">Events</span>:</span><br><span class="line">  FirstSeen	LastSeen	<span class="keyword">Count</span>	<span class="keyword">From</span>				SubobjectPath	<span class="keyword">Type</span>		Reason			Message</span><br><span class="line">  <span class="comment">---------	--------	-----	----				-------------	--------	------			-------</span></span><br><span class="line">  <span class="number">5</span><span class="keyword">m</span>		<span class="number">10</span>s		<span class="number">22</span>	&#123;persistentvolume-controller &#125;			<span class="keyword">Warning</span>		ProvisioningFailed	<span class="keyword">No</span> provisioner <span class="keyword">plugin</span> <span class="keyword">found</span> <span class="keyword">for</span> the claim!</span></span><br></pre></td></tr></table></figure></p>
<p>这是因为需要设置<code>Persistent Volume Provisioning</code><br>方法是在controller manager的启动参数加上<code>--enable-hostpath-provisioner=true</code>，然后重启controller，再create就OK了。</p>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p><a href="https://github.com/kubernetes/kubernetes/tree/master/test/e2e/testing-manifests/petset/redis" target="_blank" rel="external">https://github.com/kubernetes/kubernetes/tree/master/test/e2e/testing-manifests/petset/redis</a></p>
<h2 id="service-yml"><a href="#service-yml" class="headerlink" title="service.yml"></a>service.yml</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># A headless service to <span class="operator"><span class="keyword">create</span> DNS <span class="keyword">records</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    service.alpha.kubernetes.io/tolerate-unready-endpoints: <span class="string">"true"</span></span><br><span class="line">  <span class="keyword">name</span>: redis</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: <span class="number">6379</span></span><br><span class="line">    <span class="keyword">name</span>: peer</span><br><span class="line">  # *.redis.<span class="keyword">default</span>.svc.cluster.<span class="keyword">local</span></span><br><span class="line">  clusterIP: <span class="keyword">None</span></span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span></span><br></pre></td></tr></table></figure>
<h2 id="petset-yml"><a href="#petset-yml" class="headerlink" title="petset.yml"></a>petset.yml</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1alpha1</span><br><span class="line">kind: PetSet</span><br><span class="line">metadata:</span><br><span class="line">  name: rd</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"redis"</span></span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        <span class="keyword">app</span>: redis</span><br><span class="line">      annotations:</span><br><span class="line">        pod.<span class="keyword">alpha</span>.kubernetes.io/initialized: <span class="string">"true"</span></span><br><span class="line">        pod.<span class="keyword">alpha</span>.kubernetes.io/init-containers: '[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"install"</span>,</span><br><span class="line">                <span class="string">"image"</span>: <span class="string">"gcr.io/google_containers/redis-install-3.2.0:e2e"</span>,</span><br><span class="line">                <span class="string">"imagePullPolicy"</span>: <span class="string">"Always"</span>,</span><br><span class="line">                <span class="string">"args"</span>: [<span class="string">"--install-into=/opt"</span>, <span class="string">"--work-dir=/work-dir"</span>],</span><br><span class="line">                <span class="string">"volumeMounts"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"opt"</span>,</span><br><span class="line">                        <span class="string">"mountPath"</span>: <span class="string">"/opt"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"workdir"</span>,</span><br><span class="line">                        <span class="string">"mountPath"</span>: <span class="string">"/work-dir"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"bootstrap"</span>,</span><br><span class="line">                <span class="string">"image"</span>: <span class="string">"debian:jessie"</span>,</span><br><span class="line">                <span class="string">"command"</span>: [<span class="string">"/work-dir/peer-finder"</span>],</span><br><span class="line">                <span class="string">"args"</span>: [<span class="string">"-on-start=\"</span>/work-<span class="keyword">dir</span>/<span class="keyword">on</span>-start.<span class="keyword">sh</span>\<span class="string">""</span>, <span class="string">"-service=redis"</span>],</span><br><span class="line">                <span class="string">"env"</span>: [</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="string">"name"</span>: <span class="string">"POD_NAMESPACE"</span>,</span><br><span class="line">                      <span class="string">"valueFrom"</span>: &#123;</span><br><span class="line">                          <span class="string">"fieldRef"</span>: &#123;</span><br><span class="line">                              <span class="string">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">                              <span class="string">"fieldPath"</span>: <span class="string">"metadata.namespace"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"volumeMounts"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"opt"</span>,</span><br><span class="line">                        <span class="string">"mountPath"</span>: <span class="string">"/opt"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"name"</span>: <span class="string">"workdir"</span>,</span><br><span class="line">                        <span class="string">"mountPath"</span>: <span class="string">"/work-dir"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]'</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 0</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis</span><br><span class="line">        image: debian:jessie</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br><span class="line">          name: peer</span><br><span class="line">        command:</span><br><span class="line">        - /opt/redis/redis-server</span><br><span class="line">        <span class="keyword">args</span>:</span><br><span class="line">        - /opt/redis/redis.<span class="keyword">conf</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          exec:</span><br><span class="line">            command:</span><br><span class="line">            - <span class="keyword">sh</span></span><br><span class="line">            - -c</span><br><span class="line">            - <span class="string">"/opt/redis/redis-cli -h $(hostname) ping"</span></span><br><span class="line">          initialDelaySeconds: 15</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datadir</span><br><span class="line">          mountPath: /data</span><br><span class="line">        - name: opt</span><br><span class="line">          mountPath: /opt</span><br><span class="line">      volumes:</span><br><span class="line">      - name: opt</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: workdir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: datadir</span><br><span class="line">      annotations:</span><br><span class="line">        volume.<span class="keyword">alpha</span>.kubernetes.io/storage-<span class="keyword">class</span>: anything</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteOnce"</span> ]</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 1Gi</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.infoq.com/cn/news/2015/12/scaling-stateful-services" target="_blank" rel="external">构建可伸缩的有状态服务</a></li>
<li><a href="http://docs.alauda.cn/feature/service/stateless-service-and-stateful-service.html" target="_blank" rel="external">无状态服务 vs 有状态服务</a></li>
<li><a href="http://kubernetes.io/docs/user-guide/petset/" target="_blank" rel="external">Pet Sets</a></li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;有状态服务的概念&quot;&gt;&lt;a href=&quot;#有状态服务的概念&quot; class=&quot;headerlink&quot; title=&quot;有状态服务的概念&quot;&gt;&lt;/a&gt;有状态服务的概念&lt;/h1&gt;&lt;p&gt;既然名叫有状态，那么就与之相对，会有我们很熟悉的无状态。无状态的概念，就是只负责运算，不负责任何数据的存储，这样就能很轻松地做到水平扩展。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前写的关于无状态的例子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，有状态的概念又是什么呢，简单来说，就是会有数据的存储，需要持久化。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
      <category term="stateful" scheme="http://blog.decbug.com/tags/stateful/"/>
    
  </entry>
  
  <entry>
    <title>体验docker UCP</title>
    <link href="http://blog.decbug.com/2016/08/02/evaluate_docker_UCP/"/>
    <id>http://blog.decbug.com/2016/08/02/evaluate_docker_UCP/</id>
    <published>2016-08-01T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>docker官方也有私有云版本<br><a id="more"></a></p>
<h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><h2 id="docker-engine"><a href="#docker-engine" class="headerlink" title="docker engine"></a>docker engine</h2><p>感谢Daoloud提供的一键式安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.daocloud.io/docker | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<h2 id="ucp"><a href="#ucp" class="headerlink" title="ucp"></a>ucp</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> DOCKER_TLS_VERIFY=<span class="string">"0"</span></span><br><span class="line"><span class="keyword">export</span> DOCKER_HOST=<span class="string">"tcp://104.236.158.191:2376"</span></span><br><span class="line"><span class="keyword">export</span> DOCKER_CERT_PATH=<span class="string">""</span></span><br><span class="line"><span class="keyword">export</span> DOCKER_MACHINE_NAME=<span class="string">"node1"</span></span><br><span class="line"></span><br><span class="line">docker run --rm -<span class="literal">it</span> <span class="string">\</span></span><br><span class="line">&gt; -v /<span class="keyword">var</span>/run/docker.<span class="attribute">sock</span>:/<span class="keyword">var</span>/run/docker.sock <span class="string">\</span></span><br><span class="line">&gt; --name ucp docker/ucp install -i <span class="string">\</span></span><br><span class="line">&gt; --swarm-port <span class="number">3376</span> --host-address <span class="number">104.236</span>.<span class="number">158.191</span></span><br></pre></td></tr></table></figure>
<p>提示<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could <span class="operator">not</span> <span class="built_in">read</span> CA certificate <span class="string">"/root/.docker/ca.pem"</span>: <span class="built_in">open</span> /root/.docker/ca.pem: no such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span></span><br></pre></td></tr></table></figure></p>
<p>看来需要生成一个<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl req -out ca.pem -<span class="keyword">new</span> -x509</span><br><span class="line"><span class="preprocessor"># aaaa</span></span><br><span class="line"><span class="preprocessor"># <span class="number">104.236</span><span class="number">.158</span><span class="number">.191</span></span></span><br></pre></td></tr></table></figure></p>
<p>再次运行run<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Unable to find image 'docker/ucp:latest' locally</span><br><span class="line">latest: Pulling from docker/ucp</span><br><span class="line">e110a4a17941: Pull complete</span><br><span class="line">a1c3e1c9e147: Pull complete</span><br><span class="line">bca4748868da: Pull complete</span><br><span class="line">Digest: sha256:46154615e2429a9a8f3d019c414f69cd47f9f7dd5d5c35f54016c01fad1d99ef</span><br><span class="line">Status: Downloaded newer image for docker/ucp:latest</span><br><span class="line">INFO[0000] Verifying your system is compatible with UCP</span><br><span class="line">INFO[0000] Your engine version 1.12.0, build 8eab29e (4.4.0-31-generic) is compatible</span><br><span class="line">WARN[0000] Your system does not have enough memory.  UCP suggests a minimum of 2.00 GB, but you only have 0.97 GB.  You may have unexpected errors.</span><br><span class="line">Please choose your initial UCP admin password:</span><br><span class="line">Confirm your initial password:</span><br><span class="line">INFO[0024] Pulling required images... (this may take a while)</span><br><span class="line">WARN[0080] None of the hostnames we'll be using in the UCP certificates [ubuntu-1gb-sfo1-01 127.0.0.1 172.17.0.1 104.236.158.191] contain a domain component.  Your generated certs may fail TLS validation unless you only <span class="operator"><span class="keyword">use</span> one <span class="keyword">of</span> these shortnames <span class="keyword">or</span> IPs <span class="keyword">to</span> <span class="keyword">connect</span>.  You can <span class="keyword">use</span> the <span class="comment">--san flag to add more aliases</span></span><br><span class="line"></span><br><span class="line">You may enter additional aliases (SANs) <span class="keyword">now</span> <span class="keyword">or</span> press enter <span class="keyword">to</span> proceed <span class="keyword">with</span> the above <span class="keyword">list</span>.</span><br><span class="line">Additional aliases: abc</span><br><span class="line">INFO[<span class="number">0192</span>] Installing UCP <span class="keyword">with</span> host address <span class="number">104.236</span><span class="number">.158</span><span class="number">.191</span> - <span class="keyword">If</span> this <span class="keyword">is</span> incorrect, please specify an alternative address <span class="keyword">with</span> the <span class="string">'--host-address'</span> flag</span><br><span class="line">INFO[<span class="number">0000</span>] Checking that <span class="keyword">required</span> ports <span class="keyword">are</span> available <span class="keyword">and</span> <span class="keyword">accessible</span></span><br><span class="line">INFO[<span class="number">0005</span>] Generating UCP Cluster Root CA</span><br><span class="line">INFO[<span class="number">0047</span>] Generating UCP <span class="keyword">Client</span> Root CA</span><br><span class="line">INFO[<span class="number">0060</span>] Deploying UCP Containers</span><br><span class="line">INFO[<span class="number">0113</span>] <span class="keyword">New</span> configuration established.  Signalling the daemon <span class="keyword">to</span> <span class="keyword">load</span> it...</span><br><span class="line">INFO[<span class="number">0114</span>] Successfully delivered signal <span class="keyword">to</span> daemon</span><br><span class="line">INFO[<span class="number">0114</span>] UCP <span class="keyword">instance</span> <span class="keyword">ID</span>: DKVU:ULUA:C3SO:O36W:<span class="number">4</span>WUE:OM4Z:<span class="number">5</span>V4X:IA46:ZLS5:L2KE:KE5J:O56D</span><br><span class="line">INFO[<span class="number">0114</span>] UCP <span class="keyword">Server</span> SSL: <span class="keyword">SHA</span>-<span class="number">256</span> Fingerprint=<span class="number">71</span>:C8:<span class="number">1</span><span class="keyword">D</span>:AB:CA:EE:E7:<span class="number">91</span>:<span class="number">07</span>:D6:<span class="number">23</span>:<span class="number">83</span>:F2:A7:<span class="number">67</span>:<span class="number">2</span>A:F8:DE:<span class="number">88</span>:<span class="number">43</span>:<span class="number">5</span><span class="keyword">C</span>:D4:<span class="number">2</span><span class="keyword">E</span>:<span class="number">76</span>:<span class="number">9</span><span class="keyword">D</span>:BA:B9:<span class="number">39</span>:B4:<span class="number">11</span>:<span class="number">64</span>:<span class="number">86</span></span><br><span class="line">INFO[<span class="number">0114</span>] Login <span class="keyword">as</span> <span class="string">"admin"</span>/(your <span class="keyword">admin</span> <span class="keyword">password</span>) <span class="keyword">to</span> UCP <span class="keyword">at</span> https://<span class="number">104.236</span><span class="number">.158</span><span class="number">.191</span>:<span class="number">443</span></span></span><br></pre></td></tr></table></figure></p>
<p>安装完成，效果图<br><img src="https://cloud.githubusercontent.com/assets/5423628/17329710/6027e182-58f6-11e6-99cb-8f37aef00ccf.png" alt="效果图"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="系统容器"><a href="#系统容器" class="headerlink" title="系统容器"></a>系统容器</h2><table>
<thead>
<tr>
<th>NODE</th>
<th>NAME</th>
<th>IMAGE</th>
<th>CREATED</th>
</tr>
</thead>
<tbody>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-controller</td>
<td>docker/ucp-controller:1.1.2</td>
<td>2016-08-02 20:30:12 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-auth-worker</td>
<td>docker/ucp-auth:1.1.2</td>
<td>2016-08-02 20:30:09 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-auth-api</td>
<td>docker/ucp-auth:1.1.2</td>
<td>2016-08-02 20:30:08 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-auth-store</td>
<td>docker/ucp-auth-store:1.1.2</td>
<td>2016-08-02 20:30:04 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-cluster-root-ca</td>
<td>docker/ucp-cfssl:1.1.2</td>
<td>2016-08-02 20:30:03 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-client-root-ca</td>
<td>docker/ucp-cfssl:1.1.2</td>
<td>2016-08-02 20:30:02 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-swarm-manager</td>
<td>docker/ucp-swarm:1.1.2</td>
<td>2016-08-02 20:30:01 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-swarm-join</td>
<td>docker/ucp-swarm:1.1.2</td>
<td>2016-08-02 20:30:01 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-proxy</td>
<td>docker/ucp-proxy:1.1.2</td>
<td>2016-08-02 20:29:59 +0800</td>
</tr>
<tr>
<td>ubuntu-1gb-sfo1-01</td>
<td>ucp-kv</td>
<td>docker/ucp-etcd:1.1.2</td>
<td>2016-08-02 20:29:56 +0800</td>
</tr>
</tbody>
</table>
<p><img src="https://docs.docker.com/ucp/images/architecture-3.png" alt="官网的架构图"></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ucp-proxy</td>
<td>A TLS proxy. It allows secure access to the local Docker Engine.</td>
</tr>
<tr>
<td>ucp-controller</td>
<td>The UCP application. It uses the key-value store for persisting configurations.</td>
</tr>
<tr>
<td>ucp-swarm-manager</td>
<td>Provides the clustering capabilities. It uses the key-value store for leader election, and keeping track of cluster members.</td>
</tr>
<tr>
<td>ucp-swarm-join</td>
<td>Heartbeat to record on the key-value store that this node is alive. If the node goes down, this heartbeat stops, and the node is removed from the cluster.</td>
</tr>
<tr>
<td>ucp-auth-api</td>
<td>The centralized API for identity and authentication used by UCP and DTR.</td>
</tr>
<tr>
<td>ucp-auth-worker</td>
<td>Performs scheduled LDAP synchronizations and cleans data on the ucp-auth-store.</td>
</tr>
<tr>
<td>ucp-auth-store</td>
<td>Stores authentication configurations, and data for users, organizations and teams.</td>
</tr>
<tr>
<td>ucp-kv</td>
<td>Used to store the UCP configurations. Don’t use it in your applications, since it’s for internal use only.</td>
</tr>
<tr>
<td>ucp-cluster-root-ca</td>
<td>A certificate authority to sign the certificates used when joining new nodes, and on administrator client bundles.</td>
</tr>
<tr>
<td>ucp-client-root-ca</td>
<td>A certificate authority to sign user bundles. Only used when UCP is installed without an external root CA.</td>
</tr>
</tbody>
</table>
<p>基本上明白都有什么作用了</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;docker官方也有私有云版本&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="UCP" scheme="http://blog.decbug.com/tags/UCP/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes多租户分析</title>
    <link href="http://blog.decbug.com/2016/08/01/k8s_multi_tenant/"/>
    <id>http://blog.decbug.com/2016/08/01/k8s_multi_tenant/</id>
    <published>2016-07-31T17:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公有云产品有个很重要的概念叫多租户，比如OpenStack的Domain/Project。提供资源隔离，权限控制，等等。<br>kubernetes如果作为PaaS的基础，那么也需要具备此能力。<br><a id="more"></a></p>
<h1 id="NameSpace"><a href="#NameSpace" class="headerlink" title="NameSpace"></a>NameSpace</h1><blockquote>
<p>Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual clusters are called namespaces.</p>
</blockquote>
<p>一组逻辑的集群，可以大概类似于租户的概念，可以做到一定程度的资源隔离，Quota。如果非要和OpenStack做个映射，那么就大概对应于Project吧。</p>
<p>举个例子</p>
<ul>
<li>kubectl –namespace=abc run nginx –image=nginx</li>
<li>kubectl  run nginx –image=nginx<br>这两条命令虽然都是run起来一个nginx，但是作用域却不一样。命令1是在一个叫abc的namespace里运行nginx，命令2则是在Default</li>
</ul>
<h1 id="Resource-Quota"><a href="#Resource-Quota" class="headerlink" title="Resource Quota"></a>Resource Quota</h1><blockquote>
<p>A resource quota, defined by a ResourceQuota object, provides constraints that limit aggregate resource consumption per namespace.<br>限制某个name space的资源总数</p>
</blockquote>
<p>使用方法: It is enabled when the apiserver –admission-control= flag has ResourceQuota as one of its arguments</p>
<h2 id="Compute-Resource-Quota"><a href="#Compute-Resource-Quota" class="headerlink" title="Compute Resource Quota"></a>Compute Resource Quota</h2><table>
<thead>
<tr>
<th>Resource Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>cpu</td>
<td>Across all pods in a non-terminal state, the sum of CPU requests cannot exceed this value.</td>
</tr>
<tr>
<td>limits.cpu</td>
<td>Across all pods in a non-terminal state, the sum of CPU limits cannot exceed this value.</td>
</tr>
<tr>
<td>limits.memory</td>
<td>Across all pods in a non-terminal state, the sum of memory limits cannot exceed this value.</td>
</tr>
<tr>
<td>memory</td>
<td>Across all pods in a non-terminal state, the sum of memory requests cannot exceed this value.</td>
</tr>
<tr>
<td>requests.cpu</td>
<td>Across all pods in a non-terminal state, the sum of CPU requests cannot exceed this value.</td>
</tr>
<tr>
<td>requests.memory</td>
<td>Across all pods in a non-terminal state, the sum of memory requests cannot exceed this value.</td>
</tr>
</tbody>
</table>
<h2 id="Object-Count-Quota"><a href="#Object-Count-Quota" class="headerlink" title="Object Count Quota"></a>Object Count Quota</h2><table>
<thead>
<tr>
<th>Resource Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>configmaps</td>
<td>The total number of config maps that can exist in the namespace.</td>
</tr>
<tr>
<td>persistentvolumeclaims</td>
<td>The total number of persistent volume claims that can exist in the namespace.</td>
</tr>
<tr>
<td>pods</td>
<td>The total number of pods in a non-terminal state that can exist in the namespace. A pod is in a terminal state if status.phase in (Failed, Succeeded) is true.</td>
</tr>
<tr>
<td>replicationcontrollers</td>
<td>The total number of replication controllers that can exist in the namespace.</td>
</tr>
<tr>
<td>resourcequotas</td>
<td>The total number of resource quotas that can exist in the namespace.</td>
</tr>
<tr>
<td>services</td>
<td>The total number of services that can exist in the namespace.</td>
</tr>
<tr>
<td>services.loadbalancers</td>
<td>The total number of services of type load balancer that can exist in the namespace.</td>
</tr>
<tr>
<td>services.nodeports</td>
<td>The total number of services of type node port that can exist in the namespace.</td>
</tr>
<tr>
<td>secrets</td>
<td>The total number of secrets that can exist in the namespace.</td>
</tr>
</tbody>
</table>
<p>对象的总数，比如限制最多可以创建几个pod，最多几个rc</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe quota compute-resources --<span class="keyword">namespace</span>=myspace</span><br><span class="line">Name:                  compute-resources</span><br><span class="line">Namespace:             myspace</span><br><span class="line">Resource               Used Hard</span><br><span class="line">--------               ---- ----</span><br><span class="line">limits.cpu             <span class="number">0</span>    <span class="number">2</span></span><br><span class="line">limits.memory          <span class="number">0</span>    <span class="number">2</span>Gi</span><br><span class="line">pods                   <span class="number">0</span>    <span class="number">4</span></span><br><span class="line">requests.cpu           <span class="number">0</span>    <span class="number">1</span></span><br><span class="line">requests.memory        <span class="number">0</span>    <span class="number">1</span>Gi</span><br><span class="line"></span><br><span class="line">$ kubectl describe quota object-counts --<span class="keyword">namespace</span>=myspace</span><br><span class="line">Name:                   object-counts</span><br><span class="line">Namespace:              myspace</span><br><span class="line">Resource                Used    Hard</span><br><span class="line">--------                ----    ----</span><br><span class="line">configmaps              <span class="number">0</span>       <span class="number">10</span></span><br><span class="line">persistentvolumeclaims  <span class="number">0</span>       <span class="number">4</span></span><br><span class="line">replicationcontrollers  <span class="number">0</span>       <span class="number">20</span></span><br><span class="line">secrets                 <span class="number">1</span>       <span class="number">10</span></span><br><span class="line">services                <span class="number">0</span>       <span class="number">10</span></span><br><span class="line">services.loadbalancers  <span class="number">0</span>       <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h1 id="Limit-Range"><a href="#Limit-Range" class="headerlink" title="Limit Range"></a>Limit Range</h1><p>需要在Admission Controller启用LimitRanger插件</p>
<p>By default, pods run with unbounded CPU and memory limits.</p>
<p>Let’s create a simple limit in our namespace.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="operator"><span class="keyword">create</span> -<span class="keyword">f</span> docs/<span class="keyword">admin</span>/limitrange/limits.yaml <span class="comment">--namespace=limit-example</span></span><br><span class="line"></span><br><span class="line">limitrange <span class="string">"mylimits"</span> created</span></span><br></pre></td></tr></table></figure></p>
<p>Let’s describe the limits that we have imposed in our namespace.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="operator"><span class="keyword">describe</span> limits mylimits <span class="comment">--namespace=limit-example</span></span><br><span class="line"><span class="keyword">Name</span>:   mylimits</span><br><span class="line">Namespace:  <span class="keyword">limit</span>-example</span><br><span class="line"><span class="keyword">Type</span>        <span class="keyword">Resource</span>      <span class="keyword">Min</span>      <span class="keyword">Max</span>      <span class="keyword">Default</span> Request      <span class="keyword">Default</span> <span class="keyword">Limit</span>      <span class="keyword">Max</span> <span class="keyword">Limit</span>/Request Ratio</span><br><span class="line"><span class="comment">----        --------      ---      ---      ---------------      -------------      -----------------------</span></span><br><span class="line">Pod         cpu           <span class="number">200</span><span class="keyword">m</span>     <span class="number">2</span>        -                    -                  -</span><br><span class="line">Pod         <span class="keyword">memory</span>        <span class="number">6</span>Mi      <span class="number">1</span>Gi      -                    -                  -</span><br><span class="line"><span class="keyword">Container</span>   cpu           <span class="number">100</span><span class="keyword">m</span>     <span class="number">2</span>        <span class="number">200</span><span class="keyword">m</span>                 <span class="number">300</span><span class="keyword">m</span>               -</span><br><span class="line"><span class="keyword">Container</span>   <span class="keyword">memory</span>        <span class="number">3</span>Mi      <span class="number">1</span>Gi      <span class="number">100</span>Mi                <span class="number">200</span>Mi              -</span></span><br></pre></td></tr></table></figure></p>
<h1 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h1><p>限定某个用户能做的事情，比如<br>Alice can do anything to all resources:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">apiVersion</span>":<span class="value"><span class="string">"abac.authorization.kubernetes.io/v1beta1"</span></span>,</span><br><span class="line">    "<span class="attribute">kind</span>":<span class="value"><span class="string">"Policy"</span></span>,</span><br><span class="line">    "<span class="attribute">spec</span>":<span class="value">&#123;</span><br><span class="line">        "<span class="attribute">user</span>":<span class="value"><span class="string">"alice"</span></span>,</span><br><span class="line">        "<span class="attribute">namespace</span>":<span class="value"><span class="string">"*"</span></span>,</span><br><span class="line">        "<span class="attribute">resource</span>":<span class="value"><span class="string">"*"</span></span>,</span><br><span class="line">        "<span class="attribute">apiGroup</span>":<span class="value"><span class="string">"*"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>Bob can just read pods in namespace “projectCaribou”<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">apiVersion</span>":<span class="value"><span class="string">"abac.authorization.kubernetes.io/v1beta1"</span></span>,</span><br><span class="line">    "<span class="attribute">kind</span>":<span class="value"><span class="string">"Policy"</span></span>,</span><br><span class="line">    "<span class="attribute">spec</span>":<span class="value">&#123;</span><br><span class="line">        "<span class="attribute">user</span>":<span class="value"><span class="string">"bob"</span></span>,</span><br><span class="line">        "<span class="attribute">namespace</span>":<span class="value"><span class="string">"projectCaribou"</span></span>,</span><br><span class="line">        "<span class="attribute">resource</span>":<span class="value"><span class="string">"pods"</span></span>,</span><br><span class="line">        "<span class="attribute">readonly</span>":<span class="value"><span class="literal">true</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>缺点是，必须在api server启动的时候就传入文件。如果需要对权限做修改，那么必须重启api server才能生效</p>
<h1 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h1><p>之前提到了ABAC比较弱，所以呢1.3出来个新特性，叫RBAC，目前还是Alpha。<br>从名字就能看出来<code>“RBAC” (Role-Based Access Control)</code>，基于角色，有点像OpenStack的角色了</p>
<h2 id="Roles"><a href="#Roles" class="headerlink" title="Roles"></a>Roles</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kind</span>: Role</span><br><span class="line"><span class="attribute">apiVersion</span>: rbac.authorization.k8s.io/v1alpha1</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">namespace</span>: default</span><br><span class="line">  <span class="attribute">name</span>: pod-reader</span><br><span class="line"><span class="attribute">rules</span>:</span><br><span class="line">  - <span class="attribute">apiGroups</span>: [<span class="string">""</span>] # The API group <span class="string">""</span> indicates the default API Group.</span><br><span class="line">    <span class="attribute">resources</span>: [<span class="string">"pods"</span>]</span><br><span class="line">    <span class="attribute">verbs</span>: [<span class="string">"get"</span>, <span class="string">"watch"</span>, <span class="string">"list"</span>]</span><br><span class="line">    <span class="attribute">nonResourceURLs</span>: []</span><br></pre></td></tr></table></figure>
<h2 id="RolesBindings"><a href="#RolesBindings" class="headerlink" title="RolesBindings"></a>RolesBindings</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This role binding allows "jane" to read pods in the namespace "default"</span></span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1alpha1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="operator">read</span>-pods</span><br><span class="line">  namespace: default</span><br><span class="line">subjects:</span><br><span class="line">  - kind: <span class="keyword">User</span> <span class="title"># May</span> be <span class="string">"User"</span>, <span class="string">"Group"</span> <span class="operator">or</span> <span class="string">"ServiceAccount"</span></span><br><span class="line">    name: jane</span><br><span class="line">roleRef:</span><br><span class="line">  kind: <span class="keyword">Role</span></span><br><span class="line">  <span class="title">namespace</span>: default</span><br><span class="line">  name: pod-reader</span><br><span class="line">  apiVersion: rbac.authorization.k8s.io/v1alpha1</span><br></pre></td></tr></table></figure>
<h2 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h2><img src="http://www.plantuml.com/plantuml/svg/POux2e1034Jxd2BOMsmE8EWrP96eGKIDYujOY7VtZx2Ma_TcYEEguqOmKXx4Ewx4HCWUrHjS0JO0zpFeCUWMycdinTWuEJgGprwcz0ZNjIXRhLjjZ8KWFy89paPcCPxTl_NHUbmqu1Iiqhlw0hgUeXq0">
<p>userA和userB是通过<code>[role_binding1][role1]</code>连接到name space 1，得到在name space1进行操作的权限。<br>userB则是<code>[role_binding2]-&gt;[role2]</code>得到在name space2进行操作的权限。</p>
<h1 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h1><p>感觉很强大，是否可以和keystone对接？把OpenStack的多租户能力借鉴过来？</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公有云产品有个很重要的概念叫多租户，比如OpenStack的Domain/Project。提供资源隔离，权限控制，等等。&lt;br&gt;kubernetes如果作为PaaS的基础，那么也需要具备此能力。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
      <category term="multi-tenant" scheme="http://blog.decbug.com/tags/multi-tenant/"/>
    
  </entry>
  
  <entry>
    <title>在家玩DaoCloud企业版--部署/网络/存储</title>
    <link href="http://blog.decbug.com/2016/07/25/play_dce3/"/>
    <id>http://blog.decbug.com/2016/07/25/play_dce3/</id>
    <published>2016-07-24T17:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前面分析了系统容器，<br><a href="http://blog.decbug.com/2016/07/25/play_dce2/">http://blog.decbug.com/2016/07/25/play_dce2/</a><br>接下来看看到底是如何部署的，以及网络存储是如何创建的。<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>去掉–rm ，看看install到底做了什么<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="tag">i</span>  daocloud.io/daocloud/dce install</span><br></pre></td></tr></table></figure></p>
<p>不加–rm竟然无法运行，DaoCloud还挺厉害</p>
<p>大概推测一下部署过程吧</p>
<ul>
<li>daocloud.io/daocloud/dce install 安装compose？</li>
<li>生成/etc/daocloud/dce/docker-compose.yml</li>
<li>docker-compose up ?</li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h2><p>docker -H :2375 network ls 查看network</p>
<p>但是提示 没有证书</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp <span class="string">c165f85044a9:</span><span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine<span class="regexp">/engine-cert.pem /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>engine-cert.pem</span><br><span class="line">docker cp <span class="string">c165f85044a9:</span><span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine<span class="regexp">/engine-key.pem /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>engine-key.pem</span><br><span class="line">docker cp <span class="string">c165f85044a9:</span><span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine<span class="regexp">/ca.pem /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>ca.pem</span><br></pre></td></tr></table></figure>
<p>把证书从manager容器里拷贝出来</p>
<h2 id="然后network-ls"><a href="#然后network-ls" class="headerlink" title="然后network ls"></a>然后network ls</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -<span class="string">H :</span><span class="number">2375</span> --tls --tlscacert <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine<span class="regexp">/ca.pem --tlscert /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>engine-cert.pem --tlskey <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine/engine-key.pem network ls</span><br></pre></td></tr></table></figure>
<p>结果是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                                   DRIVER</span><br><span class="line">bd796525b91c        docker-<span class="number">512</span>mb-sfo2-<span class="number">01</span>/bridge            bridge</span><br><span class="line"><span class="number">26e3</span>c48a34b9        docker-<span class="number">512</span>mb-sfo2-<span class="number">01</span>/dce_default       bridge</span><br><span class="line">b6928df6352f        docker-<span class="number">512</span>mb-sfo2-<span class="number">01</span>/host              host</span><br><span class="line"><span class="number">242e13239</span>dcb        docker-<span class="number">512</span>mb-sfo2-<span class="number">01</span>/none              null</span><br><span class="line"><span class="number">0</span>ea714042165        docker-<span class="number">512</span>mb-sfo2-<span class="number">02</span>/bridge            bridge</span><br><span class="line">ea7e447dbb71        docker-<span class="number">512</span>mb-sfo2-<span class="number">02</span>/dce_default       bridge</span><br><span class="line">e61de07d7d1f        docker-<span class="number">512</span>mb-sfo2-<span class="number">02</span>/docker_gwbridge   bridge</span><br><span class="line"><span class="number">38</span>af5aff9349        docker-<span class="number">512</span>mb-sfo2-<span class="number">02</span>/host              host</span><br><span class="line">c448a5c9ee19        docker-<span class="number">512</span>mb-sfo2-<span class="number">02</span>/none              null</span><br><span class="line"><span class="number">48</span>ac6678f478        tty_default                            overlay</span><br><span class="line">bd2f14e19718        ubuntusshttyjs_default                 overlay</span><br></pre></td></tr></table></figure></p>
<p>可以看到，自建容器都是用到了overlay，目测用的就是docker原生的overlay</p>
<p><img src="https://cloud.githubusercontent.com/assets/5423628/17141722/d736523a-537f-11e6-8516-1ae20ba49f26.png" alt="image"></p>
<p>从上图可以看到，果然是原生overlay</p>
<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p><img src="https://cloud.githubusercontent.com/assets/5423628/17107783/4bda1fee-52c3-11e6-9485-d77436874107.png" alt="存储"><br>貌似只能挂本地卷</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前面分析了系统容器，&lt;br&gt;&lt;a href=&quot;http://blog.decbug.com/2016/07/25/play_dce2/&quot;&gt;http://blog.decbug.com/2016/07/25/play_dce2/&lt;/a&gt;&lt;br&gt;接下来看看到底是如何部署的，以及网络存储是如何创建的。&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="DaoCloud" scheme="http://blog.decbug.com/tags/DaoCloud/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="swarm" scheme="http://blog.decbug.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>在家玩DaoCloud企业版--分析系统容器</title>
    <link href="http://blog.decbug.com/2016/07/25/play_dce2/"/>
    <id>http://blog.decbug.com/2016/07/25/play_dce2/</id>
    <published>2016-07-24T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>DaoCloud是国内领先的容器云，我的山寨容器云需要多向他学习。<br>前几天把环境弄好了，也简单试用了，大概知道DCE技术栈。<br><a href="http://blog.decbug.com/2016/07/20/play_dce/">http://blog.decbug.com/2016/07/20/play_dce/</a><br>果然是把docker原生技术发挥到了很棒的境界，很值得学习。</p>
<a id="more"></a>
<h1 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h1><p><img src="https://cloud.githubusercontent.com/assets/5423628/17101264/3635ecee-52a6-11e6-82c7-308f7384b628.png" alt=""><br>有controller，agent，manager，etcd，4个容器<br>从名字上来看</p>
<ul>
<li>controller应该是nginx+UI+reigstry的组合</li>
<li>agent，应该是swarm agent</li>
<li>manager，不用说，是swarm manager吧</li>
<li>etcd，做分布式存储</li>
</ul>
<p>接下来我一个个exec进去看看</p>
<h1 id="controller容器"><a href="#controller容器" class="headerlink" title="controller容器"></a>controller容器</h1><p>本来想用ps aux看下进程，竟然提示cmd不存在，看来DaoCloud对为了减少镜像体积，做了很深入的优化。</p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>当然，这个难不倒我，在/proc/里找到进程ID，然后cat每个进程的cmd，方法<br><code>find /proc -mindepth 2 -maxdepth 2 -name exe -exec ls -lh {} \; 2&gt;/dev/null</code><br>结果</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">1</span>/exe -&gt; /usr/bin/python2.<span class="number">7</span></span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">6</span>/exe -&gt; /usr/local/bin/dce-nginx</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">7</span>/exe -&gt; /usr/local/bin/dce-stream</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">11</span>/exe -&gt; /usr/sbin/nginx</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">12</span>/exe -&gt; /usr/local/bin/redis-server</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">15</span>/exe -&gt; /usr/local/bin/dce-controller</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">27</span>/exe -&gt; /usr/local/bin/dce-stream</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">30</span>/exe -&gt; /usr/local/bin/dce-controller</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">53</span> /<span class="keyword">proc</span>/<span class="number">5289</span>/exe -&gt; /usr/local/bin/dce-controller</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">52</span> /<span class="keyword">proc</span>/<span class="number">5297</span>/exe -&gt; /usr/local/bin/dce-registry</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">52</span> /<span class="keyword">proc</span>/<span class="number">5302</span>/exe -&gt; /usr/local/bin/registry</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">52</span> /<span class="keyword">proc</span>/<span class="number">5309</span>/exe -&gt; /usr/sbin/nginx</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">52</span> /<span class="keyword">proc</span>/<span class="number">5657</span>/exe -&gt; /bin/bash</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="type">Jul</span> <span class="number">25</span> <span class="number">12</span>:<span class="number">59</span> /<span class="keyword">proc</span>/<span class="number">5707</span>/exe -&gt; /usr/bin/find</span><br></pre></td></tr></table></figure>
<ul>
<li>进程1是python，可能是监控进程</li>
<li>进程6、11、5309，nginx，目测是worker</li>
<li>进程7和27，stream是什么么？记得首页上有个资源使用情况预测吗？</li>
<li>进程12，redis，看来是用来做持久化了哦</li>
<li>进程15、30、5289， dce-controller，不清楚，还需要分析，难道也是UI？</li>
<li>5279，5302，为啥有两个registry</li>
<li>后面两个都是我产生的进程，可以忽略。</li>
</ul>
<h2 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h2><p>把所有PID的cmdline都cat出来看看<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">files</span>=$(<span class="keyword">find</span> /proc -<span class="built_in">type</span> <span class="keyword">f</span> -name <span class="string">'cmdline'</span> | <span class="keyword">grep</span> -<span class="keyword">v</span> <span class="string">'task'</span> | <span class="keyword">grep</span> -<span class="keyword">v</span> <span class="string">"/proc/cmdline"</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">file</span> in $<span class="keyword">files</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">cat</span> $<span class="keyword">file</span> &gt;&gt; aaa</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">""</span> &gt;&gt; aaa</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/python/</span>usr<span class="regexp">/bin/</span>supervisord</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-nginx</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-stream</span><br><span class="line"><span class="string">nginx:</span> master process nginx -g daemon off;</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>redis-server *:<span class="number">6379</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-controller</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-stream</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-controller</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-controller</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>dce-registry</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>registryserve<span class="regexp">/etc/</span>docker<span class="regexp">/registry/</span>conf.yml</span><br><span class="line"><span class="string">nginx:</span> worker process</span><br><span class="line">bash</span><br></pre></td></tr></table></figure></p>
<p>通过命令行，每个进程的作用就更清晰了<br>再来分析一遍</p>
<ul>
<li>进程1是python，supervisord，果然是监控进程</li>
<li>进程6、11、5309，nginx，果然是master+worker</li>
<li>进程7和27，stream是什么么？记得首页上有个资源使用情况预测吗？</li>
<li>进程12，redis，看来是用来做持久化了哦</li>
<li>进程15、30、5289， dce-controller，应该就是UI？还可能会接受各个节点上报的资源使用情况</li>
<li>5279，5302，为啥有两个registry<ul>
<li>dce-registry 可能是index，用来做权限控制的？</li>
<li>registry就仓库了</li>
</ul>
</li>
</ul>
<h2 id="推测代码"><a href="#推测代码" class="headerlink" title="推测代码"></a>推测代码</h2><p>nginx 配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">upstream</span> registry &#123;</span><br><span class="line">  <span class="title">server</span> registry:<span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">upstream</span> ui &#123;</span><br><span class="line">  <span class="title">server</span> ui:<span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">  <span class="title">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title">location</span> /v2/ &#123;</span><br><span class="line">    <span class="title">proxy_pass</span> <span class="url">http://registry/v2/</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title">location</span> / &#123;</span><br><span class="line">    <span class="title">proxy_pass</span> <span class="url">http://ui/</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<img src="http://www.plantuml.com/plantuml/svg/AyaioKbLA2ujI2qgoopEBqfvFdlYixxbJrjNl6nUyMB_xEShkhcuClDAKelI4fDJ5PIISp9JyqgK51AB5Povk58IInAJ4ek1uaMfAPd5IWhLNBLSN6dvEIcfHGfAJtPFVhfhCbXjHcbIDPS244GNfQPd5fSKLSP2k2d9gV5eGd2kZQwk7Pe2e0gW1T5vwPbv5R5mXe9kQG5KQN9-NabHVavEQb6ibKA2VW8M9N3JG0hAZ41gq7GgwEQaffNese4znHKDL9oQc8ig2W00">
<h1 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h1><p>etcd没有刻意分析的必要，看下启动命令<br><code>/etcd --name dce-etcd-138.68.2.15 --data-dir /data</code></p>
<h1 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h1><p><img src="https://cloud.githubusercontent.com/assets/5423628/17104503/ce03684e-52b5-11e6-965a-21697a61fede.png" alt="启动命令"><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/swarm manage --replication --engine-refresh-min-interval 5s --engine-refresh-max-interval 10s --tls --tlscacert /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>ca.pem --tlscert <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>engine<span class="regexp">/engine-cert.pem --tlskey /</span>etc<span class="regexp">/ssl/</span><span class="keyword">private</span><span class="regexp">/engine/</span>engine-key.pem <span class="string">etcd:</span><span class="comment">//dce_etcd_1:2379</span></span><br></pre></td></tr></table></figure></p>
<p>比我之前用的swarm多了证书，etcd的地址应该是通过compose的service创建的网络来互联的</p>
<h1 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h1><p>启动命令<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>supervisord.sh</span><br></pre></td></tr></table></figure></p>
<p>结合部署节点的命令<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>-c <span class="string">"$(docker run -i --rm daocloud.io/daocloud/dce join &#123;你的控制器IP&#125;)"</span></span><br></pre></td></tr></table></figure></p>
<p>应该是把控制节点的IP写入到supervisord.sh，然后调用swarm join</p>
<h1 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h1><p>仅仅是猜测，还是不够，还得找出compose来看看，看下到底是怎么写的<br>通过ps aux找到了一个daotunnel，他的启动命令是<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">daomonit</span>/<span class="title">daotunnel</span> -<span class="title">log</span> /<span class="title">var</span>/<span class="title">log</span>/<span class="title">daotunnel</span>.<span class="title">log</span> -<span class="title">config</span> /<span class="title">etc</span>/<span class="title">daocloud</span>/<span class="title">daotunnel</span>.<span class="title">yml</span> <span class="title">start</span> <span class="title">docker</span> <span class="title">dce</span>-<span class="title">controller</span></span></span><br></pre></td></tr></table></figure></p>
<p>看来好货都藏在<code>/etc/daocloud/</code>里</p>
<p>源码之下没有密码，慢慢看吧<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  agent:</span><br><span class="line">    depends_on:</span><br><span class="line">    -<span class="ruby"> etcd</span><br><span class="line"></span>    environment:</span><br><span class="line">    -<span class="ruby"> <span class="constant">SWARM_ADVERTISE</span>=<span class="number">138.68</span>.<span class="number">2.15</span><span class="symbol">:</span><span class="number">12376</span></span><br><span class="line"></span>    -<span class="ruby"> <span class="constant">SWARM_AGENT_ARGS</span>=join <span class="symbol">etcd:</span>/<span class="regexp">/138.68.2.15:12379</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> CADVISOR_ARGS=-housekeeping_interval=1m --global_housekeeping_interval=1m -max_housekeeping_interval=10m</span><br><span class="line"></span></span>    image: daocloud.io/daocloud/dce-agent:1.3.2</span><br><span class="line">    labels:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> io.daocloud.dce.version=1.3.2</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.system=build-in</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.controller-ip=138.68.2.15</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.host-address=138.68.2.15</span><br><span class="line"></span></span>    ports:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> 12376:2376</span><br><span class="line"></span></span>    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> /var</span><span class="regexp">/run/docker</span>.<span class="symbol">sock:</span>/var/run/docker.sock</span><br><span class="line"></span>    -<span class="ruby"> /<span class="symbol">sys:</span>/<span class="symbol">sys:</span>ro</span><br><span class="line"></span>    -<span class="ruby"> /<span class="symbol">root:</span>/<span class="symbol">rootdir:</span>rw</span><br><span class="line"></span>  controller:</span><br><span class="line">    depends_on:</span><br><span class="line">    -<span class="ruby"> swarm-manager</span><br><span class="line"></span>    -<span class="ruby"> etcd</span><br><span class="line"></span>    environment:</span><br><span class="line">    -<span class="ruby"> <span class="constant">ETCD_URL</span>=<span class="symbol">etcd:</span>/<span class="regexp">/138.68.2.15:12379</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> CONTROLLER_ADVERTISE=138.68.2.15:80</span><br><span class="line"></span></span>    image: daocloud.io/daocloud/dce-controller:1.3.2</span><br><span class="line">    labels:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> io.daocloud.dce.version=1.3.2</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.system=build-in</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.controller-ip=138.68.2.15</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.host-address=138.68.2.15</span><br><span class="line"></span></span>    ports:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> 80:80</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> 443:443</span><br><span class="line"></span></span>    privileged: true</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> /var</span><span class="regexp">/local/dce</span><span class="regexp">/registry:/var</span><span class="regexp">/lib/registry</span></span><br><span class="line"></span>  etcd:</span><br><span class="line">    command: '--name dce-etcd-138.68.2.15 --data-dir /data '</span><br><span class="line">    environment:</span><br><span class="line">    -<span class="ruby"> <span class="constant">ETCD_ADVERTISE_CLIENT_URLS</span>=<span class="symbol">http:</span>/<span class="regexp">/138.68.2.15:12379</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_LISTEN_CLIENT_URLS=http:/</span><span class="regexp">/0.0.0.0:2379</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_LISTEN_PEER_URLS=http:/</span><span class="regexp">/0.0.0.0:12380</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_INITIAL_ADVERTISE_PEER_URLS=http:/</span><span class="regexp">/138.68.2.15:12380</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_CORS=*</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_INITIAL_CLUSTER_STATE=new</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> ETCD_INITIAL_CLUSTER=dce-etcd-138.68.2.15=http:/</span><span class="regexp">/138.68.2.15:12380</span><br><span class="line"></span></span>    image: daocloud.io/daocloud/dce-etcd:1.3.2</span><br><span class="line">    labels:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> io.daocloud.dce.version=1.3.2</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.system=build-in</span><br><span class="line"></span></span>    ports:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> 12380:12380</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> 12379:2379</span><br><span class="line"></span></span>    restart: unless-stopped</span><br><span class="line">    volumes:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> /var</span><span class="regexp">/local/dce</span><span class="regexp">/etcd:/data</span></span><br><span class="line"></span>  swarm-manager:</span><br><span class="line">    command: manage --replication --engine-refresh-min-interval 5s --engine-refresh-max-interval</span><br><span class="line">      10s --tls --tlscacert /etc/ssl/private/engine/ca.pem --tlscert /etc/ssl/private/engine/engine-cert.pem</span><br><span class="line">      -<span class="ruby">-tlskey /etc/ssl/private/engine/engine-key.pem <span class="symbol">etcd:</span>/<span class="regexp">/dce_etcd_1:2379</span><br><span class="line"></span></span>    depends_on:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> etcd</span><br><span class="line"></span></span>    environment:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> SWARM_ADVERTISE=138.68.2.15:2375</span><br><span class="line"></span></span>    image: daocloud.io/daocloud/dce-swarm:1.3.2</span><br><span class="line">    labels:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> io.daocloud.dce.version=1.3.2</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.system=build-in</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.controller-ip=138.68.2.15</span><br><span class="line"></span></span>    -<span class="ruby"><span class="regexp"> io.daocloud.dce.host-address=138.68.2.15</span><br><span class="line"></span></span>    ports:</span><br><span class="line">    -<span class="ruby"><span class="regexp"> 2375:2375</span><br><span class="line"></span></span>    restart: unless-stopped</span><br><span class="line">version: '2'</span><br></pre></td></tr></table></figure></p>
<p>agent比我之前猜测的多了个cadvisor</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;DaoCloud是国内领先的容器云，我的山寨容器云需要多向他学习。&lt;br&gt;前几天把环境弄好了，也简单试用了，大概知道DCE技术栈。&lt;br&gt;&lt;a href=&quot;http://blog.decbug.com/2016/07/20/play_dce/&quot;&gt;http://blog.decbug.com/2016/07/20/play_dce/&lt;/a&gt;&lt;br&gt;果然是把docker原生技术发挥到了很棒的境界，很值得学习。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="DaoCloud" scheme="http://blog.decbug.com/tags/DaoCloud/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="swarm" scheme="http://blog.decbug.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>高级docker镜像仓库之删除镜像与恢复镜像</title>
    <link href="http://blog.decbug.com/2016/07/21/del_restore_docker_image/"/>
    <id>http://blog.decbug.com/2016/07/21/del_restore_docker_image/</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>看到有容云的AppHouse有删除、恢复镜像的功能，觉得很厉害，打算在我的山寨容器云的仓库上也加上这个功能</p>
<a id="more"></a>
<h1 id="抓包分析有容云"><a href="#抓包分析有容云" class="headerlink" title="抓包分析有容云"></a>抓包分析有容云</h1><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ol>
<li><p>因为容器间通信肯定会经过docker0，所以抓docker0就够了</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -<span class="tag">i</span> docker0 -w del_restore.cap</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看AppHouse的registry容器的IP</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps | grep app</span><br><span class="line"><span class="preprocessor"># 得到registry的container ID</span></span><br><span class="line"></span><br><span class="line">docker inspect <span class="number">3</span>a9d50c216de</span><br><span class="line"><span class="preprocessor">#找到IP <span class="string">"IPAddress"</span>: <span class="string">"172.16.52.3"</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wireshark加上条件<code>(ip.src == 172.16.52.3) || (ip.dst == 172.16.52.3) &amp;&amp; tcp.port ==5002 &amp;&amp; http</code></p>
</li>
</ol>
<h2 id="分析包"><a href="#分析包" class="headerlink" title="分析包"></a>分析包</h2><h3 id="获取镜像信息"><a href="#获取镜像信息" class="headerlink" title="获取镜像信息"></a>获取镜像信息</h3><p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/get.png" alt="get"></p>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/get_rsp.png" alt="get response"></p>
<p>获取镜像信息，应该是把返回的body都保存下来了</p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/del.png" alt="delete"></p>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/del_rsp.png" alt="delete response"></p>
<p>这个没啥好说</p>
<h3 id="恢复镜像"><a href="#恢复镜像" class="headerlink" title="恢复镜像"></a>恢复镜像</h3><p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/put.png" alt="put"></p>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/del_image/put_rsp.png" alt="put response"></p>
<p>应该是把之前保存的body又再put进去</p>
<h1 id="官方不建议删除镜像"><a href="#官方不建议删除镜像" class="headerlink" title="官方不建议删除镜像"></a>官方不建议删除镜像</h1><p>因为<a href="https://github.com/docker/distribution/blob/master/ROADMAP.md#deletes" target="_blank" rel="external">https://github.com/docker/distribution/blob/master/ROADMAP.md#deletes</a></p>
<blockquote>
<p>NOTE: Deletes are a much asked for feature. Before requesting this feature or participating in discussion, we ask that you read this section in full and understand the problems behind deletes.</p>
</blockquote>
<p>删除固然简单，删除manifest和blob就行。但是，blob是分层的，可能是多个镜像共用的，如果在删除某个blob的时候，其他人正在使用这个blob，那么就麻烦了。</p>
<h1 id="其实是有删除接口的"><a href="#其实是有删除接口的" class="headerlink" title="其实是有删除接口的"></a>其实是有删除接口的</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /v2/<span class="tag">&lt;<span class="title">name</span>&gt;</span>/manifests/<span class="tag">&lt;<span class="title">reference</span>&gt;</span></span><br><span class="line">Host: <span class="tag">&lt;<span class="title">registry</span> <span class="attribute">host</span>&gt;</span></span><br><span class="line">Authorization: <span class="tag">&lt;<span class="title">scheme</span>&gt;</span> <span class="tag">&lt;<span class="title">token</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="number">0.1</span></span><br><span class="line"><span class="attribute">log</span>:</span><br><span class="line">  <span class="attribute">fields</span>:</span><br><span class="line">    <span class="attribute">service</span>: registry</span><br><span class="line"><span class="attribute">storage</span>:</span><br><span class="line">    <span class="attribute">cache</span>:</span><br><span class="line">        <span class="attribute">blobdescriptor</span>: inmemory</span><br><span class="line">    <span class="attribute">filesystem</span>:</span><br><span class="line">        <span class="attribute">rootdirectory</span>: /var/lib/registry</span><br><span class="line"># 这里需要把delelte设置为true</span><br><span class="line">    <span class="attribute">delete</span>:</span><br><span class="line">        <span class="attribute">enabled</span>: true</span><br><span class="line"><span class="attribute">http</span>:</span><br><span class="line">    <span class="attribute">addr</span>: :<span class="number">5000</span></span><br><span class="line">    <span class="attribute">headers</span>:</span><br><span class="line">        <span class="attribute">X-Content-Type-Options</span>: [nosniff]</span><br><span class="line"><span class="attribute">health</span>:</span><br><span class="line">  <span class="attribute">storagedriver</span>:</span><br><span class="line">    <span class="attribute">enabled</span>: true</span><br><span class="line">    <span class="attribute">interval</span>: <span class="number">10s</span></span><br><span class="line">    <span class="attribute">threshold</span>: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="用python写的测试代码"><a href="#用python写的测试代码" class="headerlink" title="用python写的测试代码"></a>用python写的测试代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> simplejson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">registry = <span class="string">"http://192.168.1.245:25678/v2/"</span></span><br><span class="line">image = <span class="string">"test/consul"</span></span><br><span class="line">tag = <span class="string">"latest"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(registry + <span class="string">"_catalog/"</span>, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'Accept'</span>: <span class="string">'application/vnd.docker.distribution.manifest.v2+json'</span>&#125;</span><br><span class="line">r = requests.get(registry + image + <span class="string">"/manifests/"</span> + tag, headers=headers, verify=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取manifest</span></span><br><span class="line">manifest = r.headers[<span class="string">'Docker-Content-Digest'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"manifest: "</span> + manifest</span><br><span class="line"></span><br><span class="line">data = r.text</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"><span class="comment"># for blob in data['fsLayers']:</span></span><br><span class="line"><span class="comment">#     blob_digest = blob['blobSum']</span></span><br><span class="line"><span class="comment">#     print blob_digest</span></span><br><span class="line"><span class="comment">#     r = requests.delete(registry + "v2/xx/hello/blobs/" + blob_digest, verify=False)</span></span><br><span class="line"><span class="comment">#     print r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"delete"</span></span><br><span class="line">r = requests.delete(registry + image + <span class="string">"/manifests/"</span> + manifest, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> r.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"restore"</span></span><br><span class="line">r = requests.put(registry + image + <span class="string">"/manifests/"</span> + tag, data=data, verify=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> r.status_code</span><br></pre></td></tr></table></figure>
<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><img src="http://www.plantuml.com/plantuml/svg/VP3DRW8n38JFpLDOox5QrFCASgWgSU4bdDqXHCeco77uUVkkoa8bG9mi-HjxxE6gETNHGQXPxN9IwdFCidQnmgwSfQybKMDC7mEIjjQpuiGNCzVM2dmeAfUEF9H6Jc67ekRMRkyZ7GcqIlhNt7UeSDbt55A1A8MHFIZnY4zbJvhfZx-o712XU6ScA3K-MnK-uf6rzlfaTmDcO6N71VC1nkKpDJ_V3IssmUzr8rCG7mSM3Nquy9JTLOSqq2Jz1G00">
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;看到有容云的AppHouse有删除、恢复镜像的功能，觉得很厉害，打算在我的山寨容器云的仓库上也加上这个功能&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="image" scheme="http://blog.decbug.com/tags/image/"/>
    
      <category term="registry" scheme="http://blog.decbug.com/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>看harbor源码</title>
    <link href="http://blog.decbug.com/2016/07/20/inspect_harbor/"/>
    <id>http://blog.decbug.com/2016/07/20/inspect_harbor/</id>
    <published>2016-07-20T12:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前自己搞了个玩具registry，没有权限控制，没有角色，没有统计。正好vmware开源了harbor，号称是企业级仓库，我自然是不会放过，要研究一下。</p>
<a id="more"></a>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h2><blockquote>
<p>Install Harbor with the following commands. Note that the docker-compose process can take a while.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd Deploy</span><br><span class="line"></span><br><span class="line">$ ./<span class="operator"><span class="keyword">prepare</span></span><br><span class="line"><span class="keyword">Generated</span> configuration <span class="keyword">file</span>: ./config/ui/env</span><br><span class="line"><span class="keyword">Generated</span> configuration <span class="keyword">file</span>: ./config/ui/app.conf</span><br><span class="line"><span class="keyword">Generated</span> configuration <span class="keyword">file</span>: ./config/registry/config.yml</span><br><span class="line"><span class="keyword">Generated</span> configuration <span class="keyword">file</span>: ./config/db/env</span><br><span class="line"></span><br><span class="line">docker-compose up -<span class="keyword">d</span></span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="特殊国情下的模式"><a href="#特殊国情下的模式" class="headerlink" title="特殊国情下的模式"></a>特殊国情下的模式</h2><p>不建议用，最好还是番茄自己build<br>因为Daoloud和CaiCloud的版本都太老，很多新特性都没有。</p>
<h2 id="离线模式"><a href="#离线模式" class="headerlink" title="离线模式"></a>离线模式</h2><p>由于公司坑爹的模式，很多镜像下载不了，只好在家pull下来，然后save成tar，再到公司load<br>具体看这<a href="https://github.com/vmware/harbor/releases/download/0.3.0/harbor-0.3.0.tgz" target="_blank" rel="external">链接</a></p>
<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="http://dockerone.com/uploads/article/20160331/d9f81c0cdcc4f7b7af42d27d030cf381.png" alt="来自[dockone的架构图](http://dockone.io/article/1179)"></p>
<img src="http://www.plantuml.com/plantuml/svg/oymhIIrAIqnELL1ApibCpIjHKaWiLd3cuaf9B4bCIYm6YljM1XVcA2bKSzLoSQNbvwIa5YaeXNg211I083etCJCl5i9CB2t9W3BpyaioqpAJ4qioyy6oGBtE2hf0yVJCl8fOBYYjeATdfn1Tb9gUMLnIL1chOALGMfJpRCRw1FqoemHKHM1ha1G0fH7wm2h0jWDLbEHdf-PXoA8u2AWAcSyLwWbM1FQfLKeI5nTGDXLeK852VXgI-u3-UDamw_dyfKytR7pQF_5fnmOKKnGKdkwT_79EmujbZIyxjpoRs_ni-ZQWoXSRcfzFMG5o7LTgNWh8ubG0">
<p>我画的架构图</p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>通过<code>tree -d ./</code>生成，略去部分不重要代码<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">├── api</span><br><span class="line">│   └── jobs</span><br><span class="line">├── auth</span><br><span class="line">│   ├── <span class="keyword">db</span></span><br><span class="line">│   └── ldap</span><br><span class="line">├── contrib</span><br><span class="line">├── controllers</span><br><span class="line">├── dao</span><br><span class="line">├── Deploy</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   ├── <span class="keyword">db</span></span><br><span class="line">│   │   ├── jobservice</span><br><span class="line">│   │   ├── nginx</span><br><span class="line">│   │   │   └── cert</span><br><span class="line">│   │   ├── registry</span><br><span class="line">│   │   └── ui</span><br><span class="line">│   ├── <span class="keyword">db</span></span><br><span class="line">│   ├── kubernetes</span><br><span class="line">│   │   └── dockerfiles</span><br><span class="line">│   ├── <span class="literal">log</span></span><br><span class="line">│   └── templates</span><br><span class="line">│       ├── <span class="keyword">db</span></span><br><span class="line">│       ├── jobservice</span><br><span class="line">│       ├── registry</span><br><span class="line">│       └── ui</span><br><span class="line">├── job</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── replication</span><br><span class="line">│   └── utils</span><br><span class="line">├── jobservice</span><br><span class="line">├── models</span><br><span class="line">├── service</span><br><span class="line">│   ├── cache</span><br><span class="line">│   ├── <span class="keyword">token</span></span><br><span class="line">│   └── utils</span><br><span class="line">├── static前端</span><br><span class="line">├── tests</span><br><span class="line">├── ui</span><br><span class="line">├── utils共用组件</span><br><span class="line">├── vendor三方库</span><br><span class="line">└── views</span><br></pre></td></tr></table></figure></p>
<p>对应架构图来看</p>
<ul>
<li>proxy就是nginx，<code>Deploy/config/nginx/nginx.conf</code></li>
<li>UI就是<code>ui/main.go</code></li>
<li>token就是<code>service/token/token.go</code></li>
<li>registry的webhook就是<code>Deploy/templates/registry/config.yml</code>的notifications和auth<ul>
<li>auth指向<code>beego.Router(&quot;/service/token&quot;, &amp;token.Handler{})</code>，<code>service/token/token.go</code></li>
<li>notification指向<code>beego.Router(&quot;/service/notifications&quot;, &amp;service.NotificationHandler{})</code>，用来同步备份到远端仓库。<code>service/notification.go</code></li>
</ul>
</li>
<li><code>auth/authenticator.go</code>接口，有本地db和LDAP两种实现，在init时会registrer，根据配置选择用哪个实现。</li>
</ul>
<h1 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h1><p><img src="https://cloud.githubusercontent.com/assets/5423628/16990645/4d744da8-4ecb-11e6-9f34-b052a0ba5cc6.png" alt=""><br>这个特性很不错啊，registry有了新的更新，就notify到ui的notification，根据配置的策略，是否要备份到远端registry</p>
<h1 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h1><p>用的是open LDAP<br>代码在auth/ldap/ldap.go<br>LDAP_BASE_DN 这个还不会配置</p>
<h1 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h1><p>Role Based Access Control<br><code>service/token/authutils.go的FilterAccess</code>，通过token里的scope获取action，再到数据库里查询是否有权限</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前自己搞了个玩具registry，没有权限控制，没有角色，没有统计。正好vmware开源了harbor，号称是企业级仓库，我自然是不会放过，要研究一下。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="harbor" scheme="http://blog.decbug.com/tags/harbor/"/>
    
      <category term="registry" scheme="http://blog.decbug.com/tags/registry/"/>
    
      <category term="vmware" scheme="http://blog.decbug.com/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>在家玩DaoCloud企业版</title>
    <link href="http://blog.decbug.com/2016/07/20/play_dce/"/>
    <id>http://blog.decbug.com/2016/07/20/play_dce/</id>
    <published>2016-07-19T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>DaoCloud是国内领先的容器云，我的山寨容器云需要多向他学习。<br>以前只用过公有云版本，大概把持续集成持续交付那一块弄明白了。最近发现有DaoCloud企业版，简称DEC，看了下截图，感觉很不错，决定也自己搞一个玩。</p>
<a id="more"></a>
<h1 id="创建机器"><a href="#创建机器" class="headerlink" title="创建机器"></a>创建机器</h1><p>在DigitalOcean创建两台最低配.</p>
<h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h2><p>也就是master<br>一条命令搞定<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>-c <span class="string">"$(docker run -i --rm daocloud.io/daocloud/dce install)"</span></span><br></pre></td></tr></table></figure></p>
<p>竟然内存太小，凑着着用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Verifying System compatibility...</span><br><span class="line">Requirement              Value                          Note</span><br><span class="line">-----------------------  -----------------------------  -------------------------------------------------------</span><br><span class="line">CPU                      <span class="number">1</span>                              Recommended more than <span class="number">4</span> CPU Core.</span><br><span class="line">Memory                   <span class="number">489.9921875</span> MiB                WARN: Should be installed where more than <span class="number">1</span>G memory.</span><br><span class="line">Storage For Docker       <span class="number">16.7933425903</span> GiB              Recommended more than <span class="number">30</span>GB.</span><br><span class="line">Network to Controller    OK                             OK</span><br><span class="line">Network from Controller  OK                             OK</span><br><span class="line">Operating System         Ubuntu <span class="number">14.04</span><span class="number">.4</span> LTS             WARN: Recommended Ubuntu <span class="number">16.04</span>.</span><br><span class="line">Linux Kernel             <span class="number">3.13</span><span class="number">.0</span>-<span class="number">85</span>-generic              Recommended the latest maintained version Linux kernel.</span><br><span class="line">Docker Version           <span class="number">1.11</span><span class="number">.2</span>                         OK</span><br><span class="line">Docker Storage Driver    aufs                           OK</span><br><span class="line">Docker Feature           All Supported                  OK</span><br><span class="line">Docker ID                MIM2:DL6F:WVJN:UDDF:...        OK</span><br><span class="line">Firewalld                UnKnown                        Make sure the firewalld has been closed.</span><br><span class="line">Host Name                docker-<span class="number">512</span>mb-sfo2-<span class="number">01</span>           OK</span><br><span class="line">Port                     <span class="number">80</span>,<span class="number">443</span>,<span class="number">2375</span>,<span class="number">12376</span>,<span class="number">12380</span>,<span class="number">12379</span>  OK</span><br><span class="line">Time                     <span class="number">0</span>ms                            OK</span><br><span class="line">SELinux                  permissive                     SELinux has been disabled.</span><br></pre></td></tr></table></figure></p>
<h2 id="容器节点"><a href="#容器节点" class="headerlink" title="容器节点"></a>容器节点</h2><p>也就是slave<br>看起来像是swarm join<br>在另一台机器上运行</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bash </span>-c <span class="string">"$(docker run -i --rm daocloud.io/daocloud/dce join &#123;你的控制器IP&#125;)"</span></span><br></pre></td></tr></table></figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://cloud.githubusercontent.com/assets/5423628/16971073/34dce8c2-4e53-11e6-8e40-1dd8e292dcfa.png" alt="image"><br><img src="https://cloud.githubusercontent.com/assets/5423628/16971113/921cf004-4e53-11e6-8c9f-02c7eaca1105.png" alt="image"></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;DaoCloud是国内领先的容器云，我的山寨容器云需要多向他学习。&lt;br&gt;以前只用过公有云版本，大概把持续集成持续交付那一块弄明白了。最近发现有DaoCloud企业版，简称DEC，看了下截图，感觉很不错，决定也自己搞一个玩。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="DaoCloud" scheme="http://blog.decbug.com/tags/DaoCloud/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="swarm" scheme="http://blog.decbug.com/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>net-speeder番茄加速</title>
    <link href="http://blog.decbug.com/2016/07/15/net_speeder/"/>
    <id>http://blog.decbug.com/2016/07/15/net_speeder/</id>
    <published>2016-07-14T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于流量不够用，又买了个廉价vps，3年只要8刀，64M内存，1G硬盘，250M流量。<br>由于配置比较差，且机房离大陆远，ping有300多ms，看youtube略卡，只好使用net-speeder</p>
<a id="more"></a>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装libnet-<span class="built_in">dev</span>：</span><br><span class="line">apt-<span class="built_in">get</span> install libnet1-<span class="built_in">dev</span></span><br><span class="line">#安装libpcap-<span class="built_in">dev</span>：</span><br><span class="line">apt-<span class="built_in">get</span> install libpcap0<span class="number">.8</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<h2 id="安装net-speeder"><a href="#安装net-speeder" class="headerlink" title="安装net-speeder"></a>安装net-speeder</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//github.com/snooda/net-speeder/archive/master.zip</span></span><br><span class="line">unzip master.<span class="keyword">zip</span></span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">net</span>-speeder-master</span><br><span class="line"># openvz 用这个命令make</span><br><span class="line"><span class="keyword">sh</span> build.<span class="keyword">sh</span> -DCOOKED</span><br></pre></td></tr></table></figure>
<h2 id="添加开机启动"><a href="#添加开机启动" class="headerlink" title="添加开机启动"></a>添加开机启动</h2><p>打开/etc/local.rc，加上<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[net_speeder安装目录]</span>/net_speeder venet0:<span class="number">0</span> <span class="string">"ip"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>不知是不算心理作用，果然不那么卡了</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;由于流量不够用，又买了个廉价vps，3年只要8刀，64M内存，1G硬盘，250M流量。&lt;br&gt;由于配置比较差，且机房离大陆远，ping有300多ms，看youtube略卡，只好使用net-speeder&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="番茄" scheme="http://blog.decbug.com/tags/%E7%95%AA%E8%8C%84/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes:pod内IPC</title>
    <link href="http://blog.decbug.com/2016/07/03/docker_kubernetes_IPC_pod/"/>
    <id>http://blog.decbug.com/2016/07/03/docker_kubernetes_IPC_pod/</id>
    <published>2016-07-02T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<p>要动态更新容器里某些进程的配置，例如nginx。所以需要实时获取配置更新，并同步到容器里的配置文件里，采用的方法是用confd从etcd采集数据，然后更新配置文件的方法。<br>现有的方案是把confd+nginx放在同一个容器里，虽然能解决问题，但是不够优雅，毕竟一个容器只跑一个进程好。<br>恰好业务是跑在k8s上，k8s关于pod的文档上说</p>
<blockquote>
<p>Containers within a pod share an IP address and port space, and can find each other via localhost. They can also communicate with each other using standard inter-process communications like SystemV semaphores or POSIX shared memory. Containers in different pods have distinct IP addresses and can not communicate by IPC</p>
</blockquote>
<p>如果同一个pod里的进程，可以互相看到对方，那么就可以不用修改，直接把现有一个容器拆成两个容器了。</p>
<a id="more"></a>
<p>提前剧透一下结论，是看不到的。因为</p>
<blockquote>
<p>The context of the pod can be defined as the conjunction of several Linux namespaces:</p>
<ul>
<li>PID namespace (applications within the pod can see each other’s processes)</li>
<li>network namespace (applications within the pod have access to the same IP and port space)</li>
<li>IPC namespace (applications within the pod can use SystemV IPC or POSIX message queues to communicate)</li>
<li>UTS namespace (applications within the pod share a hostname)</li>
</ul>
<p>In terms of Docker constructs, a pod consists of a colocated group of Docker containers with shared volumes. PID namespace sharing is not yet implemented with Docker.</p>
</blockquote>
<h1 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h1><p>创建两个容器的pod<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: v1</span><br><span class="line"><span class="attribute">kind</span>: Pod</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: ipc2</span><br><span class="line">  <span class="attribute">labels</span>:</span><br><span class="line">    <span class="attribute">app</span>: web</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">containers</span>:</span><br><span class="line">    - <span class="attribute">name</span>: registry</span><br><span class="line">      <span class="attribute">image</span>: registry</span><br><span class="line">      <span class="attribute">ports</span>:</span><br><span class="line">        - <span class="attribute">containerPort</span>: <span class="number">5000</span></span><br><span class="line">    - <span class="attribute">name</span>: nginx</span><br><span class="line">      <span class="attribute">image</span>: <span class="attribute">nginx</span>:<span class="number">1.9</span></span><br><span class="line">      <span class="attribute">ports</span>:</span><br><span class="line">        - <span class="attribute">containerPort</span>: <span class="number">80</span></span><br></pre></td></tr></table></figure></p>
<h1 id="进入其中一个ps和netstat"><a href="#进入其中一个ps和netstat" class="headerlink" title="进入其中一个ps和netstat"></a>进入其中一个ps和netstat</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">./<span class="tag">kubectl</span> <span class="tag">exec</span> <span class="tag">-it</span> <span class="tag">ipc2</span> <span class="tag">bash</span></span><br><span class="line"></span><br><span class="line"># 看进程</span><br><span class="line"><span class="tag">ps</span> <span class="tag">aux</span></span><br><span class="line"># 结果，只能看到<span class="tag">registry</span>的进程</span><br><span class="line"><span class="tag">USER</span>       <span class="tag">PID</span> %<span class="tag">CPU</span> %<span class="tag">MEM</span>    <span class="tag">VSZ</span>   <span class="tag">RSS</span> <span class="tag">TTY</span>      <span class="tag">STAT</span> <span class="tag">START</span>   <span class="tag">TIME</span> <span class="tag">COMMAND</span></span><br><span class="line"><span class="tag">root</span>         <span class="tag">1</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.4</span>  <span class="tag">53228</span> <span class="tag">15992</span> ?        <span class="tag">Ss</span>   <span class="tag">14</span><span class="pseudo">:56</span>   <span class="tag">0</span><span class="pseudo">:00</span> /<span class="tag">usr</span>/<span class="tag">bin</span>/<span class="tag">python</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">13</span>  <span class="tag">1</span><span class="class">.0</span>  <span class="tag">1</span><span class="class">.0</span> <span class="tag">110492</span> <span class="tag">39600</span> ?        <span class="tag">S</span>    <span class="tag">14</span><span class="pseudo">:56</span>   <span class="tag">0</span><span class="pseudo">:03</span> /<span class="tag">usr</span>/<span class="tag">bin</span>/<span class="tag">python</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">14</span>  <span class="tag">1</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.9</span> <span class="tag">110256</span> <span class="tag">38804</span> ?        <span class="tag">S</span>    <span class="tag">14</span><span class="pseudo">:56</span>   <span class="tag">0</span><span class="pseudo">:03</span> /<span class="tag">usr</span>/<span class="tag">bin</span>/<span class="tag">python</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">17</span>  <span class="tag">0</span><span class="class">.9</span>  <span class="tag">0</span><span class="class">.9</span> <span class="tag">110272</span> <span class="tag">38820</span> ?        <span class="tag">S</span>    <span class="tag">14</span><span class="pseudo">:56</span>   <span class="tag">0</span><span class="pseudo">:03</span> /<span class="tag">usr</span>/<span class="tag">bin</span>/<span class="tag">python</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">18</span>  <span class="tag">1</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.9</span> <span class="tag">110276</span> <span class="tag">38816</span> ?        <span class="tag">S</span>    <span class="tag">14</span><span class="pseudo">:56</span>   <span class="tag">0</span><span class="pseudo">:03</span> /<span class="tag">usr</span>/<span class="tag">bin</span>/<span class="tag">python</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">44</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">18148</span>  <span class="tag">3364</span> ?        <span class="tag">Ss</span>+  <span class="tag">15</span><span class="pseudo">:00</span>   <span class="tag">0</span><span class="pseudo">:00</span> <span class="tag">bash</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">60</span>  <span class="tag">2</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">18152</span>  <span class="tag">3192</span> ?        <span class="tag">Ss</span>   <span class="tag">15</span><span class="pseudo">:01</span>   <span class="tag">0</span><span class="pseudo">:00</span> <span class="tag">bash</span></span><br><span class="line"><span class="tag">root</span>        <span class="tag">74</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">0</span><span class="class">.0</span>  <span class="tag">15572</span>  <span class="tag">2164</span> ?        <span class="tag">R</span>+   <span class="tag">15</span><span class="pseudo">:01</span>   <span class="tag">0</span><span class="pseudo">:00</span> <span class="tag">ps</span> <span class="tag">aux</span></span><br><span class="line"></span><br><span class="line"># 看端口</span><br><span class="line"><span class="tag">root</span>@<span class="tag">ipc2</span>:/# <span class="tag">netstat</span> <span class="tag">-anplt</span></span><br><span class="line"># 结果，网络共享了</span><br><span class="line"><span class="tag">Active</span> <span class="tag">Internet</span> <span class="tag">connections</span> (servers and established)</span><br><span class="line"><span class="tag">Proto</span> <span class="tag">Recv-Q</span> <span class="tag">Send-Q</span> <span class="tag">Local</span> <span class="tag">Address</span>           <span class="tag">Foreign</span> <span class="tag">Address</span>         <span class="tag">State</span>       <span class="tag">PID</span>/<span class="tag">Program</span> <span class="tag">name</span></span><br><span class="line"><span class="tag">tcp</span>        <span class="tag">0</span>      <span class="tag">0</span> <span class="tag">0</span><span class="class">.0</span><span class="class">.0</span><span class="class">.0</span><span class="pseudo">:5000</span>            <span class="tag">0</span><span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>:*               <span class="tag">LISTEN</span>      <span class="tag">-</span></span><br><span class="line"><span class="tag">tcp</span>        <span class="tag">0</span>      <span class="tag">0</span> <span class="tag">0</span><span class="class">.0</span><span class="class">.0</span><span class="class">.0</span><span class="pseudo">:80</span>              <span class="tag">0</span><span class="class">.0</span><span class="class">.0</span><span class="class">.0</span>:*               <span class="tag">LISTEN</span>      <span class="tag">-</span></span><br></pre></td></tr></table></figure>
<h1 id="进入另一个容器"><a href="#进入另一个容器" class="headerlink" title="进入另一个容器"></a>进入另一个容器</h1><p>进入nginx容器看看进程<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it k8s_nginx.fb0f31c6_ipc2_default_82fd2fb7-<span class="number">42</span>c0-<span class="number">11e6</span>-a4f1-d43d7e2c2527_c689aa68 bash</span><br><span class="line">root@ipc2:/<span class="preprocessor"># ps axu</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 只能看到nginx的进程</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         <span class="number">1</span>  <span class="number">0.0</span>  <span class="number">0.1</span>  <span class="number">31684</span>  <span class="number">5100</span> ?        Ss   <span class="number">14</span>:<span class="number">57</span>   <span class="number">0</span>:<span class="number">00</span> nginx: master process nginx -g daemon off;</span><br><span class="line">nginx        <span class="number">5</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">32068</span>  <span class="number">2904</span> ?        S    <span class="number">14</span>:<span class="number">57</span>   <span class="number">0</span>:<span class="number">00</span> nginx: worker process</span><br><span class="line">root         <span class="number">6</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">20224</span>  <span class="number">3272</span> ?        Ss   <span class="number">15</span>:<span class="number">00</span>   <span class="number">0</span>:<span class="number">00</span> bash</span><br><span class="line">root        <span class="number">19</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">17500</span>  <span class="number">2096</span> ?        R+   <span class="number">15</span>:<span class="number">09</span>   <span class="number">0</span>:<span class="number">00</span> ps axu</span><br></pre></td></tr></table></figure></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>网络、UTC、IPC都共享，但是PID不能共享。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要动态更新容器里某些进程的配置，例如nginx。所以需要实时获取配置更新，并同步到容器里的配置文件里，采用的方法是用confd从etcd采集数据，然后更新配置文件的方法。&lt;br&gt;现有的方案是把confd+nginx放在同一个容器里，虽然能解决问题，但是不够优雅，毕竟一个容器只跑一个进程好。&lt;br&gt;恰好业务是跑在k8s上，k8s关于pod的文档上说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers within a pod share an IP address and port space, and can find each other via localhost. They can also communicate with each other using standard inter-process communications like SystemV semaphores or POSIX shared memory. Containers in different pods have distinct IP addresses and can not communicate by IPC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果同一个pod里的进程，可以互相看到对方，那么就可以不用修改，直接把现有一个容器拆成两个容器了。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes自定义admission插件</title>
    <link href="http://blog.decbug.com/2016/06/28/k8s_admission/"/>
    <id>http://blog.decbug.com/2016/06/28/k8s_admission/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="quota"><a href="#quota" class="headerlink" title="quota"></a>quota</h2><p>k8s的resourcequota的粒度太粗，只能针对namespace级进行quota。<br>为了实现更细粒度的quota，有必要自制一个admission插件。</p>
<h2 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h2><p>由于ABAC是在api server启动的时候载入，如果有修改，就必须重启api server才能生效。所以我想做个动态ABAC插件，把权限信息保存到etcd</p>
<a id="more"></a>
<h1 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h1><p>代码在plugin/pkg/admission，已有admit, deny, resourcequota等插件。<br>有两个函数需要重点关注</p>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span> &#123;</span></span><br><span class="line">	admission.RegisterPlugin(<span class="string">"AlwaysAdmit"</span>, <span class="function"><span class="keyword">func</span><span class="params">(client clientset.Interface, config io.Reader)</span> <span class="params">(admission.Interface, error)</span> &#123;</span></span><br><span class="line">		<span class="keyword">return</span> NewAlwaysAdmit(), nil</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册<code>AlwaysAdmit</code>，返回值是<code>admission.Interface</code>，注意看admit函数</p>
<h2 id="admit"><a href="#admit" class="headerlink" title="admit"></a>admit</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(alwaysAdmit)</span> <span class="title">Admit</span><span class="params">(a admission.Attributes)</span> <span class="params">(err error)</span> &#123;</span></span><br><span class="line">	<span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h1><p>也要实现一个init，用于注册及返回Interface。然后完成admit函数<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *myadmission)</span> <span class="title">Admit</span><span class="params">(a admission.Attributes)</span> <span class="params">(err error)</span> &#123;</span></span><br><span class="line">    // 加上我的判断逻辑</span><br><span class="line">    <span class="keyword">if</span> allow &#123;</span><br><span class="line">        <span class="keyword">return</span> nil</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> admission.NewForbidden()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;quota&quot;&gt;&lt;a href=&quot;#quota&quot; class=&quot;headerlink&quot; title=&quot;quota&quot;&gt;&lt;/a&gt;quota&lt;/h2&gt;&lt;p&gt;k8s的resourcequota的粒度太粗，只能针对namespace级进行quota。&lt;br&gt;为了实现更细粒度的quota，有必要自制一个admission插件。&lt;/p&gt;
&lt;h2 id=&quot;ABAC&quot;&gt;&lt;a href=&quot;#ABAC&quot; class=&quot;headerlink&quot; title=&quot;ABAC&quot;&gt;&lt;/a&gt;ABAC&lt;/h2&gt;&lt;p&gt;由于ABAC是在api server启动的时候载入，如果有修改，就必须重启api server才能生效。所以我想做个动态ABAC插件，把权限信息保存到etcd&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>plantuml</title>
    <link href="http://blog.decbug.com/2016/06/27/plantuml/"/>
    <id>http://blog.decbug.com/2016/06/27/plantuml/</id>
    <published>2016-06-26T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>架构图即代码<br>PlantUML is a open-source tool that allows to quickly write :</p>
<ul>
<li>Sequence diagram,</li>
<li>Usecase diagram,</li>
<li>Class diagram,</li>
<li>Activity diagram, (here is the new syntax),</li>
<li>Component diagram,</li>
<li>State diagram,</li>
<li>Deployment diagram,</li>
<li>Object diagram.</li>
<li>wireframe graphical interface</li>
</ul>
<a id="more"></a>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="http://www.plantuml.com/plantuml/svg/NOyn3i8m34NtdEAhKplGeMC7f1w0Bi36uhQ61gLEbKI8uvEa5KX8KVBz_6t7xOcqe9iMBIt8RqgLLyy8CuFMrUYHWhPIfNHAL4h5s-5mH7aEv4Arnmbi-TmbWXyH6nXEF-O0Uz-ceCLbrXxna83VjAo6wt_hLWzqo7oCLZBUHZ8mhC3pYnqP62ti5SkKVNkN8W_8ChwZ5U4ny7IJOB-5TdX6wEiYxTStQjy9TPsYlaaYV-83">
<img src="http://www.plantuml.com/plantuml/svg/ROyz2y8m48Rt_8eZUmVHMH2nkeX2knM7s4HRR7CnIS4Y_U_cez1IX0p7lPVdkLEiVB6d09fXA-2eiLCKlWJWbETNIA18QsqixB5LA8MqDnSLEucs4dhU7GYHo1td4f80Cf6KHb0cIfHyGLhI8Kcs_eFdbGrsF12AmuUrgX6m2YB2cMLtPfpjt6Vl9ceUs71dfdbL6t2lxSTMZBqiJgozUV0_D7CtqnHn6WcjJPpmgZ-tXXtdAytgc4sYgHoJaVy3">
<img src="http://www.plantuml.com/plantuml/svg/JOon2iCm34HtVuNGb0Jo2u4C7JgtcybWKZaMf7AnbKBxzRM9Xsx7UtVN3JsCumHu5LPsEt-TSXGqXZtWBJu9xfGLGGE9WTgrcWvQcfnNvJVh1qy7E4iirGJkNoJUWXRR3RsXFLDba_Mkn7QaWMM3wjgJlSYZebUAA-MydDl2_0y0">
<h1 id="在hexo博客加上plantuml插件"><a href="#在hexo博客加上plantuml插件" class="headerlink" title="在hexo博客加上plantuml插件"></a>在hexo博客加上plantuml插件</h1><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-tag-plantuml <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h2 id="add-to-config-yml"><a href="#add-to-config-yml" class="headerlink" title="add to _config.yml"></a>add to _config.yml</h2><p>And add this plugin in _config.yml.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugin<span class="variable">s:</span></span><br><span class="line"> - hexo-<span class="keyword">tag</span>-plantuml</span><br></pre></td></tr></table></figure></p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><h3 id="add-text-to-markdown-file"><a href="#add-text-to-markdown-file" class="headerlink" title="add text to markdown file"></a>add text to markdown file</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">% plantuml %&#125;</span></span><br><span class="line">    <span class="variable">Bob</span><span class="arrow">-&gt;</span><span class="variable">Alice</span> : <span class="function_or_atom">hello</span></span><br><span class="line">&#123;<span class="comment">% endplantuml %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><img src="http://www.plantuml.com/plantuml/svg/SyfFqhLppCbCJbMmKiX8pSd91m00">
<h1 id="公司内网搭建plantuml服务"><a href="#公司内网搭建plantuml服务" class="headerlink" title="公司内网搭建plantuml服务"></a>公司内网搭建plantuml服务</h1><p>虽然<a href="http://plantuml.com/" target="_blank" rel="external">http://plantuml.com/</a>提供了online server，但是由于信息安全问题，不能直接把代码贴到那生成图片，所以需要自己在内网建一个.</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>其实也没啥选的，由于linux机器都被回收，只有自己用的windows办公机，所以只能用windows了。<br>前端用bootstrap+angularjs，好吧，我承认我是前端小白，其实我就只会这哥俩<br>后端就用go的gin框架，原因就是之前用gin写了个玩具，基本可以复用</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>plantuml需要jdk</li>
<li>下载plantuml.jar，进入<a href="http://plantuml.com/download.html" target="_blank" rel="external">http://plantuml.com/download.html</a>，下载last version，<a href="http://sourceforge.net/projects/plantuml/files/plantuml.jar/download" target="_blank" rel="external">http://sourceforge.net/projects/plantuml/files/plantuml.jar/download</a></li>
<li>由于plantuml在生成图片时会用到graphviz，也需要一并下载并安装<a href="http://www.graphviz.org/Download_windows.php" target="_blank" rel="external">http://www.graphviz.org/Download_windows.php</a></li>
<li>plantuml会调用graphviz的dot.exe，所以需要增加环境变量<strong>GRAPHVIZ_DOT</strong>，值就是dot.exe的全路径</li>
<li><code>java -jar plantuml.jar -testdot</code>，如果返回OK，那么说明安装成功</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="启动plantuml"><a href="#启动plantuml" class="headerlink" title="启动plantuml"></a>启动plantuml</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">java</span> <span class="tag">-jar</span> <span class="tag">plantuml</span><span class="class">.jar</span></span><br></pre></td></tr></table></figure>
<p>会监控当前目录，如果有<code>.txt等文件</code>的变更，就会生成同名的png</p>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><img src="http://www.plantuml.com/plantuml/svg/JOz92i9044NtEKKkq1TmaRi8WWXHH19mgI0unmGqY37EeYWE6mUCmsMwkitAArX9QtHLHV7h_V-XskJh7L70D73ACHbQbbyePjLuHjFJAk-Lg3Vbew8a14JXZiMC1NUsSEkWdBU7h69IRwxhgGHODp2R-AFbDMQNgNTyNHlquSAc2w4FlOwOEu-WKDcppKmefNymKRu1qEAxicc17Uh1Zxs7oI0oU9PNK5kA860sC44savGY026A_6iNBX49XHWcYDTV1YJZ12rR70KUOP_cWXEsGCxpqGPd83o5Ni-fI63TEvzTaEoF3xuxeUVQ6m00">
<p>期间有个比较蛋疼的事，由于golang的string是UTF8，保存到文件也是UTF8，plantuml不识别，总提示语法错误。解决方法:</p>
<ul>
<li>参考<a href="http://mengqi.info/html/2015/201507071345-using-golang-to-convert-text-between-gbk-and-utf-8.html" target="_blank" rel="external">http://mengqi.info/html/2015/201507071345-using-golang-to-convert-text-between-gbk-and-utf-8.html</a></li>
<li>将string转换成gbk的bytes，然后写入到文件</li>
</ul>
<h2 id="炫耀"><a href="#炫耀" class="headerlink" title="炫耀"></a>炫耀</h2><p>花了3个小时搞定，就推荐给周围同事，得到一致好评，大家都可以抛弃visio等图形化工具了。<br>通过markdown实现了<strong>设计文档即代码</strong><br>那么通过plantuml实现了<strong>架构图即代码</strong><br>文本化，可以版本管理</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;架构图即代码&lt;br&gt;PlantUML is a open-source tool that allows to quickly write :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence diagram,&lt;/li&gt;
&lt;li&gt;Usecase diagram,&lt;/li&gt;
&lt;li&gt;Class diagram,&lt;/li&gt;
&lt;li&gt;Activity diagram, (here is the new syntax),&lt;/li&gt;
&lt;li&gt;Component diagram,&lt;/li&gt;
&lt;li&gt;State diagram,&lt;/li&gt;
&lt;li&gt;Deployment diagram,&lt;/li&gt;
&lt;li&gt;Object diagram.&lt;/li&gt;
&lt;li&gt;wireframe graphical interface&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="diagram" scheme="http://blog.decbug.com/tags/diagram/"/>
    
  </entry>
  
  <entry>
    <title>flannel与overlay</title>
    <link href="http://blog.decbug.com/2016/06/23/flannel/"/>
    <id>http://blog.decbug.com/2016/06/23/flannel/</id>
    <published>2016-06-22T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<p>正在搞docker与neutron融合，所以需要储备一些网络虚拟化知识，了解下原理</p>
<a id="more"></a>
<h1 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h1><p>我的理解</p>
<ul>
<li>复用已有物理网络，很容易搭建</li>
<li>有很好的开源组件，比如flannel</li>
<li>需要转发</li>
<li>需要对原报文进行封装和解释，因为会加上overlay的src ip和des ip</li>
<li>性能会损耗</li>
</ul>
<p>阿里云的大侠们曾做过试验<a href="http://dockone.io/article/1232" target="_blank" rel="external">原文链接</a></p>
<blockquote>
<p>Overlay网络的最大问题是性能很不理想。我们做了Overlay网络和非Overlay网络在各种数据包大小情况下的性能对比，tcp payload 20 bytes，Overlay性能大约 75%，tcp payload 1kbytes，Overlay性能80%，对于大块数据传输，Overlay性能大约88%，这个数字可以认为是 Overlay性能的极限了。当然，不同的场景下具体测试数字不一定完全一致，但Overlay的开销还是很大的。</p>
</blockquote>
<h1 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h1><p>coreos的又一力作，docker生态常用组网方式</p>
<p><img src="https://raw.githubusercontent.com/coreos/flannel/master/packet-01.png" alt=""></p>
<p>对于原理，我的理解</p>
<ul>
<li>flannel0网桥，连接docker0和flanneld</li>
<li>flanneld通过etcd感知到网络内所有docker IP的变化，知道如果投递到其他宿主机上的flanneld</li>
<li>docker daemon启动参数可以限制IP范围，避免冲突</li>
<li>从容器A到另外一台宿主机上的容器B，大概流程<ol>
<li>报文到容器A的veth0</li>
<li>再到docker0</li>
<li>转到容器A所在宿主机的flanneld，简称flanneldA</li>
<li>flanneldA，所谓的封装，src ip，des ip</li>
<li>投递到容器B所在宿主机的flanneld，简称flanneldB</li>
<li>flanneldB解释，获取到des ip，取出原始报文，投递到容器B</li>
</ol>
</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正在搞docker与neutron融合，所以需要储备一些网络虚拟化知识，了解下原理&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="network" scheme="http://blog.decbug.com/tags/network/"/>
    
      <category term="overlay" scheme="http://blog.decbug.com/tags/overlay/"/>
    
      <category term="virtualization" scheme="http://blog.decbug.com/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>玩openstack:1</title>
    <link href="http://blog.decbug.com/2016/06/21/openstack_playground_1/"/>
    <id>http://blog.decbug.com/2016/06/21/openstack_playground_1/</id>
    <published>2016-06-21T11:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>要基于公司已有的openstack结合docker搞一个好玩的东西，所以又开始撸openstack了，这就需要对虚拟化有个更深入的理解。<br>昨天搞整了一下KVM和vlan，<a href="http://blog.decbug.com/2016/06/20/kvm/">http://blog.decbug.com/2016/06/20/kvm/</a><br>今天就要在家搞一套openstack开发环境<br><a id="more"></a></p>
<h1 id="devstack"><a href="#devstack" class="headerlink" title="devstack"></a>devstack</h1><p>devstack是一个一键式搭建open stack环境的脚本，如官网所说<code>DevStack is a series of extensible scripts used to quickly bring up a complete OpenStack environment.</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/openstack-dev/devstack.git</span></span><br><span class="line"><span class="keyword">cd</span> devstack/</span><br><span class="line"></span><br><span class="line"># 切换到<span class="keyword">m</span>版本分支</span><br><span class="line">git co stable/mitaka</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> tools</span><br><span class="line"></span><br><span class="line"># 创建<span class="keyword">stack</span>用户</span><br><span class="line">sudo bash create-<span class="keyword">stack</span>-user.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">cd</span> ../../</span><br><span class="line">sudo mv devstack /opt/<span class="keyword">stack</span></span><br><span class="line">sudo chown -R <span class="keyword">stack</span>:<span class="keyword">stack</span> /opt/<span class="keyword">stack</span>/devstack</span><br><span class="line"></span><br><span class="line"># switch to <span class="keyword">stack</span></span><br><span class="line">sudo -<span class="literal">i</span></span><br><span class="line"><span class="keyword">su</span> <span class="keyword">stack</span></span><br></pre></td></tr></table></figure></p>
<p>参照<a href="http://docs.openstack.org/developer/devstack/guides/neutron.html#id3" target="_blank" rel="external">官网</a>在<code>/opt/stack/devstack</code>创建local.conf，内容是<br>记得改host_ip,service_host,PUBLIC_INTERFACE</p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[[local|localrc]]</span><br><span class="line">HOST_IP=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">SERVICE_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">MYSQL_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">RABBIT_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span>:<span class="number">9292</span></span><br><span class="line">PUBLIC_INTERFACE=p1p1</span><br><span class="line"></span><br><span class="line">ADMIN_PASSWORD=secret</span><br><span class="line">MYSQL_PASSWORD=secret</span><br><span class="line">RABBIT_PASSWORD=secret</span><br><span class="line">SERVICE_PASSWORD=secret</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## Neutron options</span></span><br><span class="line">Q_USE_SECGROUP=True</span><br><span class="line">ENABLE_PROJECT_VLANS=True</span><br><span class="line">PROJECT_VLAN_RANGE=<span class="number">3001</span>:<span class="number">4000</span></span><br><span class="line">PHYSICAL_NETWORK=<span class="keyword">default</span></span><br><span class="line">OVS_PHYSICAL_BRIDGE=br-ex</span><br><span class="line"></span><br><span class="line">Q_USE_PROVIDER_NETWORKING=True</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Do not use Nova-Network</span></span><br><span class="line">disable_service n-net</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Neutron</span></span><br><span class="line">ENABLED_SERVICES+=,q-svc,q-dhcp,q-meta,q-agt</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## Neutron Networking options used to create Neutron Subnets</span></span><br><span class="line"></span><br><span class="line">FIXED_RANGE=<span class="string">"203.0.113.0/24"</span></span><br><span class="line">NETWORK_GATEWAY=<span class="number">203.0</span><span class="number">.113</span><span class="number">.1</span></span><br><span class="line">PROVIDER_SUBNET_NAME=<span class="string">"provider_net"</span></span><br><span class="line">PROVIDER_NETWORK_TYPE=<span class="string">"vlan"</span></span><br><span class="line">SEGMENTATION_ID=<span class="number">2010</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># use TryStack git mirror</span></span><br><span class="line">GIT_BASE=http:<span class="comment">//git.trystack.cn</span></span><br><span class="line">NOVNC_REPO=http:<span class="comment">//git.trystack.cn/kanaka/noVNC.git</span></span><br><span class="line">SPICE_REPO=http:<span class="comment">//git.trystack.cn/git/spice/spice-html5.git</span></span><br></pre></td></tr></table></figure>
<h2 id="compute-node"><a href="#compute-node" class="headerlink" title="compute node"></a>compute node</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[[local|localrc]]</span><br><span class="line">HOST_IP=<span class="number">192.168</span><span class="number">.1</span><span class="number">.148</span></span><br><span class="line">SERVICE_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">MYSQL_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">RABBIT_HOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span></span><br><span class="line">GLANCE_HOSTPORT=<span class="number">192.168</span><span class="number">.1</span><span class="number">.245</span>:<span class="number">9292</span></span><br><span class="line">ADMIN_PASSWORD=secret</span><br><span class="line">MYSQL_PASSWORD=secret</span><br><span class="line">RABBIT_PASSWORD=secret</span><br><span class="line">SERVICE_PASSWORD=secret</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Services that a compute node runs</span></span><br><span class="line">ENABLED_SERVICES=n-cpu,rabbit,q-agt</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## Open vSwitch provider networking options</span></span><br><span class="line">PHYSICAL_NETWORK=<span class="keyword">default</span></span><br><span class="line">OVS_PHYSICAL_BRIDGE=br-ex</span><br><span class="line">PUBLIC_INTERFACE=p2p1</span><br><span class="line">Q_USE_PROVIDER_NETWORKING=True</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># use TryStack git mirror</span></span><br><span class="line">GIT_BASE=http:<span class="comment">//git.trystack.cn</span></span><br><span class="line">NOVNC_REPO=http:<span class="comment">//git.trystack.cn/kanaka/noVNC.git</span></span><br><span class="line">SPICE_REPO=http:<span class="comment">//git.trystack.cn/git/spice/spice-html5.git</span></span><br></pre></td></tr></table></figure>
<p>然后运行<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /<span class="keyword">stack</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>参考<a href="http://blog.csdn.net/u011521019/article/details/51114681" target="_blank" rel="external">http://blog.csdn.net/u011521019/article/details/51114681</a><br>改成我的实际IP<br>提示<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.255</span> | ovs-ofctl: br-<span class="keyword">int</span> is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.262</span> | ovs-ofctl: br-tun is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.269</span> | ovs-ofctl: br-ex is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.277</span> | ovs-ofctl: br-<span class="keyword">int</span> is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.284</span> | ovs-ofctl: br-tun is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.292</span> | ovs-ofctl: br-ex is not a bridge or a socket</span><br><span class="line"><span class="number">2016</span>-<span class="number">06</span>-<span class="number">21</span> <span class="number">14</span>:<span class="number">07</span>:<span class="number">28.446</span> | +^[[<span class="number">3242</span>mstack.sh:exit_trap:<span class="number">498</span>                   ^[(B^[[m <span class="built_in">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>说要unstack.sh，然后reboot，再stack.sh，然而还是一样的错</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># minimal config</span></span><br><span class="line"><span class="preprocessor"># devstack generate-subunit fail</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install python-pip</span><br><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;要基于公司已有的openstack结合docker搞一个好玩的东西，所以又开始撸openstack了，这就需要对虚拟化有个更深入的理解。&lt;br&gt;昨天搞整了一下KVM和vlan，&lt;a href=&quot;http://blog.decbug.com/2016/06/20/kvm/&quot;&gt;http://blog.decbug.com/2016/06/20/kvm/&lt;/a&gt;&lt;br&gt;今天就要在家搞一套openstack开发环境&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="devstack" scheme="http://blog.decbug.com/tags/devstack/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>在内网写的文章</title>
    <link href="http://blog.decbug.com/2016/06/21/blog_huawei/"/>
    <id>http://blog.decbug.com/2016/06/21/blog_huawei/</id>
    <published>2016-06-20T18:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在内网也写了不少文章，但是由于安全问题，不能搬运出来，只能把标题都记录下来，以免遗忘<br><a id="more"></a></p>
<h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/7.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/6.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/5.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/4.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/3.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/2.jpeg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/huawei_blog/1.jpeg" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;在内网也写了不少文章，但是由于安全问题，不能搬运出来，只能把标题都记录下来，以免遗忘&lt;br&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="blog" scheme="http://blog.decbug.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>2016上半年随笔</title>
    <link href="http://blog.decbug.com/2016/06/21/essay20160620/"/>
    <id>http://blog.decbug.com/2016/06/21/essay20160620/</id>
    <published>2016-06-20T17:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<p>时间已经来到2016的6月底，是时候回顾这上半年的收获与教训<br><a id="more"></a></p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><ul>
<li>对docker的应用越发纯熟，用registry+swarm+用golang写的一些服务，搞了个持续交付容器云，从代码-&gt;持续集成-&gt;镜像-&gt;仓库-&gt;运行服务</li>
<li>上半年在的部门是研发质量部，主要是基于一些砖家们的YY做了一些没人用的产品。我不断地反对他们的想法，因为我觉得他的方案完全是不可行的，他们都很久不写代码，而且离业务很远，根本不知道业务的情况。反对的次数多了，我们互相之间就两看两相厌。事实证明，我的意见是正确的，他们花了4个月做出来的东西，在演示阶段就被否决了。</li>
<li>这次教训挺深刻的，让我从一个纯粹的技术人员，进化成有产品意识的程序员。技术是解决业务的问题，做出来的东西要有价值，那么什么是价值呢，好吧，其实就是能赚钱。公司是商业组织，目的就是为了盈利。唉。</li>
<li>以前是在百人团队里当技术砖家，就是技术选型，写demo，写核心代码，还有教小朋友写代码，帮他们解决疑难杂症，只需要管技术方面的问题，其他事都不用操心，压力不怎么大。16年上半年算是自己独立带团队了，虽然人不多，但是压力不小，要定技术方案，写代码，画流程图，测试，关注小弟们的进展，把控进度，还要思考产品的价值。</li>
</ul>
<p>技术上进步不大，但是技术之外的能力进步很大，总体来说，收获还是挺大的。</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><ul>
<li>看书<ol>
<li>分布式的书</li>
<li>看了TCP/IP，HTTP协议</li>
<li>容器相关的书</li>
<li>JVM的书</li>
</ol>
</li>
<li>前端，学了angularjs，bootstrap，写了几个小项目练手</li>
<li>英语，整理了计算机英语1500词</li>
</ul>
<h1 id="更好的工作机会"><a href="#更好的工作机会" class="headerlink" title="更好的工作机会"></a>更好的工作机会</h1><ul>
<li>面了京东云，offer T4</li>
<li>面了阿里云，offer P7</li>
</ul>
<p>一直在传统行业厮混，没有互联网经验。凭借我自己在家折腾的一些玩具，得到一线互联网公司的认可，也算是证明了我的实力<br>然而在我提了离职之后，父亲得了重病住院。此病几乎就是不治之症，只能缓解并发症，延长存活时间。母亲一人照顾不过来，我不能那么自私，抛下家里去北京。<br>本打算7月去北京工作，但由于父亲生病，暂时去不了，不得不放弃这个机会。希望以后有机会再去互联网公司干一番事业<br>悲剧的是，我提离职了却去不了北京，几乎就要失业。<br>好在我司这边还有部门愿意接收我，不然我就要失业一段时间。其实挺感激的，对我来说算是雪中送炭吧。在接下来的工作中，我要好好努力<br>另外，还要感谢我自己，一直都在学习进步，保持了足够的竞争力。只要有实力，就不用担心工作的事，一大堆职位等着我挑选</p>
<h1 id="买房"><a href="#买房" class="headerlink" title="买房"></a>买房</h1><p>还是在西安买房了。<br>本打算买了房就去北京的，然后几年之后再回西安。然而计划总是赶不上变化，早知如此，就不买了。<br>好在买的房还可以，也算是有所收获吧</p>
<ul>
<li>位置比较偏，但小区门口就是地铁，也还算方便。</li>
<li>小区里的小学已拿到政府批文，正在建造。旁边有初中和一般高中，还有某一流高中的分校，教育资源貌似还可以。</li>
<li>附近正在建一家三甲医院</li>
<li>小区旁边有个万象城，商业也还可以</li>
</ul>
<p>2011年来到西安工作，至今已经4年半，在家里负担比较重的情况下，能在5年之内搞定二套房，也还算可以。</p>
<p>希望这次的选择是正确的</p>
<h1 id="买车"><a href="#买车" class="headerlink" title="买车"></a>买车</h1><p>下半年把驾照搞定，到明年过年的时候整辆小车车开</p>
<h1 id="下半年计划"><a href="#下半年计划" class="headerlink" title="下半年计划"></a>下半年计划</h1><ul>
<li>英语必然不能落下，要继续听说读</li>
<li>底层原理还是不够熟悉，打算把那几本神书再翻一遍</li>
<li>接下来的工作是基于华为云做Docker相关的产品。OpenStack和Docker都是分布式系统的经典之作，我要在这个过程中，把分布式架构/网络/存储搞懂</li>
<li>想有一个代表作，一个由我设计，架构，开发的产品</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间已经来到2016的6月底，是时候回顾这上半年的收获与教训&lt;br&gt;
    
    </summary>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
    
      <category term="essay" scheme="http://blog.decbug.com/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>学习KVM与网络虚拟化</title>
    <link href="http://blog.decbug.com/2016/06/20/kvm/"/>
    <id>http://blog.decbug.com/2016/06/20/kvm/</id>
    <published>2016-06-19T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>要基于公司已有的openstack结合docker搞一个好玩的东西，所以又开始撸openstack了，这就需要对虚拟化有个更深入的理解。<br>那么从KVM开始，是一个不错的选择。</p>
<a id="more"></a>
<h1 id="KVM基础概念"><a href="#KVM基础概念" class="headerlink" title="KVM基础概念"></a>KVM基础概念</h1><ul>
<li>虚拟化的三种类型，1型，2型，进程虚拟化</li>
<li>KVM是2型，是运行在操作系统之上的</li>
<li>docker就是进程虚拟化，直接用host的内核</li>
</ul>
<h1 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h1><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-kvm qemu-system libvirt-bin virt-manager bridge-utils vlan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否支持虚拟化，要返回vmx</span></span><br><span class="line">egrep -o '(vmx|svm)' /<span class="keyword">proc</span>/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">sudo service libvirt-bin status</span><br></pre></td></tr></table></figure>
<h1 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h1><p>下载镜像<a href="http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img" target="_blank" rel="external">cirros-0.3.4-x86_64-disk.img</a>，拷贝到<code>cp cirros-0.3.4-x86_64-disk.img /var/lib/libvirt/images/</code></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> virt-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形界面，创建虚拟机</span></span><br></pre></td></tr></table></figure>
<h1 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h1><h2 id="nat和br"><a href="#nat和br" class="headerlink" title="nat和br"></a>nat和br</h2><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/network_virtualization/nat_br.jpg" alt=""></p>
<h2 id="vlan"><a href="#vlan" class="headerlink" title="vlan"></a>vlan</h2><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/network_virtualization/vlan.jpg" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;要基于公司已有的openstack结合docker搞一个好玩的东西，所以又开始撸openstack了，这就需要对虚拟化有个更深入的理解。&lt;br&gt;那么从KVM开始，是一个不错的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="kvm" scheme="http://blog.decbug.com/tags/kvm/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>hexo通过travis CI自动发布</title>
    <link href="http://blog.decbug.com/2016/05/31/hexo_travis/"/>
    <id>http://blog.decbug.com/2016/05/31/hexo_travis/</id>
    <published>2016-05-30T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>github pages支持jekyll自动发布，只要修改了post的md，就会自动生成gh-pages。但不支持hexo，所以需要通过第三方的系统来执行hexo generate并把生成的静态页面push到gh-pages。<br>之前用过Travis ci，感觉不错，打算继续用它。</p>
<a id="more"></a>
<ol>
<li>通过github帐号登录travis ci，把博客的repo加入到左边的My Repositories</li>
<li>在博客repo编写.travis.yml，用于编排</li>
<li>在github-setting-personal token-生成一个只能访问public repo的token</li>
<li>在travis ci的Repositories添加环境变量DEPLOY_REPO， <a href="https://{token}@github.com/{你的用户名}/{你的repo名}.git" target="_blank" rel="external">https://{token}@github.com/{你的用户名}/{你的repo名}.git</a></li>
<li><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth <span class="number">1</span> --branch gh-pages --single-branch <span class="variable">$DEPLOY</span>_REPO . || (git init &amp;&amp; git remote add -t gh-pages origin <span class="variable">$DEPLOY</span>_REPO)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>PS: travis ci的日志放在aws s3上，所以要先番茄才能看到日志哦</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.jianshu.com/p/e22c13d85659" target="_blank" rel="external">http://www.jianshu.com/p/e22c13d85659</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;github pages支持jekyll自动发布，只要修改了post的md，就会自动生成gh-pages。但不支持hexo，所以需要通过第三方的系统来执行hexo generate并把生成的静态页面push到gh-pages。&lt;br&gt;之前用过Travis ci，感觉不错，打算继续用它。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="blog" scheme="http://blog.decbug.com/tags/blog/"/>
    
      <category term="travis" scheme="http://blog.decbug.com/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>一切脱离业务的设计都是YY</title>
    <link href="http://blog.decbug.com/2016/05/29/biz_and_req/"/>
    <id>http://blog.decbug.com/2016/05/29/biz_and_req/</id>
    <published>2016-05-28T16:00:00.000Z</published>
    <updated>2016-08-15T14:12:19.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现在是在工具团队，做的产品都是给业务来用的，业务就是我们的客户。那么业务又是什么呢？业务就是给公司赚钱的产品。<br>然而有时候，我们的专家们却总是脱离业务来YY方案，然后做出一些令人难以理解的产品。</p>
<a id="more"></a>
<h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1><p>又到了一年一度组里领导和专家们YY方案的时候。在他们做4月份里程碑的时候，我就提出，这个方案不靠谱，甚至采用了不参与架构设计不参与开发来威胁，然而还是没有挡住。<br>因为这个方案，都是基于他们的YY，完全脱离了业务。<br>果然，等到验收的时候，业务完全不认可，只能推倒重来。</p>
<h1 id="互联网公司的工具团队"><a href="#互联网公司的工具团队" class="headerlink" title="互联网公司的工具团队"></a>互联网公司的工具团队</h1><p>曾看过知乎，豆瓣，滴滴，京东的工具，他们都是属于平台部门，里边都是高手。给全公司提供监控，部署，性能优化，日志分析，以及各种牛逼中间件。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;现在是在工具团队，做的产品都是给业务来用的，业务就是我们的客户。那么业务又是什么呢？业务就是给公司赚钱的产品。&lt;br&gt;然而有时候，我们的专家们却总是脱离业务来YY方案，然后做出一些令人难以理解的产品。&lt;/p&gt;
    
    </summary>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
    
      <category term="business" scheme="http://blog.decbug.com/tags/business/"/>
    
      <category term="requirement" scheme="http://blog.decbug.com/tags/requirement/"/>
    
  </entry>
  
</feed>
