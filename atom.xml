<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2016-02-17T23:59:16.558Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[用go写的镜像构建微服务]]></title>
    <link href="http://blog.decbug.com/2016/02/17/go_image_build/"/>
    <id>http://blog.decbug.com/2016/02/17/go_image_build/</id>
    <published>2016-02-16T16:00:00.000Z</published>
    <updated>2016-02-17T23:59:16.558Z</updated>
    <content type="html"><![CDATA[<h1 id="功能">功能</h1><p>类似Daoloud的代码构建功能</p>
<ol>
<li>用户点击构建按钮（或是其他触发方式）</li>
<li>我的镜像构建微服务收到请求后，就从内网github Clone代码</li>
<li>在刚Clone代码里找到Dockerfile</li>
<li>执行docker build -t <code>私有registry域名/用户名/镜像名：tag</code> .</li>
<li>docker push 刚build出来的镜像</li>
<li>构建日志，构建结果，入库</li>
<li>返回 <code>私有registry域名/用户名/镜像名：tag</code></li>
</ol>
<p>用户就可以 pull <code>私有registry域名/用户名/镜像名：tag</code> 啦<br><a id="more"></a></p>
<h1 id="记录">记录</h1><p>终于用go写完了一个类似DaoCloud自动构建镜像的微服务，一边google一边写，全程都是用Docker来开发的，收获还是挺大的，简单记录下。</p>
<ol>
<li>基于golang1.5.3基础镜像，然后在代码里增加一个Godeps，把用到的库都放在Godeps，然后在Dockefile里r把Goeps加入到GOPATH环境变量</li>
<li>参考了docker/distribution的Dockerfile，<a href="https://github.com/CodeJuan/distribution/blob/master/Dockerfile" target="_blank" rel="external">https://github.com/CodeJuan/distribution/blob/master/Dockerfile</a></li>
<li>由于只提供restful，就用的gorilla/mux框架</li>
<li>数据库MySQL，orm用的是gorm</li>
<li>用到了sync,crypt等库</li>
<li>开发测试部署都是用的Docker，数据库也是Docker。大概流程是<ul>
<li>修改代码，build我的微服务镜像，push到我的私有registry</li>
<li>docker-compose从私有registry获取刚build的镜像，由于link了MySQL，就会先启动MySQL。</li>
<li>接下来自动跑测试，我用的是python给我的微服务发post get等等。</li>
</ul>
</li>
<li>后续计划<ul>
<li>自动测试的脚本要加上从数据库里获取结果，与我的期望值进行比对。目前还是人肉比对，有些慢</li>
<li>jenkins自动触发，有代码上了库就自动拉下来完成打镜像，推镜像，拉镜像，compse up，测试的一系列操作</li>
</ul>
</li>
</ol>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="功能">功能</h1><p>类似Daoloud的代码构建功能</p>
<ol>
<li>用户点击构建按钮（或是其他触发方式）</li>
<li>我的镜像构建微服务收到请求后，就从内网github Clone代码</li>
<li>在刚Clone代码里找到Dockerfile</li>
<li>执行docker build -t <code>私有registry域名/用户名/镜像名：tag</code> .</li>
<li>docker push 刚build出来的镜像</li>
<li>构建日志，构建结果，入库</li>
<li>返回 <code>私有registry域名/用户名/镜像名：tag</code></li>
</ol>
<p>用户就可以 pull <code>私有registry域名/用户名/镜像名：tag</code> 啦<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="microservice" scheme="http://blog.decbug.com/tags/microservice/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式消息系统架构图]]></title>
    <link href="http://blog.decbug.com/2016/02/01/msg_arch/"/>
    <id>http://blog.decbug.com/2016/02/01/msg_arch/</id>
    <published>2016-01-31T17:00:00.000Z</published>
    <updated>2016-02-02T00:22:21.314Z</updated>
    <content type="html"><![CDATA[<h1 id="哈哈哈">哈哈哈</h1><p>手画的架构图</p>
<a id="more"></a>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/architecture.jpg" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="哈哈哈">哈哈哈</h1><p>手画的架构图</p>]]>
    
    </summary>
    
      <category term="architecture" scheme="http://blog.decbug.com/tags/architecture/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016学习计划]]></title>
    <link href="http://blog.decbug.com/2016/01/31/planning2016/"/>
    <id>http://blog.decbug.com/2016/01/31/planning2016/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-02-14T11:56:11.959Z</updated>
    <content type="html"><![CDATA[<p>总觉得今天才是2015的最后一天，那么就计划一下2016吧<br><a id="more"></a></p>
<h1 id="英语">英语</h1><ol>
<li>每天10个单词，要求能造句</li>
<li>每天一篇技术文章，要求能复述</li>
<li>继续每天一篇听力</li>
<li>要多开口说了，2015说的太少</li>
<li>已经可以在github上和<code>第一语言是英语的同僚</code>对话了，接下来要尝试用英文写博客</li>
</ol>
<h1 id="代码">代码</h1><ol>
<li>虽然我很讨厌架构师这个头衔，因为太多嘴炮架构师，啥都不会光会吹。但是有时候为了展示自己的实力，不得不给自己也挂上</li>
</ol>
<p>…..</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总觉得今天才是2015的最后一天，那么就计划一下2016吧<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="planning" scheme="http://blog.decbug.com/categories/planning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(5)-kubernetes]]></title>
    <link href="http://blog.decbug.com/2016/01/18/docker_kubernetes/"/>
    <id>http://blog.decbug.com/2016/01/18/docker_kubernetes/</id>
    <published>2016-01-17T16:00:00.000Z</published>
    <updated>2016-01-18T16:02:39.063Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>需要做一个容器云，有同事在撸mesos+marathon+chronos，我就顺便折腾下kubernetes。<br><a id="more"></a></p>
<h1 id="kubernetes简介">kubernetes简介</h1><blockquote>
<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能</p>
<p>Kubernetes 是来自 Google 云平台的开源容器集群管理系统。基于 Docker 构建一个容器的调度服务。该系统可以自动在一个容器集群中选择一个工作容器供使用。</p>
</blockquote>
<p>感觉像是Docker版PaaS版的OpenStack。OpenStack对外提供VM，Kubernetes则对外提供基于docker的服务。</p>
<h1 id="通过ansible装docker">通过ansible装docker</h1><p>机器多了，再手工装docker-engine就太麻烦了，所以写个playbook，给家里的机器统一安装。<br>代码放在<a href="https://github.com/CodeJuan/kubernetes_practice" target="_blank" rel="external">https://github.com/CodeJuan/kubernetes_practice</a></p>
<h2 id="hosts">hosts</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">i3	<span class="variable">ansible_user=</span>i3	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.245</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[million]</span><br><span class="line">g530	<span class="variable">ansible_user=</span>g530	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.173</span></span><br><span class="line">g540	<span class="variable">ansible_user=</span>g540	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.148</span></span><br><span class="line">g640	<span class="variable">ansible_user=</span>g640	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.241</span></span><br></pre></td></tr></table></figure>
<p>如果没有添加SSH key，那么可以设置ansible_ssh_pass=xxxxxx</p>
<p>这里说一个奇葩的事情，重装了系统之后，手动把maset的pubkey添加到agent的可信ssh里，然而在play的时候总提示<code>没有权限</code>，尝试了各种方法依旧无解。<br>最后死马当活马医，<code>pip uninstall ansible</code>再<code>pip install</code>，竟然就好了，实在是很无语。</p>
<h2 id="playbooks">playbooks</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">--</span><br><span class="line"></span>-<span class="ruby"> <span class="symbol">hosts:</span> all <span class="comment">#表示hosts里的所有agent都要装</span></span><br><span class="line"></span>  tasks:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> ping <span class="comment"># 先测试是否能ping通</span></span><br><span class="line"></span>    ping:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> add_docker_key <span class="comment"># 加入key</span></span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> update_apt_source <span class="comment"># 增加源</span></span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    lineinfile:</span><br><span class="line">      dest=/etc/apt/sources.list.d/docker.list</span><br><span class="line">      create=yes</span><br><span class="line">      line="deb https://apt.dockerproject.org/repo ubuntu-trusty main"</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> install docker</span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    apt: name=docker-engine update_cache=yes</span><br></pre></td></tr></table></figure>
<h2 id="执行">执行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i hosts playbook.yml -K</span><br></pre></td></tr></table></figure>
<p>其中-K表示，交互式的输入sudo密码<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/docker/ansible_install_docker.png" alt=""></p>
<p>稍等片刻，每个agent的docker-engine就都安装好了。接下来就是安装kubernetes</p>
<h1 id="安装kubernetes">安装kubernetes</h1><p><a href="http://kubernetes.io/v1.1/docs/getting-started-guides/locally.html#linux" target="_blank" rel="external">http://kubernetes.io/v1.1/docs/getting-started-guides/locally.html#linux</a><br>参照谷歌的文档安装一下。</p>
<h2 id="安装go">安装go</h2><p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a><br>参考之前写的安装一下，要不要翻译成Ansible呢。。。。。。</p>
<h2 id="etcd">etcd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L  https://github.com/coreos/etcd/releases/download/v2.<span class="number">2.4</span>/etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz -o etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz</span><br><span class="line">tar xzvf etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> etcd-v2.<span class="number">2.4</span>-linux-amd64</span><br><span class="line">./etcd</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>需要做一个容器云，有同事在撸mesos+marathon+chronos，我就顺便折腾下kubernetes。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(4)-nexus3]]></title>
    <link href="http://blog.decbug.com/2016/01/13/docker_distribution_nexus/"/>
    <id>http://blog.decbug.com/2016/01/13/docker_distribution_nexus/</id>
    <published>2016-01-12T16:00:00.000Z</published>
    <updated>2016-01-13T15:06:33.506Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br><a id="more"></a></p>
<h1 id="下载安装nexu3_repo_manager_oss">下载安装nexu3 repo manager oss</h1><p>下载链接<a href="https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-" target="_blank" rel="external">https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-</a><br>我选择了<a href="http://download.sonatype.com/nexus/oss/nexus-installer-3.0.0-m6-unix-archive.tar.gz" target="_blank" rel="external">Unix bundle</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.sonatype.com/nexus/oss/nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line">tar -zxf nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./nexus run</span><br></pre></td></tr></table></figure></p>
<p>时间会比较久，直到出现<strong>Started Nexus Repository Manager 3.0.0-xxxxxxx</strong><br>然后访问<a href="http://192.168.1.173:8081/" target="_blank" rel="external">http://192.168.1.173:8081/</a>，其中的IP换成安装nexus3机器的IP</p>
<h1 id="配置https">配置https</h1><p>registry V2需要https，参考这里进行配置<a href="https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound" target="_blank" rel="external">https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound</a></p>
<p>还有这位印度GG的视频<a href="http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/" target="_blank" rel="external">http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/</a></p>
<p>按照<a href="http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html" target="_blank" rel="external">http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html</a>生成不了jdx，奇怪</p>
<p>个人感觉还是nexus比原生的registry好用，希望能搞定</p>
<p>累成狗了，明天继续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-搭建registry,nginx,mirror]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution_build/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution_build/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-01-27T12:43:33.826Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br><a id="more"></a></p>
<h1 id="架构">架构</h1><p><img src="http://dockerone.com/uploads/article/20150512/1e111941614512fcc0bdeb2e80ee9384.png" alt=""></p>
<p>就采用<a href="http://dockone.io/people/%E9%9A%BE%E6%98%93" target="_blank" rel="external">钟成</a>提到的架构</p>
<h1 id="进展1">进展1</h1><p>搭建了registry+front，配置了https<br>折腾一天，累成狗了，不详细写拉。直接看代码吧，都写成脚本和compose了<br><a href="https://github.com/CodeJuan/private_registry" target="_blank" rel="external">https://github.com/CodeJuan/private_registry</a></p>
<h1 id="进展2:registry集群">进展2:registry集群</h1><p>实现了负载均衡<br>用的是nginx1.9的镜像<br><a href="https://github.com/CodeJuan/private_registry/commit/7233fbf7def7b32daccc065f6ef546b234606e0d" target="_blank" rel="external">https://github.com/CodeJuan/private_registry/commit/7233fbf7def7b32daccc065f6ef546b234606e0d</a></p>
<h1 id="进展3:后端存储">进展3:后端存储</h1><p>后端存储采用的是某共享存储技术，所有的registry都访问同一个存储集群，路径都一样</p>
<h1 id="进展4：mirror">进展4：mirror</h1><blockquote>
<p>If you have multiple instances of Docker running in your environment (e.g., multiple physical or virtual machines, all running the Docker daemon), each time one of them requires an image that it doesn’t have it will go out to the internet and fetch it from the public Docker registry. By running a local registry mirror, you can keep most of the redundant image fetch traffic on your local network.</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mirror</span>:</span><br><span class="line">  <span class="attribute">restart</span>: always</span><br><span class="line">  <span class="attribute">image</span>: <span class="attribute">registry</span>:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">  <span class="attribute">volumes</span>:</span><br><span class="line">    - ./<span class="attribute">mirror</span>:/var/lib/registry</span><br><span class="line">  <span class="attribute">environment</span>:</span><br><span class="line">    <span class="attribute">STANDALONE</span>: <span class="string">'false'</span></span><br><span class="line">    <span class="attribute">MIRROR_SOURCE</span>: <span class="attribute">https</span>:<span class="comment">//registry-1.docker.io</span></span><br><span class="line">    <span class="attribute">MIRROR_SOURCE_INDEX</span>: <span class="attribute">https</span>:<span class="comment">//index.docker.io registry</span></span><br><span class="line">  <span class="attribute">ports</span>:</span><br><span class="line">   - <span class="number">5555</span>:<span class="number">5000</span></span><br></pre></td></tr></table></figure>
<h2 id="第一次pull">第一次pull</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">docker</span> <span class="tag">pull</span> <span class="tag">django</span></span><br><span class="line">0<span class="class">.19user</span> 0<span class="class">.06system</span> 9<span class="pseudo">:16</span><span class="class">.60elapsed</span> 0%<span class="tag">CPU</span> (0<span class="tag">avgtext</span>+0<span class="tag">avgdata</span> 26432<span class="tag">maxresident</span>)<span class="tag">k</span></span><br></pre></td></tr></table></figure>
<p>mirror log<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">884</span>f518d-f69c-<span class="number">4</span>d7d-<span class="number">8189</span>-<span class="number">0</span>afb70d1f351 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54369"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"//v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="string">"142.245µs"</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">301</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">0</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET //v2/ HTTP/1.1"</span> <span class="number">301</span> <span class="number">0</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=d38c459d-b0e8-<span class="number">4</span>e40-<span class="number">9991</span>-<span class="number">537999</span>b206ca http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.referer</span>=<span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54370"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.311715ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">200</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">2</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET /v2/ HTTP/1.1"</span> <span class="number">200</span> <span class="number">2</span> <span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=error msg=<span class="string">"response completed with error"</span> err.code=<span class="string">"MANIFEST_UNKNOWN"</span> err.detail=<span class="string">"unknown manifest name=library/django tag=latest"</span> err.message=<span class="string">"manifest unknown"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">6</span>c236f9c-<span class="number">53</span>e9-<span class="number">4</span>f4a-b61a-bf90e61c4c95 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54371"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/library/django/manifests/latest"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.919044ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">404</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">120</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 vars.name=<span class="string">"library/django"</span> vars.reference=latest version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET /v2/library/django/manifests/latest HTTP/1.1"</span> <span class="number">404</span> <span class="number">120</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="rmi_django再次pull">rmi django再次pull</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">docker</span> <span class="tag">pull</span> <span class="tag">django</span></span><br><span class="line">0<span class="class">.21user</span> 0<span class="class">.05system</span> 13<span class="pseudo">:35</span><span class="class">.23elapsed</span> 0%<span class="tag">CPU</span> (0<span class="tag">avgtext</span>+0<span class="tag">avgdata</span> 27152<span class="tag">maxresident</span>)<span class="tag">k</span></span><br></pre></td></tr></table></figure>
<p>时间还变长了</p>
<p>mirror log<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">5317</span>fae0-<span class="number">9</span>ead-<span class="number">4</span>bc4-a016-<span class="number">3</span>df313f7873a http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54431"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"//v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="string">"126.687µs"</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">301</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">0</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET //v2/ HTTP/1.1"</span> <span class="number">301</span> <span class="number">0</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">86</span>ed3aa8-a2ec-<span class="number">4</span>b88-<span class="number">8</span>a28-adcd4780ef78 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.referer</span>=<span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54432"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.279031ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">200</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">2</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET /v2/ HTTP/1.1"</span> <span class="number">200</span> <span class="number">2</span> <span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=error msg=<span class="string">"response completed with error"</span> err.code=<span class="string">"MANIFEST_UNKNOWN"</span> err.detail=<span class="string">"unknown manifest name=library/django tag=latest"</span> err.message=<span class="string">"manifest unknown"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">2097</span>bff1-<span class="number">98</span>f8-<span class="number">443</span>b-<span class="number">9</span>e6d-<span class="number">9</span>c4b93d0c87f http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54433"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/library/django/manifests/latest"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.300812ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">404</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">120</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 vars.name=<span class="string">"library/django"</span> vars.reference=latest version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET /v2/library/django/manifests/latest HTTP/1.1"</span> <span class="number">404</span> <span class="number">120</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br></pre></td></tr></table></figure></p>
<p>奇怪</p>
<h1 id="进展5：调通删除镜像API">进展5：调通删除镜像API</h1><p>I sent the same request with @adolphlwq ‘s request, and got the same response<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">curl</span> -v -X DELETE http://myregistry/<span class="literal">v2</span>/<span class="keyword">busybox/manifests/sha256:blablabla...</span><br><span class="line"></span></span><br><span class="line">&#123;<span class="string">"errors"</span>:[&#123;<span class="string">"code"</span>:<span class="string">"UNSUPPORTED"</span>,<span class="string">"message"</span>:<span class="string">"The operation is unsupported."</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="update">update</h2><p>I got the solution to delete images</p>
<h3 id="enable_delete">enable delete</h3><p> set the environment variable <code>REGISTRY_STORAGE_DELETE_ENABLED = True</code></p>
<h3 id="the_API_to_delete_image">the API to delete image</h3><ol>
<li>get the manifest from registry<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/manifests/<span class="tag">&lt;<span class="title">tagName</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>the <code>Docker-Content-Digest</code> is response.Header[“Docker-Content-Digest”]<br>the <code>layerDigests</code> is response.body[“fsLayers”][“blobSum”]</p>
<ol>
<li><p>delete layerDigests</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/blobs/<span class="tag">&lt;<span class="title">layerDigests</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>delete Docker-Content-Digest</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/manifests/<span class="tag">&lt;<span class="title">Docker-Content-Digest</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>then pull the image from registry, the response is <code>invalid character &#39;&lt;&#39; looking for beginning of value</code></p>
</li>
</ol>
<p>But when I get ‘v2/repoName/tags/list’, the tag which was been deleted is still exist…….</p>
<h1 id="参考">参考</h1><p><a href="http://www.mworks92.com/2016/01/13/secure-registry-test/" target="_blank" rel="external">关于私有安全docker registry的实验</a><br><a href="http://blog.gesha.net/archives/613/" target="_blank" rel="external">搭建Docker私有仓库Registry-v2</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-distribution分析]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-01-13T07:12:13.286Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry" target="_blank" rel="external">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution" target="_blank" rel="external">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br><a id="more"></a></p>
<h1 id="通过docker运行">通过docker运行</h1><p>先尝试一个简单的用法，即直接pull一个registry好了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从DaoCloud pull一个registry镜像</span></span><br><span class="line">docker pull daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker run -p <span class="number">5000</span>:<span class="number">5000</span> --name registry daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker pull golang:<span class="number">1.5</span>.<span class="number">2</span></span><br><span class="line">docker tag golang:<span class="number">1.5</span>.<span class="number">2</span> localhost:<span class="number">5000</span>/golang</span><br><span class="line">docker push localhost:<span class="number">5000</span>/golang</span><br></pre></td></tr></table></figure></p>
<p>通过查看源码中的Dockerfile，有一句<code>VOLUME [&quot;/var/lib/registry&quot;]</code>，那么这个路径就是docker里存放push上来的镜像的路径<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 获取registry的ID</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 进入docker中调试,31f029b39e3c就是上一条命令获取到的ID</span></span><br><span class="line">docker exec -it <span class="number">31</span>f029b39e3c bash</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 这个路径下就有一个golang的文件夹</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/registry/docker/registry/v2/repositories</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 退出docker</span></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在宿主机中查看路径</span></span><br><span class="line">docker inspect <span class="number">31</span>f029b39e3c</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 查看Mounts字段</span></span><br><span class="line"><span class="preprocessor"># /var/lib/docker/volumes/3bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/docker/volumes/<span class="number">3</span>bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 果然也有docker/registry/v2/repositories/golang</span></span><br></pre></td></tr></table></figure></p>
<h1 id="源码运行">源码运行</h1><h2 id="下载并安装源码">下载并安装源码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:docker/distribution.git</span><br><span class="line"><span class="built_in">cd</span> distribution</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过查看distribution的Dockerfile，发现需要把$PWD/Godeps/_workspace添加到GOPATH</span></span><br><span class="line"><span class="comment"># 不然就会编译不过，会报缺少一堆库。当然，如果不嫌麻烦的话，也可以把缺失的库都go get下来</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$GOPATH</span>:<span class="variable">$PWD</span>/Godeps/_workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile添加了DOCKER_BUILDTAGS，在make时会用到</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_BUILDTAGS=<span class="string">"include_rados include_oss include_gcs"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装</span></span><br><span class="line">sudo yum install librados2-devel</span><br><span class="line">sudo yum install httpd-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">make clean binaries</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">bin/registry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动，也是查看Dockerfile</span></span><br><span class="line"><span class="comment"># ENTRYPOINT ["registry"] CMD ["/etc/docker/registry/config.yml"]</span></span><br><span class="line"><span class="comment"># 而这个config.yml又是从cmd/registry/config-dev.yml拷贝过去的</span></span><br><span class="line"><span class="comment"># 所以，我们这里直接用cmd/registry/config-dev.yml</span></span><br><span class="line">bin/registry cmd/registry/config-dev.yml</span><br></pre></td></tr></table></figure>
<p>这样就运行起来了，但是仅仅是运行还不够，还得深入了解一下原理</p>
<h1 id="源码分析">源码分析</h1><h2 id="makefile">makefile</h2><p>在上一节中，输入了<code>make clean binaries</code>构建出binaries，那么这个binaries就会build<br><code>${PREFIX}/bin/registry ${PREFIX}/bin/digest ${PREFIX}/bin/registry-api-descriptor-template</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PREFIX&#125;/bin/registry: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/registry</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/digest: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/digest</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/registry-api-descriptor-template: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -o $@ $&#123;GO_LDFLAGS&#125; $&#123;GO_GCFLAGS&#125; ./cmd/registry-api-descriptor-template</span><br></pre></td></tr></table></figure></p>
<p>结合前面的启动命令<code>bin/registry cmd/registry/config-dev.yml</code>，就找到了registry的程序入口，就是<code>cmd/registry/main.go</code></p>
<h2 id="流程">流程</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd<span class="regexp">/registry/</span>main.go<span class="regexp">/main -&gt; registry/</span>registry.go/<span class="string">Cmd:</span>Excute</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(2)-compose]]></title>
    <link href="http://blog.decbug.com/2016/01/11/docker_compose/"/>
    <id>http://blog.decbug.com/2016/01/11/docker_compose/</id>
    <published>2016-01-10T16:00:00.000Z</published>
    <updated>2016-01-12T12:11:22.614Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br><a id="more"></a></p>
<h1 id="docker-compose简介">docker-compose简介</h1><blockquote>
<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services. Then, using a single command, you create and start all the services from your configuration. To learn more about all the features of Compose see the list of features.<br>有点类似AWS的栈的概念，通过compose把一堆docker启动并组合起来，就是一个完整的服务。<br>与dockerfile的区别：</p>
<ul>
<li>docerfile对应的是一个docker，compose定义的是一组docker。</li>
</ul>
</blockquote>
<h1 id="install">install</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="number">1.5</span>.<span class="number">2</span>/docker-compose-`uname <span class="operator">-s</span>`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 由于github经常连不上，那么也可以用DaoCloud的链接</span></span><br><span class="line"><span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<h1 id="把当前用户加到docker组">把当前用户加到docker组</h1><p>由于docker的运行需要root权限，在非root用户时每次都要输入<code>sudo</code>，有点麻烦。<br>可以把当前用户加入到docker组，这样就不用每次都输入sudo了，方法</p>
<ul>
<li>sudo vi /etc/group</li>
<li>在docker组的最后加入当前用户名<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker:</span><span class="string">x:</span><span class="number">993</span>:your_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="简单的docker-compose">简单的docker-compose</h1><p>代码在<a href="https://github.com/CodeJuan/test_docker_compose" target="_blank" rel="external">https://github.com/CodeJuan/test_docker_compose</a></p>
<h2 id="创建一个app-py">创建一个app.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen %s times.'</span> % redis.get(<span class="string">'hits'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建requirements-txt">创建requirements.txt</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">flask</span></span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p>这里没有指定版本，那么pip install的就是最新的版本</p>
<h2 id="创建Dockerfile">创建Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> daocloud.io/python:<span class="number">2</span>-<span class="built_in">onbuild</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">. /code</span><br><span class="line"></span><span class="built_in">WORKDIR</span> <span class="bash">/code</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">pip install -r requirements.txt</span><br><span class="line"></span><span class="built_in">CMD</span> <span class="bash">python app.py</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-yml">docker-compose.yml</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: .</span><br><span class="line">  ports:</span><br><span class="line">   -<span class="ruby"> <span class="string">"5000:5000"</span></span><br><span class="line"></span>  volumes:</span><br><span class="line">   -<span class="ruby"> .<span class="symbol">:/code</span></span><br><span class="line"></span>  links:</span><br><span class="line">   -<span class="ruby"> redis</span><br><span class="line"></span>redis:</span><br><span class="line">  build: ./redis</span><br></pre></td></tr></table></figure>
<h2 id="DaoCloud的redis默认有随机密码">DaoCloud的redis默认有随机密码</h2><p>所以需要给redis写一个dockerfile<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM daocloud.io/daocloud/dao-redis:master-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量，表示不需要密码</span></span><br><span class="line">ENV REDIS_PASS=<span class="keyword">*</span><span class="keyword">*</span>None<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://blog.decbug.com/tags/docker-compose/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django]]></title>
    <link href="http://blog.decbug.com/2016/01/05/django/"/>
    <id>http://blog.decbug.com/2016/01/05/django/</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2016-01-05T12:59:17.804Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br><a id="more"></a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp products</span><br><span class="line"><span class="comment">#rm migrate</span></span><br><span class="line">python manage.py sql products</span><br><span class="line">python manage.py syncdb</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br>]]>
    
    </summary>
    
      <category term="django" scheme="http://blog.decbug.com/tags/django/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[吐槽KPI]]></title>
    <link href="http://blog.decbug.com/2015/12/31/kpi/"/>
    <id>http://blog.decbug.com/2015/12/31/kpi/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2015-12-31T15:20:02.297Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>
<a id="more"></a>
<h1 id="转载—手抄版">转载—手抄版</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/blob/master/images/blog/tucao.jpg?raw=true" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>]]>
    
    </summary>
    
      <category term="KPI" scheme="http://blog.decbug.com/tags/KPI/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件开发中的反馈]]></title>
    <link href="http://blog.decbug.com/2015/12/29/feedback_software/"/>
    <id>http://blog.decbug.com/2015/12/29/feedback_software/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2015-12-29T14:45:13.162Z</updated>
    <content type="html"><![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>
<a id="more"></a>
<h2 id="关于实验的思考">关于实验的思考</h2><p>同样的人，同样的场景，为何结果会有这么大的差异？原因就在于，是否可以用眼睛观察。<br>结合本文的主题，就是：有反馈和没反馈的区别。我们在有反馈的时候，可以及时根据输出情况调整我们的方向，以避免弯路。<br>反馈在现实中是如此重要，那么在软件开发过程中又是怎样的情况呢？</p>
<h1 id="软件开发与反馈">软件开发与反馈</h1><p>软件开发，其实也是一个输入输出系统，用户的需求经过我们的分析设计开发直到成为一个可运行的产品。<br>然而，在开发过程中，我们对反馈却不够重视。也许会有很极端的情况，我们的产品一直都不符合要求，直到最后死亡。<br>联想到现实生活中，我们看到的高楼大厦，也是从无到有创造出来的，一般很少有失败的情形，当然开发商跑路的烂尾楼除外。那么，二者究竟有什么差异导致不同的结局呢？<br>因为楼房在修建过程中，看得见摸得着，每时每刻都有反馈，细小的误差都会在最快的时间内解决。<br>那么软件开发为什么很难得到反馈呢？盖因软件不可见，只有可以运行的软件才能被我们感知。<br>在《程序员修炼之道》里有提到曳光弹</p>
<blockquote>
<p>注重实效的程序员往往更喜欢使用曳光弹。曳光弹之所以行之有效，是因为它们与真正的子弹在相同环境、相同条件下工作。它们快速飞向目标，所以枪手可以得到即时的反馈。</p>
</blockquote>
<h2 id="时间-成本">时间-成本</h2><p><img src="http://agilemodeling.com/images/costOfChangeTraditional.gif" alt=""></p>
<ul>
<li>时间越久，成本就越高</li>
<li>及时反馈，及时发现问题，及时解决</li>
</ul>
<h2 id="软件开发该如何反馈">软件开发该如何反馈</h2><p><img src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-36-52-metablogapi/1830.image_5F00_6DC23340.png" alt=""></p>
<p>敏捷也好，持续集成也罢，从头到尾都强调着反馈。<br><a href="http://blogs.msdn.com/b/brian_harry/archive/2011/09/20/10213910.aspx" target="_blank" rel="external">软件开发中反馈的重要性</a></p>
<h1 id="后记">后记</h1><p>这个是在公司内网发的一篇完成任务的帖子，凭记忆复述了一遍，感觉不如原文多矣。文笔变差了～sigh</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>]]>
    
    </summary>
    
      <category term="agile" scheme="http://blog.decbug.com/tags/agile/"/>
    
      <category term="feedback" scheme="http://blog.decbug.com/tags/feedback/"/>
    
      <category term="SoftwareEngineering" scheme="http://blog.decbug.com/categories/SoftwareEngineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs(MEAN)]]></title>
    <link href="http://blog.decbug.com/2015/12/28/mean/"/>
    <id>http://blog.decbug.com/2015/12/28/mean/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2015-12-29T13:28:58.495Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>
<a id="more"></a>
<h1 id="安装">安装</h1><h2 id="通过binary安装nodejs">通过binary安装nodejs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v5.<span class="number">3.0</span>/node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line">tar -zxf node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v5.<span class="number">3.0</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="安装MEAN">安装MEAN</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g mean-cli</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>]]>
    
    </summary>
    
      <category term="angular" scheme="http://blog.decbug.com/tags/angular/"/>
    
      <category term="express" scheme="http://blog.decbug.com/tags/express/"/>
    
      <category term="mongoDB" scheme="http://blog.decbug.com/tags/mongoDB/"/>
    
      <category term="nodejs" scheme="http://blog.decbug.com/tags/nodejs/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试travis CI]]></title>
    <link href="http://blog.decbug.com/2015/12/23/travisci/"/>
    <id>http://blog.decbug.com/2015/12/23/travisci/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2015-12-23T13:17:48.723Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>
<a id="more"></a>
<h1 id="步骤">步骤</h1><ul>
<li>首先，用github帐号登录<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>把某个工程打开，我选的工程是<a href="https://github.com/CodeJuan/python_convert_json2lua" target="_blank" rel="external">https://github.com/CodeJuan/python_convert_json2lua</a></li>
<li><p>创建’.travis.yml’，根据<a href="https://docs.travis-ci.com/user/languages/python" target="_blank" rel="external">https://docs.travis-ci.com/user/languages/python</a>填写一个python的yml</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">language:</span> python</span><br><span class="line"><span class="label">python:</span></span><br><span class="line">  - <span class="string">"2.7"</span></span><br><span class="line"><span class="preprocessor"># command to install dependencies</span></span><br><span class="line"><span class="label">install:</span> <span class="string">"pip install simplejson"</span></span><br><span class="line"><span class="preprocessor"># command to run tests</span></span><br><span class="line"><span class="label">script:</span> python go.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击工程的status图标，拷贝链接<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/travis_status.png" alt=""></p>
</li>
<li><p>在readme加上</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua.svg?branch=master</span>)](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果如图</p>
</li>
</ul>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/demo.png" alt=""></p>
<h1 id="感想">感想</h1><ul>
<li>有提交就触发，很方便</li>
<li>log很完整</li>
<li>可以自由配置环境</li>
<li>省去自己搭建jenkins的步骤</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>]]>
    
    </summary>
    
      <category term="travisCI" scheme="http://blog.decbug.com/tags/travisCI/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(2):web框架]]></title>
    <link href="http://blog.decbug.com/2015/12/15/golang_revel/"/>
    <id>http://blog.decbug.com/2015/12/15/golang_revel/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-28T12:09:50.226Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，</p>
<p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a></p>
<a id="more"></a>
<h1 id="beego">beego</h1><p>接下来就要深入学习一下了，用revel弄一个restful api玩玩。然而由于revel写restful api太难了，于是改为使用比较出名的<code>beego</code>，国人出品的框架，不知效果如何。</p>
<p>老规矩，从hello world开始</p>
<h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装框架</span></span><br><span class="line">go get github.com/astaxie/beego</span><br><span class="line"><span class="comment"># 安装工具</span></span><br><span class="line">go get github.com/beego/bee</span><br></pre></td></tr></table></figure>
<h2 id="建立工程">建立工程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span><br><span class="line">bee new <span class="built_in">test</span>_beego</span><br></pre></td></tr></table></figure>
<h2 id="运行">运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>_beego</span><br><span class="line">bee run</span><br></pre></td></tr></table></figure>
<p><img src="http://beego.me/docs/images/beerun.png" alt=""></p>
<h1 id="Restful_API">Restful API</h1><h2 id="安装mysql">安装mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server mariadb</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb.service</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h2 id="生成代码">生成代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee generate scaffold post -fields=<span class="string">"title:string,body:text"</span></span><br></pre></td></tr></table></figure>
<h2 id="在server后台运行bee_run">在server后台运行bee run</h2><p>在todo工程里运行<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee run</span><br></pre></td></tr></table></figure></p>
<h2 id="添加路由">添加路由</h2><p>在main.go添加路由<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/post/"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetAll;post:Post"</span>)</span><br><span class="line">beego.Router(<span class="string">"/post/:id:int"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetOne;put:Put;delete:Delete"</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="注册数据库">注册数据库</h2><p>提示没有default数据库，所以需要注册一下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">	<span class="string">"github.com/beego/samples/todo/controllers"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入orm和mysql驱动</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego/orm"</span></span><br><span class="line">	_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在init时注册</span></span><br><span class="line"><span class="keyword">func</span> init() &#123;</span><br><span class="line">orm.RegisterDriver(<span class="string">"mysql"</span>, orm.DR_MySQL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意第三个参数连接字符串</span></span><br><span class="line">orm.RegisterDataBase(<span class="string">"default"</span>, <span class="string">"mysql"</span>, <span class="string">"root:@/test?charset=utf8"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">	beego.Router(<span class="string">"/task/"</span>, &amp;controllers.TaskController&#123;&#125;, <span class="string">"get:ListTasks;post:NewTask"</span>)</span><br><span class="line">	beego.Router(<span class="string">"/task/:id:int"</span>, &amp;controllers.TaskController&#123;&#125;, <span class="string">"get:GetTask;put:UpdateTask"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加post路由</span></span><br><span class="line">	beego.Router(<span class="string">"/post/"</span>, &amp;controllers.PostController&#123;&#125;, <span class="string">"get:GetAll;post:Post"</span>)</span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="改index">改index</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">'container'</span> <span class="attribute">ng-controller</span>=<span class="value">'PostCtrl'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">'charcoal rounded-box'</span>&gt;</span>Blog<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Posts<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">'t in posts'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">'checkbox'</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>&#123;&#123;t.Id&#125;&#125;,&#123;&#123;t.Title&#125;&#125;,&#123;&#123;t.Body&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">'text'</span> <span class="attribute">class</span>=<span class="value">'rounded-box'</span> <span class="attribute">placeholder</span>=<span class="value">'add new post here'</span> <span class="attribute">ng-model</span>=<span class="value">'postText'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'addPost()'</span>&gt;</span>New Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'delPost()'</span>&gt;</span>Delete Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">'grey rounded-box'</span> <span class="attribute">ng-click</span>=<span class="value">'updatePost()'</span>&gt;</span>Update Post<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="改angularjs，增加PostCtrl">改angularjs，增加PostCtrl</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PostCtrl</span>(<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line">  $scope.posts = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> logError = <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code '</span>+status+<span class="string">': '</span>+data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> refresh = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/post/'</span>).</span><br><span class="line">      success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; $scope.posts = data; &#125;).</span><br><span class="line">      error(logError);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.addPost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $http.post(<span class="string">'/post/'</span>, &#123;Title: $scope.postText&#125;).</span><br><span class="line">      error(logError).</span><br><span class="line">      success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $scope.delPost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $http.delete(<span class="string">'/post/'</span>+$scope.postText).</span><br><span class="line">        error(logError).</span><br><span class="line">        success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $scope.updatePost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $http.put(<span class="string">'/post/'</span>+$scope.postText, &#123;Body: <span class="string">"hahaha"</span>&#125;).</span><br><span class="line">          error(logError).</span><br><span class="line">          success(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  refresh().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sqlite">sqlite</h2><hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，</p>
<p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a></p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一次去中心化的性能优化]]></title>
    <link href="http://blog.decbug.com/2015/12/15/decentralized/"/>
    <id>http://blog.decbug.com/2015/12/15/decentralized/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-15T12:43:28.345Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>
<a id="more"></a>
<h1 id="过程">过程</h1><h2 id="原来的流程">原来的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/data2compute.jpg" alt=""></p>
<p>如图，为简化流程，只画了一个存储节点和计算节点<code>典型的数据向计算迁移</code>，当数据特别大（数十G～百G）的时候，从存储节点拷贝到计算节点将特别耗时间。</p>
<p>而计算工具的身材特别苗条，几百M而已，拷贝过去也就是分分钟的事，如果能把计算工具放到存储节点，拷贝的时间就可以忽略不计，这个方法叫<code>计算向数据迁移</code></p>
<h2 id="优化后的流程">优化后的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/compute2data.jpg" alt=""></p>
<p>只是把百兆的计算工具拷过去，省去以前拷贝几百G数据的步骤～</p>
<h1 id="结论">结论</h1><p>虽然不是什么很新的技术，但是简单几步就解决了业务问题，还是比较值得高兴一下的。</p>
<p>后面如果能把计算工具封装成docker，放到docker registry上去，每次计算的时候，存储节点把镜像pull过来，应该会比较好玩吧～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>]]>
    
    </summary>
    
      <category term="decentralized" scheme="http://blog.decbug.com/tags/decentralized/"/>
    
      <category term="optimization" scheme="http://blog.decbug.com/tags/optimization/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讲讲缓存]]></title>
    <link href="http://blog.decbug.com/2015/12/14/cache/"/>
    <id>http://blog.decbug.com/2015/12/14/cache/</id>
    <published>2015-12-13T16:00:00.000Z</published>
    <updated>2015-12-14T13:34:22.846Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>
<a id="more"></a>
<h1 id="存储金字塔">存储金字塔</h1><p>首先要说的算存储金字塔，如下图所示</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/hierarchy.jpg" alt=""></p>
<p>可以看到，从上往下，速度越慢，容量越大，相应的成本就越低。</p>
<p>如果成本允许的情况下，我们自然尽量采购金字塔顶端的设备，然而现实却是残酷的，我们没有那么多资源可以挥霍。</p>
<h1 id="缓存的概念">缓存的概念</h1><p>在计算机体系中，缓存的概念其实是相对的。</p>
<ul>
<li>寄存器是L1的缓存</li>
<li>L1是L2的缓存</li>
<li>CPU缓存是内存的缓存</li>
<li>内存是硬盘的缓存</li>
</ul>
<h1 id="CPU_Cache_hit_&amp;_miss">CPU Cache hit &amp; miss</h1><p>我不说话，我只上图，能用图说清楚的，我就不说话。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/the-memory-system-15-638.jpg" alt=""></p>
<h2 id="这里顺便提以下CPU的提前预取？">这里顺便提以下CPU的提前预取？</h2><blockquote>
<p>为了利用空间局部性，同时也为了覆盖传输延迟，可以随机性地在数据被用到之前就将其取入缓存。这一技术称为预取（Prefetch）。本质上讲，加载整个缓存块其实即是一种预取。</p>
</blockquote>
<p>大概就是，CPU会提前给你把数据取过来，如果取到的数据正好是你要用的数据，那么恭喜你，速度会很快。</p>
<h2 id="阶梯延时">阶梯延时</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cpu_cache.jpg" alt=""></p>
<h1 id="内存数据库">内存数据库</h1><p>也是将热点数据放在内存中，相当于是把内存当作硬盘的缓存</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/redis-memcached-pdf-12-728.jpg" alt=""></p>
<h1 id="硬盘自身的缓存">硬盘自身的缓存</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/disk.jpg" alt=""></p>
<h1 id="CDN">CDN</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cache-hit-ratio-latency-graph.png" alt=""></p>
<h1 id="总结">总结</h1><ul>
<li>可以看到，缓存命中的性能会比缓存miss高很多</li>
<li>合理利用缓存，将热点数据放在缓存中</li>
<li>缓存的概念很广泛，不仅仅是CPU缓存</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>]]>
    
    </summary>
    
      <category term="cache" scheme="http://blog.decbug.com/tags/cache/"/>
    
      <category term="storage" scheme="http://blog.decbug.com/tags/storage/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openwrt内啥内啥]]></title>
    <link href="http://blog.decbug.com/2015/12/03/openwrt/"/>
    <id>http://blog.decbug.com/2015/12/03/openwrt/</id>
    <published>2015-12-02T16:00:00.000Z</published>
    <updated>2015-12-13T06:09:18.531Z</updated>
    <content type="html"><![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>
<a id="more"></a>
<h1 id="HG225D">HG225D</h1><p>购于淘宝，一定要uboot的刷不死版本，如果可以的话，建议买升级到64M内存的版本，速度会快一些。</p>
<h2 id="刷机">刷机</h2><ul>
<li>固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，<a href="http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d" target="_blank" rel="external">http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d</a></li>
<li>按住reset不放，再给路由通电，直到power灯开始一闪一闪</li>
<li>进入<a href="192.168.1.1">192.168.1.1</a>，此时看到的是刷机界面，选择刚才的固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，耐心等待即可</li>
</ul>
<h2 id="内啥内啥的配置">内啥内啥的配置</h2><p>需要配置ss、Redsocks和chinadns，其中chinadns的作用就是，只有被墙了网站才会走ss。</p>
<ul>
<li>进入服务-ss，填入你的服务器信息</li>
<li>进入服务-Redsocks，勾选启用Redsocks，在透明代理区域中，填写正确的代理服务器、代理服务器端口、代理服务器类型，加密方式以及密码。其中代理服务器类型选择<code>ss代理</code></li>
<li>还是在Redsocks，UDP转发区域，也填入和透明代理一样的信息</li>
<li>进入网络-DHCP/DNS，在常规设置的DNS转发处填写<code>127.0.0.1#1153</code></li>
<li>还是DHCP/DNS，点击HOSTS和解析文件，勾选<code>忽略解析文件</code></li>
</ul>
<p>再应用并保存所用配置，重启路由，就可以嘿嘿嘿了！</p>
<h1 id="DB120">DB120</h1><ul>
<li>刷飞翔的<a href="http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/" target="_blank" rel="external">http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/</a></li>
<li>然后更新chinaDNS-C到1.21<br><a href="http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk" target="_blank" rel="external">http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk</a></li>
<li>不更新的话，就有一些访问不了</li>
</ul>
<h1 id="WNDR4300">WNDR4300</h1><ul>
<li>下载石像鬼<a href="https://github.com/gygy/gygy.github.io" target="_blank" rel="external">https://github.com/gygy/gygy.github.io</a></li>
<li>按住reset开机</li>
<li>等电源灯变绿并一闪一闪</li>
<li>用tftp把刚下载好的固件传给4300</li>
<li>刷好后关机再开机以激活5G</li>
<li>填写相关配置，然后<a href="https://github.com/gygy" target="_blank" rel="external">@gygy</a>提供了三种方式，点一下按钮就OK了。</li>
</ul>
<h1 id="FAST-FWR171失败的经历，可以不用看">FAST-FWR171失败的经历，可以不用看</h1><h2 id="原厂固件">原厂固件</h2><p>FWR171到703N<br><a href="http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0" target="_blank" rel="external">http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0</a></p>
<h2 id="openwrt">openwrt</h2><p><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin</a><br><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</a></p>
<p>先刷factory</p>
<p>然后ssh root@192.168.1.1</p>
<p>passwd改密码</p>
<h2 id="开启wifi">开启wifi</h2><p>/etc/config/wireless  radio0的disable一行需要删掉或注释掉<br>顺便加个密<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'psk2'  </span></span><br><span class="line"></span><br><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'openwrt1234'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="改_/etc/config/network">改 /etc/config/network</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'loopback'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'lo'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'127.0.0.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.0.0.0'</span></span><br><span class="line"></span><br><span class="line">config globals <span class="comment">'globals'</span></span><br><span class="line">        <span class="keyword">option</span> ula_prefix <span class="comment">'fdaa:5a73:9c8e::/48'</span></span><br><span class="line"></span><br><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'192.168.1.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure>
<h2 id="搞挂了">搞挂了</h2><p>电脑的IP  192.168.1.2  gateway192.168.1.1 255.255.255.0<br>first_boot<br>reboot -f</p>
<p>ssh 192.168.1.1</p>
<h2 id="network">network</h2><p>加上<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line"><span class="preprocessor">#       option proto 'static'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'dhcp'</span></span><br><span class="line"><span class="preprocessor">#       option ipaddr '192.168.1.1'</span></span><br><span class="line"><span class="preprocessor">#       option netmask '255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure></p>
<p>连接已有的路由上网</p>
<p>装东西</p>
<p>软件安装</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="operator"><span class="keyword">update</span></span><br><span class="line">opkg <span class="keyword">install</span> kmod-macvlan ip</span></span><br></pre></td></tr></table></figure>
<p>编辑开机启动文件，在开机时虚拟出另外一张有线网卡，以区别WAN和LAN。</p>
<p>vi /etc/rc.local</p>
<p>在文件的exit 0之前加入以下内容。这里的MAC地址可以改成别的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ip</span> <span class="tag">link</span> <span class="tag">add</span> <span class="tag">link</span> <span class="tag">eth0</span> <span class="tag">eth2</span> <span class="tag">type</span> <span class="tag">macvlan</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">hw</span> <span class="tag">ether</span> 00<span class="pseudo">:11</span><span class="pseudo">:22</span><span class="pseudo">:33</span><span class="pseudo">:44</span><span class="pseudo">:5b</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">up</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">exit</span> 0</span><br></pre></td></tr></table></figure></p>
<p>把虚拟出的网卡分配给LAN使用。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uci set network<span class="class">.lan</span><span class="class">.ifname</span>=eth2</span><br></pre></td></tr></table></figure></p>
<p>创建WAN接口。这里的协议设为DHCP，可以直接将703N插入已经存在的有线网络中，即可上网。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uci set network.wan=interface</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.proto</span>=dhcp</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.hostname</span>=openwrt-wan</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.ifname</span>=eth0</span><br><span class="line">uci commit network</span><br></pre></td></tr></table></figure>
<h2 id="install_ss">install ss</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="keyword">install</span> http://ncu.dl.sourceforge.net/<span class="keyword">project</span>/openwrt-dist/shadowsocks-libev/<span class="number">2.4</span>.<span class="number">1</span>-<span class="number">6</span>f44d53/ar71xx/shadowsocks-libev-spec-polarssl_2.<span class="number">4.1</span>-<span class="number">1</span>_ar71xx.ipk</span><br></pre></td></tr></table></figure>
<p>提示空间不够。。。。</p>
<h2 id="刷明月固件">刷明月固件</h2><ul>
<li><a href="http://pan.baidu.com/s/1i3uYGeh#path=%252F" target="_blank" rel="external">http://pan.baidu.com/s/1i3uYGeh#path=%252F</a>，下载最新的7100的upgrade固件</li>
<li>scp固件到路由的/tmp</li>
<li>ssh连上路由，cd到/tmp</li>
<li><code>sysupgrade -v openwrt-ar71xx-generic-tl-wr2543-v1-squashfs-sysupgrade.bin</code></li>
<li>耐心等待</li>
</ul>
<h1 id="参考">参考</h1><p><a href="http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html" target="_blank" rel="external">http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html</a><br><a href="http://www.isucc.me/555.html" target="_blank" rel="external">http://www.isucc.me/555.html</a><br><a href="http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html" target="_blank" rel="external">http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html</a><br><a href="http://www.tuicool.com/articles/3Q7V7z3" target="_blank" rel="external">http://www.tuicool.com/articles/3Q7V7z3</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>]]>
    
    </summary>
    
      <category term="openwrt" scheme="http://blog.decbug.com/tags/openwrt/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试open falcon]]></title>
    <link href="http://blog.decbug.com/2015/11/29/open_falcon/"/>
    <id>http://blog.decbug.com/2015/11/29/open_falcon/</id>
    <published>2015-11-28T16:00:00.000Z</published>
    <updated>2015-11-29T09:47:36.738Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y redis</span><br><span class="line">sudo yum install -y mysql-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOME=/home/work</span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$HOME</span>/open-falcon</span><br><span class="line">mkdir -p <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/scripts.git</span><br><span class="line"><span class="built_in">cd</span> ./scripts/</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/graph-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/dashboard-db-schema.sql</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/portal-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/links-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/uic-db-schema.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DOWNLOAD=<span class="string">"https://github.com/XiaoMi/open-falcon/releases/download/0.0.5/open-falcon-0.0.5.tar.gz"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">mkdir ./tmp</span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget <span class="variable">$DOWNLOAD</span> -O open-falcon-latest.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxf open-falcon-latest.tar.gz -C ./tmp/</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `find ./tmp/ -name <span class="string">"*.tar.gz"</span>`;<span class="keyword">do</span> \</span><br><span class="line">    app=`<span class="built_in">echo</span> <span class="variable">$x</span>|cut <span class="operator">-d</span> <span class="string">'-'</span> <span class="operator">-f</span>2`; \</span><br><span class="line">    mkdir -p <span class="variable">$app</span>; \</span><br><span class="line">    tar -zxf <span class="variable">$x</span> -C <span class="variable">$app</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>]]>
    
    </summary>
    
      <category term="monitoring" scheme="http://blog.decbug.com/tags/monitoring/"/>
    
      <category term="ops" scheme="http://blog.decbug.com/tags/ops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(1):初学]]></title>
    <link href="http://blog.decbug.com/2015/11/28/golang/"/>
    <id>http://blog.decbug.com/2015/11/28/golang/</id>
    <published>2015-11-27T16:00:00.000Z</published>
    <updated>2015-12-28T11:28:09.858Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/" target="_blank" rel="external">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>
<a id="more"></a>
<hr>
<h1 id="安装go">安装go</h1><p>原本以为需要用源码来安装，上网查了一下，得知centos7可以直接<code>yum</code>安装，so easy。</p>
<h2 id="还是通过二进制安装一下吧">还是通过二进制安装一下吧</h2><p>yum安装的版本太低了，还是得自己安装1.5<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -xzf go1.<span class="number">5.1</span><span class="class">.linux-amd64</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">echo <span class="string">'export GOROOT="/usr/local/go"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export GOPATH="$HOME/code/go_code"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">. ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="golang_plugin_for_idea">golang plugin for idea</h1><p>作为idea的用户，自然首选的IDE还是idea，所以得装一个golang的插件<a href="https://github.com/go-lang-plugin-org/go-lang-idea-plugin" target="_blank" rel="external">https://github.com/go-lang-plugin-org/go-lang-idea-plugin</a><br>然后参考<a href="https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html" target="_blank" rel="external">https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html</a>进行安装即可</p>
<ol>
<li>file-settings-plugins</li>
<li>Browse repo</li>
<li>Manage repo</li>
<li>Custom plugin</li>
<li>add url <code>https://plugins.jetbrains.com/plugins/nightly/5047</code>，这个nightly不错，我先试试</li>
<li>一路ok/close</li>
<li>然后在file-settings-plugins输入go,选择安装。</li>
</ol>
<p>接下来就创建一个新的go工程，SDK就选择之前解压出来的<code>/usr/local/go</code></p>
<hr>
<h1 id="hello_world">hello world</h1><p>创建一个hello.go，内容如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">     fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后go run hello.go<br>也可以打包成一个可执行文件，go build hello.go</p>
<h1 id="simple_http_server">simple http server</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> handler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"Hi there, I love %s!"</span>, r.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="传说中的routine">传说中的routine</h1><p>大概说一下我的理解，由于线程的切换成本较高，上下文，栈恢复之类的，所以需要考虑其他办法。<br>多个routine，可以粗略的理解为共用一个线程，其CPU的抢占都是由routine自身来决定。由于只有一个线程，所以免去了切换的开销。<br>感觉还是怪怪的，就先简单理解为routine的开销较小，可以有更高的并发数吧。</p>
<hr>
<h1 id="web_frame">web frame</h1><p>打算试试revel<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/revel/cmd/revel</span><br></pre></td></tr></table></figure></p>
<p>提示<code>package golang.org/x/net/websocket: unrecognized import path &quot;golang.org/x/net/websocket&quot;</code></p>
<p>我只在我的办公机上装了SS，其他的几台挖掘机都没装，所以下不了。。<br>看来我真的得把我的openwrt的路由弄好，用来全局Fxxk了。<br>心情不好，今天就玩到这吧，擦擦擦！</p>
<blockquote>
<p>把内啥路由搞好了，HOHO，链接<a href="http://blog.decbug.com/2015/12/03/openwrt/">http://blog.decbug.com/2015/12/03/openwrt/</a>。搞好了三台，网件WNDR4300、华为HG225D和DB120，搞挂了一个迅捷171。继续开搞吧</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get revel framework</span></span><br><span class="line">go get github.com/revel/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get 'revel' command</span></span><br><span class="line">go get github.com/revel/cmd/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get samples and run chat app</span></span><br><span class="line">go get github.com/revel/samples</span><br><span class="line">vi src/github.com/codejuan/my-app/conf/app.conf <span class="comment">#8080</span></span><br><span class="line">sudo /sbin/iptables -I INPUT -p tcp -m tcp --dport <span class="number">8080</span> -j ACCEPT</span><br><span class="line">revel run github.com/revel/samples/chat</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[virtualbox共享文件夹]]></title>
    <link href="http://blog.decbug.com/2015/11/24/virtualbox_share/"/>
    <id>http://blog.decbug.com/2015/11/24/virtualbox_share/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2015-11-24T12:57:50.114Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><h2 id="设置共享文件夹">设置共享文件夹</h2><p>点击virtualbox的菜单，选择devices-shared folders settings<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/1.png" alt=""></p>
<h2 id="选中host上的一个文件夹">选中host上的一个文件夹</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/2.png" alt=""></p>
<h2 id="安装virtualbox插件">安装virtualbox插件</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/3.png" alt=""><br>会提示没有插件什么什么的，一路点next就行<br>装完之后需要重启</p>
<h2 id="映射host共享文件夹">映射host共享文件夹</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use x: \\vboxsvr\share</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/4.png" alt=""></p>
<p>然后在网络驱动器就会出现一个X盘，之后就能通过它来传文件了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>]]>
    
    </summary>
    
      <category term="share" scheme="http://blog.decbug.com/tags/share/"/>
    
      <category term="virtualbox" scheme="http://blog.decbug.com/tags/virtualbox/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>