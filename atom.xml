<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2015-10-11T13:04:34.719Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[学习ansible]]></title>
    <link href="http://blog.decbug.com/2015/10/11/ansible/"/>
    <id>http://blog.decbug.com/2015/10/11/ansible/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-10-11T13:04:34.719Z</updated>
    <content type="html"><![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/" target="_blank" rel="external">http://docs.ansible.com/</a><br><a id="more"></a></p>
<h1 id="install">install</h1><p>老规矩，从源码开始<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ansible/ansible.git --recursive</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line"><span class="built_in">source</span> ./hacking/env-setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖的库</span></span><br><span class="line">sudo pip install paramiko PyYAML Jinja2 httplib2 six</span><br></pre></td></tr></table></figure></p>
<p>当然，也可以直接用pip安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible</span><br></pre></td></tr></table></figure></p>
<h1 id="Inventory">Inventory</h1><h2 id="创建hosts">创建hosts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/ansible/</span><br><span class="line"></span><br><span class="line">sudo vi /etc/ansible/hosts</span><br><span class="line"><span class="comment"># 在hosts写上agent的IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ANSIBLE_INVENTORY=/etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<h2 id="执行ping">执行ping</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure>
<h2 id="提示失败">提示失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">161.52</span> | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"ERROR! SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我明明已经把master加入到可信SSH里了呀，可以不用密码ssh到agent呢。</p>
<h2 id="配置ssh-agent试试">配置ssh-agent试试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>还是不行</p>
<h2 id="解决">解决</h2><p>查看官方文档<a href="http://docs.ansible.com/ansible/intro_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_inventory.html</a>，提到</p>
<blockquote>
<p><code>ansible_host</code><br>  The name of the host to connect to, if different from the alias you wish to give to it.<br><code>ansible_port</code><br>  The ssh port number, if not 22<br><code>ansible_user</code><br>  The default ssh user name to use.<br>ansible_ssh_pass<br>  The ssh password to use (this is insecure, we strongly recommend using —ask-pass or SSH keys)<br>ansible_ssh_private_key_file<br>  Private key file used by ssh.  Useful if using multiple keys and you don’t want to use SSH agent.<br>ansible_ssh_common_args<br>  This setting is always appended to the default command line for<br>  sftp, scp, and ssh. Useful to configure a <code>ProxyCommand</code> for a<br>  certain host (or group).<br>ansible_sftp_extra_args<br>  This setting is always appended to the default sftp command line.<br>ansible_scp_extra_args<br>  This setting is always appended to the default scp command line.<br>ansible_ssh_extra_args<br>  This setting is always appended to the default ssh command line.<br>ansible_ssh_pipelining<br>  Determines whether or not to use SSH pipelining. This can override the<br>  <code>pipelining</code> setting in <code>ansible.cfg</code>.</p>
</blockquote>
<p>需要设置IP、port和user</p>
<h2 id="改写hosts文件">改写hosts文件</h2><p>加上user<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">g530</span> ansible_user=g530 ansible_ssh_host=<span class="number">192.168.161.52</span></span><br></pre></td></tr></table></figure></p>
<p>再次调用<code>ansible all -m ping</code>，提示成功</p>
<h1 id="dynamic_inventory">dynamic_inventory</h1><p><a href="http://docs.ansible.com/ansible/intro_dynamic_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_dynamic_inventory.html</a><br>暂时不看，等用到的时候再看</p>
<h1 id="pattern_&amp;_ad-hoc_command">pattern &amp; ad-hoc command</h1><p>也暂时略过</p>
<h1 id="playbook">playbook</h1><h2 id="ping">ping</h2><p>先写一个最简单的ping</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---                                                                        &#10;- hosts: g530&#10;  tasks:&#10;  - name: ping&#10;    ping:</span><br></pre></td></tr></table></figure>
<p>然后调用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -<span class="tag">i</span> /etc/ansible/hosts playbook.yml</span><br></pre></td></tr></table></figure></p>
<p>显示<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PLAY <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>说明成功</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/ping" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/ping</a></p>
<h2 id="advanced">advanced</h2><p>来尝试一个高端点的，带roles handler template的</p>
<h3 id="playbook-1">playbook</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: role_handler&#10;  hosts: g530&#10;  &#10;  roles:&#10;  - test</span><br></pre></td></tr></table></figure>
<h3 id="创建roles">创建roles</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">current_dir</span><br><span class="line"><span class="string">|--playbook.yml</span></span><br><span class="line"><span class="string">|--roles</span></span><br><span class="line">   <span class="string">|--test</span></span><br><span class="line">      <span class="string">|--handlers</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--tasks</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--templates</span></span><br><span class="line">         <span class="string">|--存放模板</span></span><br></pre></td></tr></table></figure>
<p>需要创建一个roles文件夹，里边的子文件夹的名字就是playbook里写的roles名字</p>
<h3 id="handlers">handlers</h3><p>每个role都会有handlers文件夹，里边的main.yml放一些响应事件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: restart&#10;  service: name=iptables state=restarted enabled=yes</span><br></pre></td></tr></table></figure></p>
<p>例子里表示重启iptables</p>
<h3 id="tasks">tasks</h3><p>role的tasks里的main.yml就是真正要执行的任务<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: ping and restart iptables&#10;  ping:  &#10;  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>表示先ping，然后调用handler里的restart</p>
<h3 id="template">template</h3><p>在template里创建一个文件<code>haha</code>，将他拷贝到agent的<code>/tmp</code><br>tasks mail.yml改为<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: ping&#10;  ping:   &#10;  template: src=haha dest=/tmp/haha&#10;  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>提示语法错误，看起来似乎一个<code>name</code>只能有一个操作</p>
<p>改为两个name貌似就好了<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: ping</span><br><span class="line">  ping:   </span><br><span class="line"></span><br><span class="line">- name: <span class="keyword">template</span> iptables</span><br><span class="line">  <span class="keyword">template</span>: src=haha dest=/tmp/haha</span><br><span class="line">  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>再play一下<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [role_handler] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : template iptables] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">changed: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>果然多了一个操作</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/advancded_play" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/advancded_play</a></p>
<h1 id="深入学习">深入学习</h1><p>已经了解了基本概念，接下来就要看一些优秀案例了<br><a href="http://docs.ansible.com/ansible/playbooks_best_practices.html" target="_blank" rel="external">http://docs.ansible.com/ansible/playbooks_best_practices.html</a><br><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">https://github.com/ansible/ansible-examples</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/">http://docs.ansible.com/</a><br>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://blog.decbug.com/tags/ansible/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="devops" scheme="http://blog.decbug.com/tags/devops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换部门]]></title>
    <link href="http://blog.decbug.com/2015/10/10/dept/"/>
    <id>http://blog.decbug.com/2015/10/10/dept/</id>
    <published>2015-10-09T16:00:00.000Z</published>
    <updated>2015-10-11T07:17:25.543Z</updated>
    <content type="html"><![CDATA[<p>换了个好玩的部门<br><a id="more"></a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>换了个好玩的部门<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tornado+nginx+IP白名单]]></title>
    <link href="http://blog.decbug.com/2015/09/13/tornado/"/>
    <id>http://blog.decbug.com/2015/09/13/tornado/</id>
    <published>2015-09-12T16:00:00.000Z</published>
    <updated>2015-09-17T13:41:06.968Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>
<a id="more"></a>
<h2 id="分析一下需求">分析一下需求</h2><ul>
<li>一个input，一个button，点button就把input的内容追加到某个文件中，暂时不考虑input是否合法</li>
<li>tornado 写一个handler</li>
<li>定时把最新的IP合并到allow_ip.con</li>
</ul>
<h1 id="tornado">tornado</h1><h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/t/tornado/tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tornado-<span class="number">4.2</span>.<span class="number">1</span></span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="开搞">开搞</h2><h3 id="demos">demos</h3><p>先试用一下<code>tornado</code>源码里的demos，找到最简单的helloworld，运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python helloworld.py</span><br></pre></td></tr></table></figure></p>
<p>在另一台机器上访问，总是载入不了网页。于是开始排查</p>
<ul>
<li>本机上查看端口<code>netstat -tulpn | grep :8888</code></li>
<li>在本机上curl，可以打开</li>
<li>猜测可能是防火墙的问题，<code>iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code><br>再次访问，就OK啦</li>
</ul>
<h3 id="一个输入页面">一个输入页面</h3><h4 id="login-html">login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"&#123;&#123; request.path &#125;&#125;"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;&#123; _("你的IP") &#125;&#125; <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;div&gt;&#123;&#123; _("Password") &#125;&#125; &lt;input type="password" name="password"/&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"&#123;&#123; _("</span><span class="value">输入")</span> &#125;&#125;"/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       &#123;% module xsrf_form_html() %&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="test-py">test.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LoginHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># template from login.html</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line">        <span class="comment">#pwd=self.get_argument("password", "") </span></span><br><span class="line">        self.write(usr)</span><br><span class="line">        <span class="comment">#self.write(pwd)</span></span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login时通过LoginHandler处理</span></span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h4 id="运行效果">运行效果</h4><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2021:59:01.png" alt="输入"></p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2022:04:20.png" alt="结果"></p>
<h3 id="保存用户的IP到白名单">保存用户的IP到白名单</h3><p>先写入到一个临时文件，然后定时同步到nginx的配置里include白名单文件allow_ips.conf</p>
<h4 id="写入文件">写入文件</h4><p>先实现一个最简单的，不考虑锁啊，共享之类的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    file_name = <span class="string">"ip.txt"</span></span><br><span class="line">    FILE = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把用户输入的IP写入到文件</span></span><br><span class="line">        self.WriteIP(usr)</span><br><span class="line">        self.write(<span class="string">"Your IP have been added to the white list\n"</span>+usr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加一个writeIP的方法不考虑共享等问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">WriteIP</span><span class="params">(self,ip)</span>:</span></span><br><span class="line">        self.FILE = open(self.file_name, <span class="string">"w"</span>) </span><br><span class="line">        self.FILE.writelines(ip)</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h1 id="nginx">nginx</h1><h2 id="下载安装">下载安装</h2><h3 id="源码编译">源码编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line">tar zxvf nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="number">1.9</span>.<span class="number">4</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>
<p>提示缺少C编译器，于是<code>yum install gcc</code><br>提示缺少pcre library，于是<code>yum -y install pcre-devel</code><br>接着又提示缺少zlib。。算了，还是换别的方式吧，不从源码编了</p>
<h3 id="yum安装">yum安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/<span class="number">7</span>/noarch/RPMS/nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm</span><br><span class="line">sudo rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm </span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置nginx-conf">配置nginx.conf</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">8777</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://192.168.151.55:8888/</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试配置是否正确</span></span><br><span class="line">sudo nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<h1 id="iptables">iptables</h1><p>我们只是需要一个白名单而已，用nginx是不是太重型化了？<br>iptables热插拔，即使生效，也支持可信ip，而且用起来比较简单。</p>
<h2 id="导入导出">导入导出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export the rules of iptable</span></span><br><span class="line">iptables-save &gt; /some/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">iptables-restore &lt;/some/file</span><br></pre></td></tr></table></figure>
<h2 id="即时生效">即时生效</h2><blockquote>
<p>Is a reboot required after edit/saving linux iptables?</p>
<blockquote>
<p>iptables rules take effect immediately.<br>Changes to iptables take effect immediately when they are run.However, your language of “edit and save” makes me think you are editing a conf file or script of some kind rather than actually running the iptables commands.If you are making your changes in a script, you must make sure that script gets run in order for the changes to take affect. </p>
</blockquote>
</blockquote>
<h2 id="使用">使用</h2><p>未完待续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>]]>
    
    </summary>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="tornado" scheme="http://blog.decbug.com/tags/tornado/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多线程同步镜像]]></title>
    <link href="http://blog.decbug.com/2015/09/07/multi_thread_rsync/"/>
    <id>http://blog.decbug.com/2015/09/07/multi_thread_rsync/</id>
    <published>2015-09-06T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:46.038Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>为了提高工作效率，我司的软件青年们搭建了一组内网mirror，包括apache，pip，npm，jenkins，ubuntu等等。<br>想用得爽，就得保持与官方一致，需要很频繁的同步。<br>以前的同步是单线程的，感觉没有完全发挥带宽的优势，所以想尝试一下多线程同步。</p>
<h2 id="大概的思路">大概的思路</h2><ul>
<li>爬index，如hust的镜像<a href="http://mirrors.hust.edu.cn/ubuntu-releases/" target="_blank" rel="external">http://mirrors.hust.edu.cn/ubuntu-releases/</a>，找出所有<code>href</code>。</li>
<li>每个href就启动一个rsync或者wget，同步到对应的文件夹</li>
<li>记录每个href的同步状态</li>
<li>汇总全部状态，看所有href是否都同步成功<a id="more"></a>
</li>
</ul>
<h2 id="shell爬">shell爬</h2><h3 id="步骤">步骤</h3><ul>
<li>wget镜像的index.html</li>
<li>正则匹配，找到二级目录href-</li>
<li>xargs -P 八个线程同时wget -r</li>
<li>有个问题，如何获取每个href的同步状态，成功还是失败？</li>
</ul>
<h3 id="代码">代码</h3><p>放在<a href="https://github.com/CodeJuan/multi_thread_rsync_mirror" target="_blank" rel="external">https://github.com/CodeJuan/multi_thread_rsync_mirror</a></p>
<h4 id="wget_index-html">wget index.html</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get index.html</span></span><br><span class="line">wget <span class="variable">$link</span> -O <span class="variable">$file</span></span><br></pre></td></tr></table></figure>
<h4 id="regex得到二级目录">regex得到二级目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep "href" "&lt;a" "/$"</span></span><br><span class="line"><span class="comment"># cut "\""</span></span><br><span class="line">cat <span class="variable">$bak_file</span> | grep <span class="string">"href*=*\""</span> | grep <span class="string">"&lt;a"</span> | cut <span class="operator">-d</span> <span class="string">"\""</span> <span class="operator">-f</span> <span class="number">2</span> | grep <span class="string">"/$"</span> | grep -v <span class="string">"\.\."</span></span><br></pre></td></tr></table></figure>
<h4 id="xargs_-P_八个线程同时wget_-r">xargs -P 八个线程同时wget -r</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;whole_url_list[@]&#125;</span> | xargs -n <span class="number">1</span> -P <span class="number">8</span> ./single_down.sh <span class="string">"<span class="variable">$des</span>"</span></span><br></pre></td></tr></table></figure>
<h4 id="还没实现获取同步状态">还没实现获取同步状态</h4><p>如果下载失败了，完全没有办法知道。<br>下一步实现</p>
<h2 id="另一种玩法：python爬">另一种玩法：python爬</h2><h3 id="步骤-1">步骤</h3><h4 id="装beautifulsoup">装beautifulsoup</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载并安装pip</span></span><br><span class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-<span class="number">7.1</span>.<span class="number">2</span>.tar.gz</span><br><span class="line">tar zxvf pip-<span class="number">7.1</span>.<span class="number">2</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pip-<span class="number">7.1</span>.<span class="number">2</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment">#装beautifulsoup4</span></span><br><span class="line">sudo pip install beautifulsoup4</span><br></pre></td></tr></table></figure>
<h4 id="开始爬">开始爬</h4><p>由于index的页面都很简洁，爬起来还是相对比较容易。</p>
<p>以后有空搞定～～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>为了提高工作效率，我司的软件青年们搭建了一组内网mirror，包括apache，pip，npm，jenkins，ubuntu等等。<br>想用得爽，就得保持与官方一致，需要很频繁的同步。<br>以前的同步是单线程的，感觉没有完全发挥带宽的优势，所以想尝试一下多线程同步。</p>
<h2 id="大概的思路">大概的思路</h2><ul>
<li>爬index，如hust的镜像<a href="http://mirrors.hust.edu.cn/ubuntu-releases/">http://mirrors.hust.edu.cn/ubuntu-releases/</a>，找出所有<code>href</code>。</li>
<li>每个href就启动一个rsync或者wget，同步到对应的文件夹</li>
<li>记录每个href的同步状态</li>
<li>汇总全部状态，看所有href是否都同步成功]]>
    
    </summary>
    
      <category term="mirror" scheme="http://blog.decbug.com/tags/mirror/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="rsync" scheme="http://blog.decbug.com/tags/rsync/"/>
    
      <category term="wget" scheme="http://blog.decbug.com/tags/wget/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[指标下的单元测试]]></title>
    <link href="http://blog.decbug.com/2015/08/23/fake_unit_test/"/>
    <id>http://blog.decbug.com/2015/08/23/fake_unit_test/</id>
    <published>2015-08-22T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:33.374Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><blockquote>
<p>最近领导强推单元测试覆盖率，要求达到80%。我打探了一下，据说覆盖率是更上层领导的考核指标，所以今年我们组一大任务就是这。没几个人觉得写好单元测试是为了提升软件质量，提高自己的代码水平。<br>可以预见的是，有人会<code>为了提高覆盖率，写一堆无效代码</code>。 “上有所好，下必甚焉”。</p>
</blockquote>
<p>距离我上一次吐槽已经过去了半年，我们的单元测试变成了什么情况呢？<br>半年前我的猜测是<code>为了提高覆盖率，写一堆无效代码</code>，然而实际情况却比这更糟糕。</p>
<ul>
<li>有人的测试函数的末尾始终是<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPECT_EQ(TRUE=TRUE)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样每个用例都是绿的</p>
<ul>
<li>还有人这么写<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init module</span></span><br><span class="line"><span class="comment">//run module</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>测试的是整个模块的输入输出，这样可以保证覆盖率</p>
<p>领导看到用例一片绿，覆盖率90%，觉得我们的代码质量很高。</p>
<p>然而，这并没有什么卵用！！！<br>这真的没有什么卵用！<br>这真的没有什么卵用！<br>这真的没有什么卵用！</p>
<a id="more"></a>
<h1 id="分析">分析</h1><ul>
<li>正如我所说<code>没几个人觉得写好UT是为了提升软件质量，提高自己的代码水平</code></li>
<li>责任心？能想出这样方法的人，都是比较聪明的人。只能说是责任心吧。</li>
<li>管理方式？为什么没有早点发现？为什么我没有去经常查看单元测试代码的提交记录（我平时会看看生产代码）？我有罪。</li>
</ul>
<p>待续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><blockquote>
<p>最近领导强推单元测试覆盖率，要求达到80%。我打探了一下，据说覆盖率是更上层领导的考核指标，所以今年我们组一大任务就是这。没几个人觉得写好单元测试是为了提升软件质量，提高自己的代码水平。<br>可以预见的是，有人会<code>为了提高覆盖率，写一堆无效代码</code>。 “上有所好，下必甚焉”。</p>
</blockquote>
<p>距离我上一次吐槽已经过去了半年，我们的单元测试变成了什么情况呢？<br>半年前我的猜测是<code>为了提高覆盖率，写一堆无效代码</code>，然而实际情况却比这更糟糕。</p>
<ul>
<li>有人的测试函数的末尾始终是<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPECT_EQ(TRUE=TRUE)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样每个用例都是绿的</p>
<ul>
<li>还有人这么写<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init module</span></span><br><span class="line"><span class="comment">//run module</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>测试的是整个模块的输入输出，这样可以保证覆盖率</p>
<p>领导看到用例一片绿，覆盖率90%，觉得我们的代码质量很高。</p>
<p>然而，这并没有什么卵用！！！<br>这真的没有什么卵用！<br>这真的没有什么卵用！<br>这真的没有什么卵用！</p>]]>
    
    </summary>
    
      <category term="indicator" scheme="http://blog.decbug.com/tags/indicator/"/>
    
      <category term="unit_test" scheme="http://blog.decbug.com/tags/unit-test/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初学docker]]></title>
    <link href="http://blog.decbug.com/2015/08/23/docker_tutorial/"/>
    <id>http://blog.decbug.com/2015/08/23/docker_tutorial/</id>
    <published>2015-08-22T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:20.974Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>虽然久闻docker大名，但一直没有尝试过，固然可以说是比较忙的原因，但忙不是我们不学习新技术的借口。<br>也许以后工作可能会用到docker，我得未雨绸缪，提前准备，开始学docker了</p>
<a id="more"></a>
<h2 id="安装">安装</h2><p>参考<a href="http://docs.docker.com/installation/centos/" target="_blank" rel="external">installation on CentOS</a></p>
<h3 id="查看内核版本">查看内核版本</h3><blockquote>
<p>Docker requires a 64-bit installation regardless of your CentOS version. Also, your kernel must be 3.10 at minimum, which CentOS 7 runs.<br>要求centos7 64-bit</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
<p>我的是CentOS7，<code>3.10.0-229.el7.x86_64</code>，符合要求</p>
<h3 id="用脚本安装">用脚本安装</h3><ol>
<li><p>yum package最新</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the Docker installation script.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="operator">-s</span>SL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>This script adds the <code>docker.repo</code> repository and installs Docker.</p>
<ol>
<li>Start the Docker daemon.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>失败了，提示<code>Job for docker.service failed. See &#39;systemctl status docker.service&#39; and &#39;journalctl -xn&#39; for details.</code><br>查了一下，<a href="https://github.com/docker/docker/issues/15498" target="_blank" rel="external">#15498</a>有人说要装docker-selinux<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-selinux</span><br></pre></td></tr></table></figure></p>
<p>然后<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></p>
<p>果然complete</p>
<ol>
<li>verify<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling <span class="built_in">from</span> library/hello-world</span><br><span class="line"><span class="number">535020</span>c3e8ad: Pull complete </span><br><span class="line">af340544ed62: Already exists </span><br><span class="line">library/hello-world:latest: The image you are pulling has been verified. Important: image verification is <span class="operator">a</span> tech preview feature <span class="operator">and</span> should <span class="operator">not</span> be relied <span class="command"><span class="keyword">on</span> <span class="title">to</span> <span class="title">provide</span> <span class="title">security</span>.</span></span><br><span class="line">Digest: sha256:d5fbd996e6562438f7ea5389d7da867fe58e04d581810e230df4cc073271ea52</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello <span class="built_in">from</span> Docker.</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">    executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="operator">and</span> more <span class="operator">with</span> <span class="operator">a</span> free Docker Hub account:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/userguide/</span><br></pre></td></tr></table></figure>
<h2 id="进阶">进阶</h2><hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>虽然久闻docker大名，但一直没有尝试过，固然可以说是比较忙的原因，但忙不是我们不学习新技术的借口。<br>也许以后工作可能会用到docker，我得未雨绸缪，提前准备，开始学docker了</p>]]>
    
    </summary>
    
      <category term="centos" scheme="http://blog.decbug.com/tags/centos/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抄代码引发的句柄泄漏]]></title>
    <link href="http://blog.decbug.com/2015/08/06/handle_leak/"/>
    <id>http://blog.decbug.com/2015/08/06/handle_leak/</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2015-08-07T00:19:26.493Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><h2 id="现象">现象</h2><p>主进程不断调用7z.exe进行解压，当文件数量较小时，顺利运行。当文件数量达到几十万的时候，运行过程中7z报错，fatal error 2。<br>网上很多同僚说这是由于系统资源不足造成的。观察此时的内存及磁盘使用情况，都很充裕，但为何还说资源不足呢？于是开启了蛋疼的定位之旅，至于为什么说很蛋疼呢，这是因为是一个低级错误导致的问题。</p>
<p>心急的朋友可以直接看原理:<a href="https://github.com/CodeJuan/HandleLeak" target="_blank" rel="external">https://github.com/CodeJuan/HandleLeak</a></p>
<p>不着急的朋友可以慢慢看定位过程</p>
<a id="more"></a>
<h1 id="过程">过程</h1><h2 id="句柄泄漏">句柄泄漏</h2><p>鉴于内存及硬盘都充足，那么猜测可能算句柄泄漏。先简单说下句柄泄漏的概念：</p>
<ul>
<li>句柄，可以简单理解为某个资源的名字。</li>
<li>泄漏，跟内存泄漏一个泄漏，用了忘记释放，导致可用资源越来越少。</li>
<li>A handle leak is a type of software bug that occurs when a computer program asks for a handle to a resource but does not free the handle when it is no longer used. If this occurs frequently or repeatedly over an extended period of time, a large number of handles may be marked in-use and thus unavailable, causing performance problems or a crash.</li>
</ul>
<h2 id="验证泄漏">验证泄漏</h2><p>把有问题的代码抠出来，写一个demo，循环跑。观察句柄情况。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    SHELLEXECUTEINFO ShExecInfo = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    ShExecInfo.cbSize = <span class="keyword">sizeof</span>(SHELLEXECUTEINFO);</span><br><span class="line">    ShExecInfo.fMask = SEE_MASK_NOCLOSEPROCESS;</span><br><span class="line">    ShExecInfo.hwnd = NULL;</span><br><span class="line">    ShExecInfo.lpVerb = _T(<span class="string">"open"</span>);</span><br><span class="line">    ShExecInfo.lpFile = _T(<span class="string">"cmd"</span>);</span><br><span class="line">    ShExecInfo.lpParameters = _T(<span class="string">"/c echo 111"</span>);</span><br><span class="line">    ShExecInfo.lpDirectory = NULL;</span><br><span class="line">    ShExecInfo.nShow = SW_HIDE;</span><br><span class="line">    ShExecInfo.hInstApp = NULL;</span><br><span class="line"></span><br><span class="line">    ShellExecuteEx(&amp;ShExecInfo);</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(ShExecInfo.hProcess,INFINITE); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看任务管理器中性能页显示的总句柄数，果然是不停在上涨，说明猜测成立</p>
<h2 id="7z泄漏？">7z泄漏？</h2><p>猜测可能算7z自身有泄漏，然而很快又否决了。<br>就像内存泄漏一样，当进程结束的时候，所有资源都会被系统回收，不会继续作恶下去。</p>
<blockquote>
<p>When the program terminates, all its open handles are closed<br>Yes, a “memory leak” is simply memory that a process no longer has a reference to, and thus can no longer free. The OS still keeps track of all the memory allocated to a process, and will free it when that process terminates.</p>
</blockquote>
<p>说明只是我们自己的主进程有泄漏</p>
<h2 id="查看主进程句柄">查看主进程句柄</h2><p>通过任务管理器查看进程的句柄数，方法<code>选项-查看列-选中句柄计数</code></p>
<p>句柄情况如图所示</p>
<p>运行一段时间后400+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak1.JPG" alt=""></p>
<p>再过一段时间1000+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak2.JPG" alt=""></p>
<p>接下来2000+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak3.JPG" alt=""></p>
<p>看来真的是泄漏了</p>
<h2 id="查看代码">查看代码</h2><p>看一下<code>SHELLEXECUTEINFOW</code>的定义<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _SHELLEXECUTEINFOW</span><br><span class="line">&#123;</span><br><span class="line">    DWORD cbSize;               <span class="comment">// in, required, sizeof of this structure</span></span><br><span class="line">    ULONG fMask;                <span class="comment">// in, SEE_MASK_<span class="doctag">XXX</span> values</span></span><br><span class="line">    HWND hwnd;                  <span class="comment">// in, optional</span></span><br><span class="line">    LPCWSTR  lpVerb;            <span class="comment">// in, optional when unspecified the default verb is choosen</span></span><br><span class="line">    LPCWSTR  lpFile;            <span class="comment">// in, either this value or lpIDList must be specified</span></span><br><span class="line">    LPCWSTR  lpParameters;      <span class="comment">// in, optional</span></span><br><span class="line">    LPCWSTR  lpDirectory;       <span class="comment">// in, optional</span></span><br><span class="line">    <span class="keyword">int</span> nShow;                  <span class="comment">// in, required</span></span><br><span class="line">    HINSTANCE hInstApp;         <span class="comment">// out when SEE_MASK_NOCLOSEPROCESS is specified</span></span><br><span class="line">    <span class="keyword">void</span> *lpIDList;             <span class="comment">// in, valid when SEE_MASK_IDLIST is specified, PCIDLIST_ABSOLUTE, for use with SEE_MASK_IDLIST &amp; SEE_MASK_INVOKEIDLIST</span></span><br><span class="line">    LPCWSTR  lpClass;           <span class="comment">// in, valid when SEE_MASK_CLASSNAME is specified</span></span><br><span class="line">    HKEY hkeyClass;             <span class="comment">// in, valid when SEE_MASK_CLASSKEY is specified</span></span><br><span class="line">    DWORD dwHotKey;             <span class="comment">// in, valid when SEE_MASK_HOTKEY is specified</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        HANDLE hIcon;           <span class="comment">// not used</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> (NTDDI_VERSION &gt;= NTDDI_WIN2K)</span></span><br><span class="line">        HANDLE hMonitor;        <span class="comment">// in, valid when SEE_MASK_HMONITOR specified</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// (NTDDI_VERSION &gt;= NTDDI_WIN2K)</span></span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    HANDLE hProcess;            <span class="comment">// out, valid when SEE_MASK_NOCLOSEPROCESS specified</span></span><br><span class="line">&#125; SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;</span><br></pre></td></tr></table></figure></p>
<p>注意看<code>HANDLE hProcess;// out, valid when SEE_MASK_NOCLOSEPROCESS specified</code></p>
<p>也就是说，如果指定了<code>SEE_MASK_NOCLOSEPROCESS</code>，<code>hProcess</code>就是返回的句柄。如果不关闭，就会造成句柄泄漏。</p>
<p>我们的代码为了等待进程结束，设置了<code>SEE_MASK_NOCLOSEPROCESS</code>，然后WaitForSingleObject(<code>ShExecInfo.hProcess</code>,INFINITE); </p>
<p>然后又没有关闭<code>ShExecInfo.hProcess</code>，导致句柄不断上涨</p>
<h2 id="CloseHandle">CloseHandle</h2><p>加上<code>CloseHandle</code>之后<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CloseHandle(ShExecInfo.hProcess);</span><br></pre></td></tr></table></figure></p>
<p>句柄始终保持在100左右</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/CloseHandle.JPG" alt=""></p>
<p>修改正式代码，运行50万次依旧稳定，问题解决。</p>
<h1 id="结论">结论</h1><p>询问组内同事，说这段代码是从CSDN上抄来的，没有深入了解代码的意思，没有注意到<code>SEE_MASK_NOCLOSEPROCESS</code>。</p>
<ol>
<li>抄代码一定要小心谨慎，需要仔细阅读官方说明，把参数的意义都理解清楚</li>
<li>仅仅跑起来，凑合着用是不够的，需要做一做压力测试</li>
<li>这次看句柄的方式比较落伍，需要整理一下如何用windbg查句柄泄漏的方法，下一篇就写这个吧。</li>
</ol>
<h1 id="参考">参考</h1><p><a href="https://en.wikipedia.org/wiki/Handle_leak" target="_blank" rel="external">HandleLeak</a><br><a href="http://blogs.technet.com/b/markrussinovich/archive/2009/09/29/3283844.aspx" target="_blank" rel="external">Pushing the Limits of Windows: Handles</a><br><a href="http://stackoverflow.com/questions/2975831/is-leaked-memory-freed-up-when-the-program-exits" target="_blank" rel="external">Is leaked memory freed up when the program exits?</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><h2 id="现象">现象</h2><p>主进程不断调用7z.exe进行解压，当文件数量较小时，顺利运行。当文件数量达到几十万的时候，运行过程中7z报错，fatal error 2。<br>网上很多同僚说这是由于系统资源不足造成的。观察此时的内存及磁盘使用情况，都很充裕，但为何还说资源不足呢？于是开启了蛋疼的定位之旅，至于为什么说很蛋疼呢，这是因为是一个低级错误导致的问题。</p>
<p>心急的朋友可以直接看原理:<a href="https://github.com/CodeJuan/HandleLeak">https://github.com/CodeJuan/HandleLeak</a></p>
<p>不着急的朋友可以慢慢看定位过程</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://blog.decbug.com/tags/C/"/>
    
      <category term="handle" scheme="http://blog.decbug.com/tags/handle/"/>
    
      <category term="leak" scheme="http://blog.decbug.com/tags/leak/"/>
    
      <category term="process" scheme="http://blog.decbug.com/tags/process/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动生成软件中模块依赖图]]></title>
    <link href="http://blog.decbug.com/2015/07/26/pe_depen/"/>
    <id>http://blog.decbug.com/2015/07/26/pe_depen/</id>
    <published>2015-07-25T16:00:00.000Z</published>
    <updated>2015-08-13T14:39:31.945Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>上回实现了<a href="http://blog.decbug.com/2015/07/06/dependency_in_sln/">自动生成sln中各project依赖图</a>，可以分析一个VS solution里面每个project的依赖关系，但是这个太弱了。我需要exe、dll之间依赖图，所以只能继续想办法了。</p>
<h1 id="思路">思路</h1><ol>
<li>获取该软件目录下所有模块(exe和dll)</li>
<li>通过vs自带的dumpbin命令得到每个模块文件的依赖</li>
<li>画出graphviz的dot脚本</li>
<li>graphviz绘图</li>
</ol>
<a id="more"></a>
<h1 id="使用方法">使用方法</h1><p>代码已经写好，放在<a href="https://github.com/CodeJuan/pe_dependency" target="_blank" rel="external">https://github.com/CodeJuan/pe_dependency</a><br>先说怎么用</p>
<ol>
<li>安装graphviz2.38<a href="http://www.graphviz.org/Download_windows.php" target="_blank" rel="external">http://www.graphviz.org/Download_windows.php</a>到D盘program files</li>
<li>安装VS2010到到D盘program files<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell .\dependency.ps1 -sw_path &#34;&#36719;&#20214;&#30340;&#36335;&#24452;&#34;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>比如说我要分析腾讯TM，那么<code>powershell .\dependency.ps1 -sw_path &quot;D:\Program Files\Tencent\TM&quot;</code>就OK啦</p>
<h1 id="代码">代码</h1><h2 id="获取目录下所有PE">获取目录下所有PE</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$get_pe_cmd</span> = <span class="string">"dir /S /B /a-d-h-s `"<span class="variable">$sw_path</span>`" | findstr /I `".dll .exe`" &gt; files.txt"</span></span><br><span class="line">cmd /c <span class="string">"<span class="variable">$get_pe_cmd</span>"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>findstr /I</code>表示忽略大小写</p>
<h2 id="拷贝mspdb100-dll">拷贝mspdb100.dll</h2><p>由于无法直接调用vs2010 command prompt，所以没有设置环境变量，在使用dumpbin的时候会提示缺少<code>mspdb100.dll</code>，这就需要把<code>mspdb100.dll</code>拷贝到dumpbin.exe所在的<code>vc_bin</code>目录下<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vs_path</span>=<span class="string">"D:\Program Files\Microsoft Visual Studio 10.0"</span></span><br><span class="line"><span class="built_in">copy-item</span> <span class="string">"<span class="variable">$vs_path</span>\Common7\IDE\mspdb100.dll"</span> <span class="string">"<span class="variable">$vc_bin</span>"</span> -Force</span><br></pre></td></tr></table></figure></p>
<p>我的测试机是<code>x86 32位</code>，如果路径有变化，修改<code>$vs_path</code>即可</p>
<h2 id="graphviz画图">graphviz画图</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$graph_dot</span>=<span class="string">"D:\Program Files\Graphviz2.38\bin\dot.exe"</span></span><br><span class="line"><span class="variable">$draw</span> = <span class="string">"`"<span class="variable">$graph_dot</span>`"  -Tpng graph.txt &gt; graph.png"</span> </span><br><span class="line">cmd /c <span class="string">"<span class="variable">$draw</span>"</span></span><br></pre></td></tr></table></figure>
<p>我的graphviz装在D盘，如果有变化，修改<code>$graph_dot</code>即可</p>
<h2 id="通过dumpbin获取依赖">通过dumpbin获取依赖</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dump_cmd</span> = <span class="string">"`"<span class="variable">$dumpbin</span>`" /dependents `"<span class="variable">$line</span>`" | findstr /I .dll | findstr /I /vi `"dump of file`" &gt; <span class="variable">$deptxt</span>"</span></span><br><span class="line">cmd /c <span class="string">"`"<span class="variable">$dump_cmd</span>`""</span></span><br></pre></td></tr></table></figure>
<h2 id="把依赖关系写入dot">把依赖关系写入dot</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">append <span class="string">"`"<span class="variable">$pename</span>`"[shape=box,fontname=consolas];"</span></span><br><span class="line">append <span class="string">"`"<span class="variable">$pename</span>`"-&gt;&#123;"</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$bFound</span> <span class="operator">-eq</span> <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    append <span class="string">"`"<span class="variable">$depen</span>`";"</span></span><br><span class="line">&#125;</span><br><span class="line">append <span class="string">"&#125;;"</span></span><br></pre></td></tr></table></figure>
<h2 id="graphviz画图-1">graphviz画图</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$draw</span> = <span class="string">"`"<span class="variable">$graph_dot</span>`" <span class="variable">$graphtxt</span> -Tpng  &gt; dependency_graph.png"</span> </span><br><span class="line"><span class="built_in">write-host</span> <span class="variable">$draw</span></span><br><span class="line">cmd /c <span class="string">"<span class="variable">$draw</span>"</span></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<h1 id="效果图">效果图</h1><p>分析了一下腾讯TM<br><img src="https://github.com/CodeJuan/pe_dependency/raw/master/dependency_graph11.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>上回实现了<a href="http://blog.decbug.com/2015/07/06/dependency_in_sln/">自动生成sln中各project依赖图</a>，可以分析一个VS solution里面每个project的依赖关系，但是这个太弱了。我需要exe、dll之间依赖图，所以只能继续想办法了。</p>
<h1 id="思路">思路</h1><ol>
<li>获取该软件目录下所有模块(exe和dll)</li>
<li>通过vs自带的dumpbin命令得到每个模块文件的依赖</li>
<li>画出graphviz的dot脚本</li>
<li>graphviz绘图</li>
</ol>]]>
    
    </summary>
    
      <category term="dependency" scheme="http://blog.decbug.com/tags/dependency/"/>
    
      <category term="graphviz" scheme="http://blog.decbug.com/tags/graphviz/"/>
    
      <category term="module" scheme="http://blog.decbug.com/tags/module/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在家里玩分布式(1)install centos]]></title>
    <link href="http://blog.decbug.com/2015/07/25/install_centos/"/>
    <id>http://blog.decbug.com/2015/07/25/install_centos/</id>
    <published>2015-07-24T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.455Z</updated>
    <content type="html"><![CDATA[<h1 id="扯淡">扯淡</h1><p>自己在家玩，买了一堆二手配件，整了4个台式机，打算</p>
<pre><code>-<span class="ruby"> 弄个scrapy爬数据
</span>-<span class="ruby"> 存到分布式内存数据库(redis吧)
</span>-<span class="ruby"> 再存到分布式文件系统(打算用fastdfs)
</span>-<span class="ruby"> 同时用storm流计算，弄个什么东西挖掘一下
</span>-<span class="ruby"> 最后用<span class="constant">PHP</span>展示</span>
</code></pre><p>也勉强算是跟大数据沾点边，几台机器都自动化起来，也get以下运维技能吧。</p>
<a id="more"></a>
<h1 id="centos">centos</h1><h2 id="下载iso">下载iso</h2><p><a href="http://www.centos.org/download/" target="_blank" rel="external">http://www.centos.org/download/</a></p>
<ul>
<li>minimal: The aim of this image is to install a very basic CentOS system, with the minimum of packages needed to have a functional system</li>
<li>dvd: 一般选择这个<br>下载x86_64</li>
</ul>
<h2 id="分区">分区</h2><p>/、/boot、/home、swap 就够了</p>
<h2 id="预装软件">预装软件</h2><p>选择开发者模式，可以把python jdk都装上</p>
<h2 id="设置自动登录">设置自动登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gdm/custom.conf</span><br></pre></td></tr></table></figure>
<p>写上<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[daemon]</span></span><br><span class="line"><span class="setting">AutomaticLoginEnable=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="setting">AutomaticLogin=<span class="value">你的用户名</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="启动网络">启动网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ntsysv</span><br><span class="line"><span class="comment"># TAB切换到OK</span></span><br></pre></td></tr></table></figure>
<p>修改<code>/etc/sysconfig/network-scripts/ifcfg-enp2s0</code>,设置为<code>onboot=yes</code></p>
<h2 id="安装启动SSH">安装启动SSH</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ssh&#10;service sshd start&#10;chkconfig sshd on</span><br></pre></td></tr></table></figure>
<h2 id="路由器设置固定IP">路由器设置固定IP</h2><ul>
<li>查看每台机器的MAC ifconfig</li>
<li>进入路由器管理页面，DHCP - 静态地址分配 - 绑定MAC和IP</li>
</ul>
<h2 id="安装vim_git">安装vim git</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim&#10;yum -y install git</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CodeJuan/config.git</span><br><span class="line">cp config/.vimrc ~/</span><br><span class="line">cat config/.gitconfig &gt;&gt; ~/.gitconfig</span><br></pre></td></tr></table></figure>
<h1 id="装爬虫">装爬虫</h1><h2 id="装pip">装pip</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://github.com/pypa/pip/archive/<span class="number">7.1</span>.<span class="number">0</span>.tar.gz</span><br><span class="line">tar zvxf <span class="number">7.1</span>.<span class="number">0</span>.tar.gz    <span class="comment">#解压文件</span></span><br><span class="line"><span class="built_in">cd</span> pip-<span class="number">7.1</span>.<span class="number">0</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="装scrapy">装scrapy</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install scrapy</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="扯淡">扯淡</h1><p>自己在家玩，买了一堆二手配件，整了4个台式机，打算</p>
<pre><code>-<span class="ruby"> 弄个scrapy爬数据
</span>-<span class="ruby"> 存到分布式内存数据库(redis吧)
</span>-<span class="ruby"> 再存到分布式文件系统(打算用fastdfs)
</span>-<span class="ruby"> 同时用storm流计算，弄个什么东西挖掘一下
</span>-<span class="ruby"> 最后用<span class="constant">PHP</span>展示</span>
</code></pre><p>也勉强算是跟大数据沾点边，几台机器都自动化起来，也get以下运维技能吧。</p>]]>
    
    </summary>
    
      <category term="system" scheme="http://blog.decbug.com/tags/system/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动生成sln中各project依赖图]]></title>
    <link href="http://blog.decbug.com/2015/07/06/dependency_in_sln/"/>
    <id>http://blog.decbug.com/2015/07/06/dependency_in_sln/</id>
    <published>2015-07-05T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.431Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>为了提高构建效率，需要分析sln中各project的依赖关系，将相互独立的project分配到不同机器并行构建。如果是一个个打开工程并查看dependency，然后画出依赖图，实在是太繁琐了。这就需要将这一些工作用脚本来实现。</p>
<p>写好的代码放在<a href="https://github.com/CodeJuan/dependency_in_sln" target="_blank" rel="external">https://github.com/CodeJuan/dependency_in_sln</a>，使用方法也很简单。</p>
<a id="more"></a>
<h1 id="思考">思考</h1><h2 id="采用的技术">采用的技术</h2><blockquote>
<p><code>Graphviz</code> is open source graph visualization software. Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. It has important applications in networking, bioinformatics,  software engineering, database and web design, machine learning, and in visual interfaces for other technical domains.</p>
<p><code>DOT</code> is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use.</p>
</blockquote>
<p>graphviz是画图神器，dot可以描述图，二者结合，就能画出各种神奇的图片</p>
<h2 id="步骤">步骤</h2><ol>
<li>解析sln，得出各工程的依赖关系</li>
<li>依据第1步的依赖关系生成dot文件</li>
<li>graphviz调用第2步的dot文件，生成图片</li>
</ol>
<h1 id="实施">实施</h1><h2 id="sln规律">sln规律</h2><p>先看一段例子<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Project("&#123;8BC9CEB8-8B4A-<span class="number">11D0-8D11</span>-00A0C91BC942&#125;") = "gtest_unittest", "gtest_unittest.vcxproj", "&#123;4D9FDFB5-986A-<span class="number">4139-823</span>C-F4EE0ED481A1&#125;"</span><br><span class="line">	ProjectSection(ProjectDependencies) = postProject</span><br><span class="line">		&#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; = &#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125;</span><br><span class="line">		&#123;C<span class="number">8F6C172-56</span>F2-4E76-B5FA-C<span class="number">3B423B31</span>BE7&#125; = &#123;C<span class="number">8F6C172-56</span>F2-4E76-B5FA-C<span class="number">3B423B31</span>BE7&#125;</span><br><span class="line">	EndProjectSection</span><br><span class="line">EndProject</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>project的开头</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Project</span>(<span class="string">"&#123;8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942&#125;"</span>) = <span class="string">"gtest_unittest"</span>, <span class="string">"gtest_unittest.vcxproj"</span>, <span class="string">"&#123;4D9FDFB5-986A-4139-823C-F4EE0ED481A1&#125;"</span> # 格式是<span class="keyword">Project</span>(<span class="string">"&#123;sln guid&#125;"</span>) = <span class="string">"project name"</span>, <span class="string">"relative path"</span>, <span class="string">"&#123;project guid&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>project的结尾</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EndProject</span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖关系</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProjectSection(ProjectDependencies) = postProject # 依赖了哪些工程的开头</span><br><span class="line">&#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; = &#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; #依赖工程的guid</span><br><span class="line">EndProjectSection # 依赖描述结尾</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>发现这样的规律，就能够很方便的解析了</p>
<h2 id="代码">代码</h2><p>由于是在windows上面解析，有同事不会用shell，于是只好用powershell重写一遍</p>
<p>遍历sln的每一行，进行分析，并写入dot<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"Project(`"&#123;*"</span>) <span class="comment">#如果匹配到了project开头</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$array</span> = <span class="variable">$line</span>.split(<span class="string">"`""</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$array</span>[<span class="number">3</span>]</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$array</span>[<span class="number">7</span>]</span><br><span class="line">    <span class="variable">$script:prj_name_list</span> += <span class="variable">$name</span></span><br><span class="line">    <span class="variable">$script:prj_id_list</span> += <span class="variable">$id</span></span><br><span class="line">    append <span class="string">"<span class="variable">$name</span>[shape=box,fontname=consolas];"</span> <span class="comment"># 在dot写入这个project的描述</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*ProjectSection(*"</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="variable">$name</span> = <span class="variable">$script:prj_name_list</span>[<span class="variable">$script:prj_name_list</span>.length - <span class="number">1</span>]</span><br><span class="line">       append <span class="string">"<span class="variable">$name</span>-&gt;&#123;"</span> <span class="comment"># 匹配到依赖了哪些工程的开头，开始写入依赖关系</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*EndProjectSection*"</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       append <span class="string">"&#125;;"</span> <span class="comment"># 匹配到了依赖描述结尾，写入&#125;;，完成了这个project的依赖描述</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*&#123;*&#125; = &#123;*&#125;*"</span>) <span class="comment"># 通过大括号识别是否是工程依赖</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$right</span> = <span class="variable">$line</span>.lastindexof(<span class="string">"&#125;"</span>)</span><br><span class="line">    <span class="variable">$left</span> = <span class="variable">$line</span>.lastindexof(<span class="string">"&#123;"</span>)</span><br><span class="line">    <span class="variable">$dep_id</span> = <span class="variable">$line</span>.substring(<span class="variable">$left</span>+<span class="number">1</span>, <span class="variable">$right</span>-<span class="variable">$left</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$script:prj_id_list_query</span>.length; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$cur_id</span> = <span class="variable">$script:prj_id_list_query</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$dep_id</span> <span class="operator">-like</span> <span class="string">"<span class="variable">$cur_id</span>"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$dep_name</span> = <span class="variable">$script:prj_name_list_query</span>[<span class="variable">$i</span>]</span><br><span class="line">            append <span class="string">"<span class="variable">$dep_name</span>;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成的dot">生成的dot</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;&#10;rankdir=BT;&#10;gtest[shape=box,fontname=consolas];&#10;gtest_main[shape=box,fontname=consolas];&#10;gtest_unittest[shape=box,fontname=consolas];&#10;gtest_unittest-&#62;&#123;&#10;gtest_prod_test;&#10;gtest;&#10;&#125;;&#10;gtest_prod_test[shape=box,fontname=consolas];&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="demo">demo</h2><p><img src="https://github.com/CodeJuan/dependency_in_sln/raw/master/gtest.sln.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>为了提高构建效率，需要分析sln中各project的依赖关系，将相互独立的project分配到不同机器并行构建。如果是一个个打开工程并查看dependency，然后画出依赖图，实在是太繁琐了。这就需要将这一些工作用脚本来实现。</p>
<p>写好的代码放在<a href="https://github.com/CodeJuan/dependency_in_sln">https://github.com/CodeJuan/dependency_in_sln</a>，使用方法也很简单。</p>]]>
    
    </summary>
    
      <category term="dependency" scheme="http://blog.decbug.com/tags/dependency/"/>
    
      <category term="dot" scheme="http://blog.decbug.com/tags/dot/"/>
    
      <category term="graphviz" scheme="http://blog.decbug.com/tags/graphviz/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo and pelican]]></title>
    <link href="http://blog.decbug.com/2015/06/22/Pelican_hexo/"/>
    <id>http://blog.decbug.com/2015/06/22/Pelican_hexo/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.463Z</updated>
    <content type="html"><![CDATA[<p>用pelican或hexo建一个漂亮的博客<br><a id="more"></a></p>
<h2 id="install">install</h2><h3 id="python_2-7">python 2.7</h3><p><a href="https://www.python.org/downloads/release/python-2710/" target="_blank" rel="external">https://www.python.org/downloads/release/python-2710/</a></p>
<h3 id="easy_install">easy_install</h3><p><a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">https://pypi.python.org/pypi/setuptools</a><br><a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">https://bootstrap.pypa.io/ez_setup.py</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Python27\python.exe ez_setup.py</span><br></pre></td></tr></table></figure></p>
<h3 id="pip">pip</h3><p>easy_install pip 提示找不到命令<br>设置环境变量 E:\Python27;E:\Python27\Scripts<br>其实新版的python都自带了pip，无需安装</p>
<h3 id="make">make</h3><p><a href="http://pan.baidu.com/s/1hqzJBBe" target="_blank" rel="external">http://pan.baidu.com/s/1hqzJBBe</a><br>解压到python目录</p>
<h3 id="pelican">pelican</h3><p>pip install pelican</p>
<h3 id="markdown">markdown</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown</span><br></pre></td></tr></table></figure>
<h3 id="quick-start">quick-start</h3><p><a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a><br>timezone Asia/Shanghai</p>
<h3 id="run">run</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pelican content&#10;cd ~/projects/yoursite/output&#10;python -m pelican.server</span><br></pre></td></tr></table></figure>
<h3 id="themes">themes</h3><p>下载themes<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pelican theme -i &#34;&#20320;&#21916;&#27426;&#30340;&#20027;&#39064;&#34;</span><br></pre></td></tr></table></figure></p>
<h1 id="hexo">hexo</h1><h2 id="install-1">install</h2><p><a href="https://nodejs.org/dist/v0.12.5/node-v0.12.5-x86.msi" target="_blank" rel="external">download</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo&#10;mkdir blog&#10;cd blog&#10;hexo init&#10;npm install&#10;hexo generate&#10;hexo server</span><br></pre></td></tr></table></figure></p>
<h2 id="theme">theme</h2><p>clone theme to folder <code>themes</code><br>_config.yml theme: jacman</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[用pelican或hexo建一个漂亮的博客]]>
    
    </summary>
    
      <category term="blog" scheme="http://blog.decbug.com/tags/blog/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[身边的过早优化事件]]></title>
    <link href="http://blog.decbug.com/2015/06/13/Premature_Optimization/"/>
    <id>http://blog.decbug.com/2015/06/13/Premature_Optimization/</id>
    <published>2015-06-13T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.435Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>组里小伙要对他们的代码进行优化，分析之后，觉得没有什么拖慢性能的代码，于是决定多开几个线程。我得知之后，与他进行了一番对话，终于说服了他在动手优化之前进行充分测量，找出瓶颈再有针对性的优化。</p>
<a id="more"></a>
<ul>
<li>对话如下：</li>
<li>我：你测量过了嘛？</li>
<li>他：什么是测量？</li>
<li>我：测量就是对你现有的代码profile，因为经验也好，直觉也罢，都是不可靠的，我们需要证据。从我目前看到的情况来看，我觉得你的数据不足以支持你进行多线程改造。</li>
<li>他：我已经看了三遍代码，没有发现优化的地方。</li>
<li>我：细节里藏着魔鬼，有时候我们的肉眼，我们的直觉都不可靠。所以我希望你能够测量之后再优化。</li>
<li>他：相信我，我觉得多线程是目前最好的解决方案。</li>
<li>此时我想，看来光讲道理行不通，得换个方式了，于是说道：好的，假定多线程是最好的解决方案。那么我想知道，你完成你的方案需要多长时间？能跟上我们版本的节奏吗？</li>
<li>他犹豫一下说道：大约需要5天吧，放心，我肯定不会拖后腿的。</li>
<li>我：好的，我相信你的能力，你肯定能把你的方案做好。但是，我有一个建议。如果我有一个简单的方案，只需要2～3个小时，就能得出结果。也许能解决你的问题，当然，也可能无法解决，你还得做你的多线程。但无论如何，这都算是一个投入非常少的方案，愿不愿意试一下？就算是无法解决，你也不算一无所获，至少掌握了profile的方法。</li>
<li>他：好的，试一下吧，如果不行，我还是要弄多线程的。你可要帮我检查一下我写的多线程代码。</li>
</ul>
<p>然后我把使用文档给他，他照着文档用性能分析工具跑了一下代码，果然找到了瓶颈代码，在一个循环里用一个vector对另外一个vector赋值，如你所知，会产生NNNN多次的构造析构，不慢才怪。修改之后，性能瞬间提升1倍，达成了目标。</p>
<p>坦白说，这是一个很低级的错误，我曾在编码tips里提过多次，然而并没有什么卵用。周围的小伙子们依旧如故，有时候真的挺失望的，一定要通过领导来施压，他们才愿意遵守吗？其实我特别不想通过行政手段来实现目标，低效且低级的手段。当然，这是另一件事，这里就不吐槽了。</p>
<h2 id="过早优化是万恶之源">过早优化是万恶之源</h2><ul>
<li>Donald Knuth曾经曰过：Don’t Cut Yourself: Code Optimization as a Double-Edged Sword。</li>
<li>中文翻译：过早优化是万恶之源。 </li>
<li>1  究竟要优化什么？ </li>
<li>2  选择一个正确的优化指标 </li>
<li>3  优化在刀刃上 </li>
<li>4  优化层次越高越好 </li>
<li>5  不要过早优化 </li>
<li>6  依赖性能分析，而不是直觉 </li>
<li>7  优化不是万金油 </li>
</ul>
<p>大道理，我们都懂，然而却过不好这一生。这句话我们经常听到，但是在实际工作中却对自己过于自信。</p>
<h2 id="总结">总结</h2><p>我的优化流程：</p>
<ul>
<li>先对当前代码profile，多采集几次，有足够的样本。</li>
<li>针对热点进行分析，尽量用小的改动，实现大的提升。</li>
<li>改一点，验证一点，并记录下优化后的数据。如此往复。</li>
</ul>
<h2 id="PS">PS</h2><ul>
<li>一直以来，这个小伙都比较傲娇，都不怎么听周围的人的意见，也不怎么听我的（后来才知道，因为之前有人谣传我是91年的，而他是89年的，所以他觉得我比较菜。。。。。）自从这件事之后，他对我的态度明显好多了。码农圈子还是要用技术说话啊，吹的天花乱坠都没用。</li>
<li>和别人沟通（也许可以算是辩论）的时候，一定面带微笑，降低语速，摆事实讲道理表明自己的意见。越是意见不一致，就越需要控制语气。舒适的对话，是达成共识的基础。</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>组里小伙要对他们的代码进行优化，分析之后，觉得没有什么拖慢性能的代码，于是决定多开几个线程。我得知之后，与他进行了一番对话，终于说服了他在动手优化之前进行充分测量，找出瓶颈再有针对性的优化。</p>]]>
    
    </summary>
    
      <category term="optimize" scheme="http://blog.decbug.com/tags/optimize/"/>
    
      <category term="profiler" scheme="http://blog.decbug.com/tags/profiler/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读程序员职业规划书有感]]></title>
    <link href="http://blog.decbug.com/2015/06/11/career_of_programmer/"/>
    <id>http://blog.decbug.com/2015/06/11/career_of_programmer/</id>
    <published>2015-06-11T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.483Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><img src="http://img4.douban.com/lpic/s28065947.jpg" alt=""></p>
<p>最近被挖猎几次，虽说心动不已，但我年事已高，不复当年之热血，故对未来的职业规划愈发迷茫，愈发谨慎。<br>恰巧得到<a href="http://weibo.com/easy" target="_blank" rel="external">@Easy</a>兄惠赠的《程序员必读的职业规划书》，拜读之下有所收获。</p>
<a id="more"></a>
<h2 id="跳槽">跳槽</h2><blockquote>
<p>不要因为“现在很差”而跳槽，要为“未来更好”而跳槽</p>
</blockquote>
<p>就我个人而言，每次跳槽都是一次很艰难的决定，因为有得必有失。有时候是为了更多的金钱放弃现在轻松不加班的工作；有时候是为了get新技能而放弃现在丰厚的薪水。但无论如何，我们的得到的都比失去的多，也就是<code>我现在的决定让我的未来更好</code>，也许这个<code>好</code>需要很长一段时间才能体现出来。</p>
<p>现在的工作各方面都挺好，可是对于我个人的技术能力提升的空间已经不大。作为想努力成为大牛的人，我期望能补齐我的短板，丰富我的技能树。也就是说想要一份更有挑战的工作，薪水不要比现在差就好。</p>
<h2 id="秀出自己的肌肉">秀出自己的肌肉</h2><p>虽然周围的朋友都决定我水平还行，可我还是觉得自己比较菜，越学习，就觉得自己越菜，我经常说自己还是菜鸟，要学的东西还很多<br><img src="http://ww3.sinaimg.cn/large/8cad9f13gw1es42gkkwvjj20gk090mxi.jpg" alt=""></p>
<p>然而在求职的时候，却容不得半点谦虚，要把自己的能力都展现出来，才能让雇主给出合适的薪水。像我们猿类都比较低调，陌生人比较难发现我们的亮点。这时候就需要<code>构建个人品牌</code>，把自己的优势都展示出来。只是空口无凭，雇主如何才能相信你？<br>这个时候就需要博客，博客是最好的简历，曾做过什么，解决过什么，玩过什么，学了什么，都可以通通记录下来。</p>
<ul>
<li>自己可以常常回顾，温故知新；</li>
<li>可以把自己的能力，经验以及业余时间的研究都展示出来；</li>
<li>锻炼自己的写作沟通能力，<a href="http://www.shubhro.com/2014/12/27/software-engineers-should-write/" target="_blank" rel="external">程序员也要多写作</a>；</li>
<li>晚上下班还愿意做总结的人，技术一般不会太差；</li>
<li>也许我的博客能帮到别人呢？我经常拜读大牛们博客，有时真的大有收获。虽然我水平离大牛很远，但我解决的问题可能别人也会遇到，看我的博客之后就能少走点弯路。</li>
</ul>
<h2 id="总结">总结</h2><p>工作不是一件容易的事，跳槽则更难。每一个决定都可能影响未来几年的职业生涯，我们无法预见未来，我们只能把握当下，努力提升自己的能力，总归是不差的。</p>
<blockquote>
<p>当你的能力足够强，必然会有一份满意的工作，区别只是在哪家公司干而已</p>
</blockquote>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p><img src="http://img4.douban.com/lpic/s28065947.jpg" alt=""></p>
<p>最近被挖猎几次，虽说心动不已，但我年事已高，不复当年之热血，故对未来的职业规划愈发迷茫，愈发谨慎。<br>恰巧得到<a href="http://weibo.com/easy">@Easy</a>兄惠赠的《程序员必读的职业规划书》，拜读之下有所收获。</p>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="programmer" scheme="http://blog.decbug.com/tags/programmer/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动调用windbg分析dump]]></title>
    <link href="http://blog.decbug.com/2015/04/15/auto_analyze_dump/"/>
    <id>http://blog.decbug.com/2015/04/15/auto_analyze_dump/</id>
    <published>2015-04-15T15:30:09.000Z</published>
    <updated>2015-10-11T06:22:10.027Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近开始整并发，项目组的年轻人对共享资源的控制不够熟悉，导致经常core dump。虽然我在文档里写了，用windbg打开dmp，然后输入<code>!analyze -v</code>就能看到挂在哪一行，但是经常有小朋友来问命令怎么用。</p>
<p>老夫一怒之下，就开始反思。是我的文档写的不够清晰？还是操作太繁琐了？其实都不是，说白了就是现在的年轻人都太懒了。</p>
<p>竟然都这么懒惰，那么我只好想出个更简便的方法来分析dump，一键式傻瓜操作，这样应该可以了吧。</p>
<a id="more"></a>
<h2 id="初稿">初稿</h2><p>通过powershell启动windbg，然后调用sendwait输入<code>!analyze -v</code></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(<span class="string">"'Microsoft.VisualBasic"</span>)</span><br><span class="line">start-process windbg.exe -z <span class="string">"dump file 路径"</span></span><br><span class="line"><span class="comment"># &#123;~&#125;表示ENTER </span></span><br><span class="line">[System.Windows.Forms.SendKeys]::SendWait(<span class="string">"!analyze -v&#123;~&#125;"</span>)</span><br></pre></td></tr></table></figure>
<p>通过模拟键盘消息实现，在输入过程中必须保持焦点在windbg上，不允许动键盘鼠标，不够人性化。</p>
<p>还需要进一步完善</p>
<h2 id="完善">完善</h2><p>微软关于windbg命令行的说明<a href="https://msdn.microsoft.com/zh-cn/library/ff561306" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/ff561306</a></p>
<h3 id="initial_command_-c">initial command -c</h3><p><code>-c command</code>可以给windbg设置启动后的初始命令。</p>
<ul>
<li>Specifies the initial debugger command to run at start-up. </li>
<li>Multiple commands can be separated with semicolons.</li>
</ul>
<p>既然可以设置命令，那么就可以抛弃powershell发键盘消息的方式了，直接写个batch搞定。</p>
<p>脚本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;&#23433;&#35013;&#30446;&#24405;\windbg.exe&#34; -z &#34;dump file &#36335;&#24452;&#34; -c &#34;!analyze -v&#34;</span><br></pre></td></tr></table></figure>
<h3 id="logo">logo</h3><p>有时候需要保存log，以前的做法是选中windbg的output，然后CTRL+C，CTRL+V到一个文本里。多次键盘鼠标操作，太麻烦，看看能否有命令行可以实现。</p>
<p>找到一个<code>-log{o|a} LogFile</code></p>
<ul>
<li>Begins logging information to a log file. </li>
<li>If the specified log file already exists, it will be overwritten if -logo is used. </li>
<li>If loga is used, the output will be appended to the file. For more details, see Keeping a Log File.</li>
</ul>
<p>脚本升级为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;&#23433;&#35013;&#30446;&#24405;\windbg.exe&#34; -z &#34;dump file &#36335;&#24452;&#34; -c &#34;!analyze -v&#34; -logo &#34;dump file &#36335;&#24452;.log&#34;</span><br></pre></td></tr></table></figure>
<h2 id="效果">效果</h2><p>每人每天分析3次dump，每次敲命令+拷贝log需要花1~3分钟的时间，团队里共有150个开发，一天就能节省150人<em>3次</em>2分钟=900分钟。</p>
<p>很可观的收益啊，不由得老怀大慰。</p>
<p>程序员就是要从机械繁琐的工作中超脱出来，投入到更有意义的事情上去。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近开始整并发，项目组的年轻人对共享资源的控制不够熟悉，导致经常core dump。虽然我在文档里写了，用windbg打开dmp，然后输入<code>!analyze -v</code>就能看到挂在哪一行，但是经常有小朋友来问命令怎么用。</p>
<p>老夫一怒之下，就开始反思。是我的文档写的不够清晰？还是操作太繁琐了？其实都不是，说白了就是现在的年轻人都太懒了。</p>
<p>竟然都这么懒惰，那么我只好想出个更简便的方法来分析dump，一键式傻瓜操作，这样应该可以了吧。</p>]]>
    
    </summary>
    
      <category term="dump" scheme="http://blog.decbug.com/tags/dump/"/>
    
      <category term="powershell" scheme="http://blog.decbug.com/tags/powershell/"/>
    
      <category term="windbg" scheme="http://blog.decbug.com/tags/windbg/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux C++性能调优笔记]]></title>
    <link href="http://blog.decbug.com/2015/03/27/gprof_sprof_perf/"/>
    <id>http://blog.decbug.com/2015/03/27/gprof_sprof_perf/</id>
    <published>2015-03-27T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.447Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>上周领导在群里问谁会linux C开发，我曾在业余时间自己捣鼓过，于是回答略懂。这周就被派到别的项目组紧急支援开发。大体工作是开发一个so供前台调用，开发过程中对makefile、跨平台的理解越发深刻了。相比于自娱自乐，正规开发更能涨知识。</p>
<p>此后数据量较大，很快就出现性能问题，作为折腾砖家，我当仁不让地接下性能调优的活。</p>
<p>每当遇到难题，都是我比较开心的时候，因为又是一次get新技能的好机会。</p>
<a id="more"></a>
<h2 id="profiler">profiler</h2><p>当系统的性能不能满足要求的时候，便要对其进行调优。方法有千千万万种，但无论如何，我们都要想办法精确识别到瓶颈，然后有的放矢进行优化。如何精确识别呢？这个时候profiler就闪亮登场了。</p>
<p><em>尝试了很多profiler之后，最终还是决定使用google perf tools</em></p>
<h3 id="linux常用profiler">linux常用profiler</h3><p>gprofile &amp; perf &amp; sprof</p>
<h4 id="gprofile">gprofile</h4><p>老牌劲旅，长久不衰，很多人用，功能也比较强大，使用简单。</p>
<ul>
<li>在编译时加入参数 -pg就可以打开GProfile的开关</li>
<li>运行你的可执行文件，结束后会生成一个gmon.out</li>
<li>分析结果：gprof -b ‘你的可执行文件名’ gmon.out</li>
<li>会按函数热度进行排序，百分比越大的函数就越热，可以针对TOPN函数进行分析。</li>
</ul>
<p>但是由于我开发的是一个so，被其他进程调用。虽然在so的编译时加上了-pg，并且通过标志位将进程用exit退出，但是还是没有生成gmon.out，不知道怎么回事，姑且先放下，有机会再研究。</p>
<h4 id="perf">perf</h4><p>perf功能很强大，而且被收录到内核(2.6.31)，可以记录page fault， cache miss，看起来真的很不错。</p>
<p>可惜我们的目标机内核版本太老，2.6.17，stackoverflow上有人回答说无法安装，</p>
<blockquote>
<p>Q: Does the old linux kernel support perf.</p>
<p>A: No, it does not. The performance counters subsystem has undergone significant recent changes, and you are exceedingly unlikely to get perf working on any kernel below 2.6.31.</p>
</blockquote>
<p>只好就此作罢。以后有机会再尝试。</p>
<h4 id="sprof">sprof</h4><p>继续搜索’Profiling shared library’，找到sprof。看了下简介，大概能满足需求，先拿来用用。</p>
<p>首先创建一个so，里边写一段比较耗时的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "lib.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::work(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">while</span>(a &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		b += a;</span><br><span class="line">		++a;</span><br><span class="line">		v.push_back(a);</span><br><span class="line">		sleep(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"work"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ll : libso</span><br><span class="line">	g++ -L ./ -Wall -o test main.cpp -llib</span><br><span class="line"></span><br><span class="line">libso : libo</span><br><span class="line">	g++ -shared -o liblib.so liblib.o</span><br><span class="line"></span><br><span class="line">libo : lib.cpp</span><br><span class="line">	g++ -Wall -Werror -fpic -c lib.cpp -o liblib.o</span><br><span class="line"></span><br><span class="line"><span class="title">clean:</span></span><br><span class="line">	rm -f test</span><br><span class="line"></span><br><span class="line"><span class="comment"># export LD_LIBRARY_PATH=/home/username/foo:$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set the environment variable LD_PROFILE to the name of the shared obj</span></span><br><span class="line"><span class="built_in">export</span> LD_PROFILE=my_obj</span><br><span class="line"><span class="comment">#run your application</span></span><br><span class="line">my_app</span><br><span class="line"><span class="comment">#this should create a file /var/tmp/my_sobj.profile</span></span><br><span class="line"><span class="comment">#now run sprof</span></span><br><span class="line">sprof my_sobj my_sobj.profile</span><br></pre></td></tr></table></figure>
<p>查了一下，sprof只能采集可执行文件的性能，无法采集so的，还是需要放弃。</p>
<h3 id="gperf-tools">gperf-tools</h3><p>内网的文章带不出来，只能简单回忆，记录一下。<br>继续折腾之下，找到了google-perf-tools，功能很强大，可以采集so的性能，还能采集内存。</p>
<p>决定结合gtest，用采用单元测试来测性能内存。</p>
<h4 id="为什么要用单元测试呢？">为什么要用单元测试呢？</h4><ol>
<li><p>以前的做法比较麻烦。需要运行服务，然后kill平台进程等一系列操作。</p>
</li>
<li><p>方便。项目已有单元测试框架，可以根据我们的需要自由组合场景，对外部环境依赖较小。</p>
</li>
<li><p>运行快，几分钟就能看到结果。及时反馈，人脑在不断反馈的刺激下，会更专注。</p>
</li>
<li><p>如果使用得当，可能做到自动化。</p>
</li>
</ol>
<h4 id="安装libunwind">安装libunwind</h4><h4 id="安装gperftools">安装gperftools</h4><h4 id="设置环境变量">设置环境变量</h4><p>CPUPROFILE; exprot</p>
<h4 id="enable单元测试">enable单元测试</h4><h4 id="改makefile">改makefile</h4><p>在单元测试可执行文件tester的makefile和我们so的makefile加上</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="constant">CXXFLAGS</span> += -g</span><br><span class="line"></span><br><span class="line"><span class="constant">LIBRARY</span> += profiler</span><br></pre></td></tr></table></figure>
<p>然后make</p>
<h4 id="写测试代码">写测试代码</h4><ol>
<li><p>增加一个TEST，执行需要测性能的代码</p>
</li>
<li><p>在setup里加上profilerStart</p>
</li>
<li><p>在teardown加上profilerstop</p>
</li>
</ol>
<h4 id="运行，然后分析结果">运行，然后分析结果</h4><p>用 pprof —text (PATH OF TESTER) (CPUPROFILER执行的log)，得到文本格式的分析，包括每个函数的时间占有比例</p>
<p>用 pprof —callgrind可以生成图形化，很炫目。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>上周领导在群里问谁会linux C开发，我曾在业余时间自己捣鼓过，于是回答略懂。这周就被派到别的项目组紧急支援开发。大体工作是开发一个so供前台调用，开发过程中对makefile、跨平台的理解越发深刻了。相比于自娱自乐，正规开发更能涨知识。</p>
<p>此后数据量较大，很快就出现性能问题，作为折腾砖家，我当仁不让地接下性能调优的活。</p>
<p>每当遇到难题，都是我比较开心的时候，因为又是一次get新技能的好机会。</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://blog.decbug.com/tags/C/"/>
    
      <category term="linux" scheme="http://blog.decbug.com/tags/linux/"/>
    
      <category term="optimization" scheme="http://blog.decbug.com/tags/optimization/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[pandoc---markdown转换利器]]></title>
    <link href="http://blog.decbug.com/2015/03/10/mark2html/"/>
    <id>http://blog.decbug.com/2015/03/10/mark2html/</id>
    <published>2015-03-10T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.427Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>项目要发布一堆开发文档，并支持快速更新。经过我的不断安利，领导同意用markdown（<em>感觉好有成就感啊</em>）。<br>经过一番探索，决定采用<a href="http://johnmacfarlane.net/pandoc/index.html" target="_blank" rel="external">pandoc</a>，因为功能真的很强大，请看官网介绍</p>
<blockquote>
<p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert documents in markdown, reStructuredText, textile, HTML, DocBook, LaTeX, MediaWiki markup, TWiki markup, OPML, Emacs Org-Mode, Txt2Tags, Microsoft Word docx, EPUB, or Haddock markup to</p>
<pre><code>-<span class="ruby"> <span class="constant">HTML</span> <span class="symbol">formats:</span> <span class="constant">XHTML</span>, <span class="constant">HTML5</span>, <span class="keyword">and</span> <span class="constant">HTML</span> slide shows using <span class="constant">Slidy</span>, reveal.js, <span class="constant">Slideous</span>, <span class="constant">S5</span>, <span class="keyword">or</span> <span class="constant">DZSlides</span>.
</span>-<span class="ruby"> <span class="constant">Word</span> processor <span class="symbol">formats:</span> <span class="constant">Microsoft</span> <span class="constant">Word</span> docx, <span class="constant">OpenOffice</span>/<span class="constant">LibreOffice</span> <span class="constant">ODT</span>, <span class="constant">OpenDocument</span> <span class="constant">XML</span>
</span>-<span class="ruby"> <span class="constant">Ebooks</span><span class="symbol">:</span> <span class="constant">EPUB</span> version <span class="number">2</span> <span class="keyword">or</span> <span class="number">3</span>, <span class="constant">FictionBook2</span>
</span>-<span class="ruby"> <span class="constant">Documentation</span> <span class="symbol">formats:</span> <span class="constant">DocBook</span>, <span class="constant">GNU</span> <span class="constant">TexInfo</span>, <span class="constant">Groff</span> man pages, <span class="constant">Haddock</span> markup
</span>-<span class="ruby"> <span class="constant">Page</span> layout <span class="symbol">formats:</span> <span class="constant">InDesign</span> <span class="constant">ICML</span>
</span>-<span class="ruby"> <span class="constant">Outline</span> <span class="symbol">formats:</span> <span class="constant">OPML</span>
</span>-<span class="ruby"> <span class="constant">TeX</span> <span class="symbol">formats:</span> <span class="constant">LaTeX</span>, <span class="constant">ConTeXt</span>, <span class="constant">LaTeX</span> <span class="constant">Beamer</span> slides
</span>-<span class="ruby"> <span class="constant">PDF</span> via <span class="constant">LaTeX</span>
</span>-<span class="ruby"> <span class="constant">Lightweight</span> markup <span class="symbol">formats:</span> <span class="constant">Markdown</span>, reStructuredText, <span class="constant">AsciiDoc</span>, <span class="constant">MediaWiki</span> markup, <span class="constant">DokuWiki</span> markup, <span class="constant">Emacs</span> <span class="constant">Org</span>-<span class="constant">Mode</span>, <span class="constant">Textile</span>
</span>-<span class="ruby"> <span class="constant">Custom</span> <span class="symbol">formats:</span> custom writers can be written <span class="keyword">in</span> lua.</span>
</code></pre></blockquote>
<a id="more"></a>
<p>此后再折腾了一下，打算不转PDF，还是转换成html比较好。<br>优势在于</p>
<ol>
<li><p>html浏览起来很方便，不需要装其他软件。</p>
</li>
<li><p>转PDF要安装引擎<a href="http://miktex.org/" target="_blank" rel="external">MiKTeX</a>。</p>
</li>
<li><p>转换速度快，即时反馈。</p>
</li>
<li><p>pandoc对中文的支持还是不够理想。</p>
</li>
<li><p>随时可以发布。</p>
</li>
</ol>
<h1 id="下载安装">下载安装</h1><p><a href="http://johnmacfarlane.net/pandoc/installing.html" target="_blank" rel="external">官网</a></p>
<p><a href="https://github.com/jgm/pandoc/releases" target="_blank" rel="external">release</a></p>
<p>当前最新版是1.13.2。</p>
<p>学习资料<br><a href="http://zhouyichu.com/misc/Pandoc.html" target="_blank" rel="external">神器Pandoc的安装与使用</a><br><a href="https://github.com/tzengyuxio/pages" target="_blank" rel="external">tzengyuxio</a></p>
<h1 id="转html">转html</h1><p>写了一个脚本，封装了一下，另外加了点css，代码放在<a href="https://github.com/CodeJuan/pandoc" target="_blank" rel="external">https://github.com/CodeJuan/pandoc</a><br>下一步计划把slide也美化一下，以后就可以抛弃PPT了。</p>
<pre><code class="bat">::脚本内容
pandoc -s --self-contained -c style.css "%<span class="number">1</span>" -o "%<span class="number">2</span>.html" --toc
</code></pre>
<ul>
<li><code>--self-contained</code>表示将图片嵌入到页面</li>
<li><code>-c</code> 表示使用style.css，用的是</li>
<li><code>--toc</code>表示生成目录(table of contents)</li>
</ul>
<h2 id="调用方法">调用方法</h2><pre><code class="bat">::脚本内容
html.bat &quot;input_file_name&quot; &quot;output_name&quot;
</code></pre>
<h1 id="改css">改css</h1><p>看下效果，感觉比较一般，打算再修改一下</p>
<h2 id="修改前的效果">修改前的效果</h2><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/pandoc/css_origin.png" alt="修改前的效果"></p>
<h2 id="修改后的效果">修改后的效果</h2><p>主要修改点</p>
<ol>
<li><p>body字体，代码字体</p>
</li>
<li><p>body居中</p>
</li>
<li><p>图片居中</p>
</li>
<li><p>table加border</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/pandoc/css_new.png" alt="修改后的效果"></p>
<h2 id="详情请查看">　详情请查看</h2><p><a href="https://github.com/CodeJuan/pandoc/blob/master/style.css" target="_blank" rel="external">css提交记录</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>项目要发布一堆开发文档，并支持快速更新。经过我的不断安利，领导同意用markdown（<em>感觉好有成就感啊</em>）。<br>经过一番探索，决定采用<a href="http://johnmacfarlane.net/pandoc/index.html">pandoc</a>，因为功能真的很强大，请看官网介绍</p>
<blockquote>
<p>If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert documents in markdown, reStructuredText, textile, HTML, DocBook, LaTeX, MediaWiki markup, TWiki markup, OPML, Emacs Org-Mode, Txt2Tags, Microsoft Word docx, EPUB, or Haddock markup to</p>
<pre><code>-<span class="ruby"> <span class="constant">HTML</span> <span class="symbol">formats:</span> <span class="constant">XHTML</span>, <span class="constant">HTML5</span>, <span class="keyword">and</span> <span class="constant">HTML</span> slide shows using <span class="constant">Slidy</span>, reveal.js, <span class="constant">Slideous</span>, <span class="constant">S5</span>, <span class="keyword">or</span> <span class="constant">DZSlides</span>.
</span>-<span class="ruby"> <span class="constant">Word</span> processor <span class="symbol">formats:</span> <span class="constant">Microsoft</span> <span class="constant">Word</span> docx, <span class="constant">OpenOffice</span>/<span class="constant">LibreOffice</span> <span class="constant">ODT</span>, <span class="constant">OpenDocument</span> <span class="constant">XML</span>
</span>-<span class="ruby"> <span class="constant">Ebooks</span><span class="symbol">:</span> <span class="constant">EPUB</span> version <span class="number">2</span> <span class="keyword">or</span> <span class="number">3</span>, <span class="constant">FictionBook2</span>
</span>-<span class="ruby"> <span class="constant">Documentation</span> <span class="symbol">formats:</span> <span class="constant">DocBook</span>, <span class="constant">GNU</span> <span class="constant">TexInfo</span>, <span class="constant">Groff</span> man pages, <span class="constant">Haddock</span> markup
</span>-<span class="ruby"> <span class="constant">Page</span> layout <span class="symbol">formats:</span> <span class="constant">InDesign</span> <span class="constant">ICML</span>
</span>-<span class="ruby"> <span class="constant">Outline</span> <span class="symbol">formats:</span> <span class="constant">OPML</span>
</span>-<span class="ruby"> <span class="constant">TeX</span> <span class="symbol">formats:</span> <span class="constant">LaTeX</span>, <span class="constant">ConTeXt</span>, <span class="constant">LaTeX</span> <span class="constant">Beamer</span> slides
</span>-<span class="ruby"> <span class="constant">PDF</span> via <span class="constant">LaTeX</span>
</span>-<span class="ruby"> <span class="constant">Lightweight</span> markup <span class="symbol">formats:</span> <span class="constant">Markdown</span>, reStructuredText, <span class="constant">AsciiDoc</span>, <span class="constant">MediaWiki</span> markup, <span class="constant">DokuWiki</span> markup, <span class="constant">Emacs</span> <span class="constant">Org</span>-<span class="constant">Mode</span>, <span class="constant">Textile</span>
</span>-<span class="ruby"> <span class="constant">Custom</span> <span class="symbol">formats:</span> custom writers can be written <span class="keyword">in</span> lua.</span>
</code></pre></blockquote>]]>
    
    </summary>
    
      <category term="html" scheme="http://blog.decbug.com/tags/html/"/>
    
      <category term="pandoc" scheme="http://blog.decbug.com/tags/pandoc/"/>
    
      <category term="slide" scheme="http://blog.decbug.com/tags/slide/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习R语言]]></title>
    <link href="http://blog.decbug.com/2015/03/04/learning_rlang/"/>
    <id>http://blog.decbug.com/2015/03/04/learning_rlang/</id>
    <published>2015-03-04T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.471Z</updated>
    <content type="html"><![CDATA[<h1 id="安装">安装</h1><ol>
<li><p><a href="http://cran.r-project.org/mirrors.html" target="_blank" rel="external">mirriors</a></p>
</li>
<li><p>select China， <a href="http://mirror.bjtu.edu.cn/cran" target="_blank" rel="external">bjtu</a></p>
</li>
<li><p><a href="http://mirror.bjtu.edu.cn/cran/sources.html" target="_blank" rel="external">resouce</a> , current version is <a href="http://mirror.bjtu.edu.cn/cran/src/base/R-3/R-3.1.2.tar.gz" target="_blank" rel="external">R-3.1.2</a></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>extract,    <code>sudo tar xf r-3.1.2.tar.gz -C extract/</code></p>
</li>
<li><p>view the build document,<code>vim INSTALL</code></p>
</li>
<li><p><code>./configure</code>,  <em>error: No F77 compiler found</em>。<a href="http://laymantech.blogbus.com/logs/80761679.html" target="_blank" rel="external">学自这里http://laymantech.blogbus.com/logs/80761679.html</a></p>
<p>  会产生错误：configure: error: No F77 compiler found</p>
<p>  R语言需要fortran compiler，也就是说， 在上面尝试寻找了若干种Fortran 编译器未果之后，提示你没有安装任何一种可以使用的fortran 77 编译器。随便装个gfortran就行了。</p>
<p>  $ sudo apt-get install gfortran</p>
<p>  再次运行./configure</p>
<p>  $ ./configure</p>
<p>  会产生错误：configure: error: con—with-readline=yes (default) and headers/libs are not available</p>
<p>  首先检查是否安装readline.</p>
<p>  $ sudo apt-get install readline-common</p>
<p>  $ ./configure —with-readline=no</p>
<p>  会出现错误：configure: error: —with-x=yes (default) and X11 headers/libs are no t available</p>
<p>  $ ./configure —with-x=no —with-readline=no</p>
<p>  配置通过，但是会产生如下warning：</p>
<p>  configure: WARNING: you cannot build DVI versions of the R manuals</p>
<p>  configure: WARNING: you cannot build DVI versions of all the help pages</p>
<p>  configure: WARNING: you cannot build info or HTML versions of the R manuals</p>
<p>  configure: WARNING: you cannot build PDF versions of the R manuals</p>
<p>  configure: WARNING: you cannot build PDF versions of all the help pages</p>
<p>  这是缺少生成相应格式manuals的插件，如果有需要可以依次安装。</p>
</li>
</ol>
<ol>
<li>sudo make，安装完毕。</li>
</ol>
<h1 id="简单试用">简单试用</h1><h3 id=""> </h3><p>cd 到bin，sudo ./R，进入R控制台<br>按照<a href="http://developer.51cto.com/art/201305/393121.htm试用一下" target="_blank" rel="external">http://developer.51cto.com/art/201305/393121.htm试用一下</a><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">'quantmod'</span>) <span class="preprocessor"># 安装quantmod包 ，</span></span><br></pre></td></tr></table></figure></p>
<p>会提示选择哪个镜像，19号beijing离我最近，于是输入19</p>
<p>q()是退出</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装">安装</h1><ol>
<li><p><a href="http://cran.r-project.org/mirrors.html">mirriors</a></p>
</li>
<li><p>select China， <a href="http://mirror.bjtu.edu.cn/cran">bjtu</a></p>
</li>
<li><p><a href="http://mirror.bjtu.edu.cn/cran/sources.html">resouce</a> , current version is <a href="http://mirror.bjtu.edu.cn/cran/src/base/R-3/R-3.1.2.tar.gz">R-3.1.2</a></p>
</li>
</ol>]]>
    
    </summary>
    
      <category term="R" scheme="http://blog.decbug.com/tags/R/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[万网免费主机搭博客]]></title>
    <link href="http://blog.decbug.com/2015/01/31/netcn_zblog/"/>
    <id>http://blog.decbug.com/2015/01/31/netcn_zblog/</id>
    <published>2015-01-31T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.451Z</updated>
    <content type="html"><![CDATA[<p>最近万网搞活动，域名29，虚拟主机免费，有小朋友动了建博客的念头，于是申请好了域名、虚拟主机。但是不知道后续该如何处理，乐于助人的我自然是要帮他一把的。</p>
<h2 id="选框架">选框架</h2><p>小朋友选的是windows主机，简单搜索了一下，zblog貌似不错，好吧，就选它了，官网链接<a href="http://www.zblogcn.com/" target="_blank" rel="external">http://www.zblogcn.com/</a>，下载ASP版<a href="http://www.zblogcn.com/zblog/" target="_blank" rel="external">http://www.zblogcn.com/zblog/</a>，当前最新版的Z-Blog 2.2 Prism Build 140101。</p>
<p>解压后会看到一个release文件夹，由于后续要将release文件夹里的文件放在主机根目录，所以还要再压缩一次，格式还必须是rar，如下图所示<br><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/zblog/zlog_rar.png" alt=""></p>
<a id="more"></a>
<h2 id="通过FTP上传安装包">通过FTP上传安装包</h2><p>把刚才压缩的rar，上传到FTP根目录，上传方法<a href="http://help.www.net.cn/KnowledgeDetail.html?knowledgeId=5868398&amp;categoryId=8311136" target="_blank" rel="external">http://help.www.net.cn/KnowledgeDetail.html?knowledgeId=5868398&amp;categoryId=8311136</a></p>
<h2 id="解压到根目录">解压到根目录</h2><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/zblog/unzip.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/zblog/extract2root.png" alt=""></p>
<p>如果不解压到根目录，也是可以的，只是访问的时候不能直接输入域名了，将会是<code>你的域名/你的目录</code></p>
<h2 id="安装ZBLOG">安装ZBLOG</h2><p>打开<a href="http://你的域名/zb_install/default.asp(`万网的免费主机要备案，如果不备案，此时的网址就输入临时域名即可，临时域名还是在站点信息查询`)。" target="_blank" rel="external">http://你的域名/zb_install/default.asp(`万网的免费主机要备案，如果不备案，此时的网址就输入临时域名即可，临时域名还是在站点信息查询`)。</a></p>
<h2 id="效果图">效果图</h2><p>一路next，完成。效果如图</p>
<p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/zblog/blog.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近万网搞活动，域名29，虚拟主机免费，有小朋友动了建博客的念头，于是申请好了域名、虚拟主机。但是不知道后续该如何处理，乐于助人的我自然是要帮他一把的。</p>
<h2 id="选框架">选框架</h2><p>小朋友选的是windows主机，简单搜索了一下，zblog貌似不错，好吧，就选它了，官网链接<a href="http://www.zblogcn.com/">http://www.zblogcn.com/</a>，下载ASP版<a href="http://www.zblogcn.com/zblog/">http://www.zblogcn.com/zblog/</a>，当前最新版的Z-Blog 2.2 Prism Build 140101。</p>
<p>解压后会看到一个release文件夹，由于后续要将release文件夹里的文件放在主机根目录，所以还要再压缩一次，格式还必须是rar，如下图所示<br><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/zblog/zlog_rar.png" alt=""></p>]]>
    
    </summary>
    
      <category term="virtual" scheme="http://blog.decbug.com/tags/virtual/"/>
    
      <category term="zblog" scheme="http://blog.decbug.com/tags/zblog/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DebugDiag使用指南]]></title>
    <link href="http://blog.decbug.com/2015/01/18/debugdiag/"/>
    <id>http://blog.decbug.com/2015/01/18/debugdiag/</id>
    <published>2015-01-18T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.487Z</updated>
    <content type="html"><![CDATA[<h1 id="DebugDiag使用指南">DebugDiag使用指南</h1><h2 id="Foreword">Foreword</h2><p>一直都是用windbg进行调试，但是主要通过CLI操作，现在的小朋友被GUI带坏了，都说学不会用。为此，还得找个略微简单的工具。<br>恰好找到了<code>DebugDiag</code>，据说很简单，微软原文如下：</p>
<blockquote>
<p>The right debugging tool can dramatically simplify the isolation of these problem s and the provision of solutions. There are several types of these issues for which the Debug Diagnostic Tool  is a better choice than other debugging tools</p>
<p>Using the Windows core debuggers (Windbg.exe or Cdb.exe) for post-mortem analysis is a time consuming process and requires many debugging skills.</p>
</blockquote>
<p>试用之后，果然比较简单，功能也很强大。这么个挺好用的工具，还是值得安利一下的。鉴于帮助文档大多是英文版，我就顺手把<code>How to Use the Debug Diagnostic Tool (DebugDiag) to Debug User Mode Processes</code>翻译一下。</p>
<a id="more"></a>
<p>原文链接:<a href="http://msdn.microsoft.com/en-us/library/ff420662.aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ff420662.aspx</a></p>
<p>以上。</p>
<h2 id="简介">简介</h2><p>当用户面临程序稳定性及性能问题（如崩溃、挂死、不明觉厉的高内存占用）时，最佳补救措施就是在第一时间分析此程序的进程。不过，某些应用服务（如 IIS、Exchange、SQL Server、COM+、Biztalk）在运行出错和重启时，并没有提供UI信息，这样就增加了troubleshooting的难度。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "lib.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::work(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">while</span>(a &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		b += a;</span><br><span class="line">		++a;</span><br><span class="line">		v.push_back(a);</span><br><span class="line">		sleep(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"work"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ll : libso</span><br><span class="line">	g++ -L ./ -Wall -o test main.cpp -llib</span><br><span class="line"></span><br><span class="line">libso : libo</span><br><span class="line">	g++ -shared -o liblib.so liblib.o</span><br><span class="line"></span><br><span class="line">libo : lib.cpp</span><br><span class="line">	g++ -Wall -Werror -fpic -c lib.cpp -o liblib.o</span><br><span class="line"></span><br><span class="line"><span class="title">clean:</span></span><br><span class="line">	rm -f test</span><br><span class="line"></span><br><span class="line"><span class="comment"># export LD_LIBRARY_PATH=/home/username/foo:$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set the environment variable LD_PROFILE to the name of the shared obj</span></span><br><span class="line"><span class="built_in">export</span> LD_PROFILE=my_obj</span><br><span class="line"><span class="comment">#run your application</span></span><br><span class="line">my_app</span><br><span class="line"><span class="comment">#this should create a file /var/tmp/my_sobj.profile</span></span><br><span class="line"><span class="comment">#now run sprof</span></span><br><span class="line">sprof my_sobj my_sobj.profile</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="DebugDiag使用指南">DebugDiag使用指南</h1><h2 id="Foreword">Foreword</h2><p>一直都是用windbg进行调试，但是主要通过CLI操作，现在的小朋友被GUI带坏了，都说学不会用。为此，还得找个略微简单的工具。<br>恰好找到了<code>DebugDiag</code>，据说很简单，微软原文如下：</p>
<blockquote>
<p>The right debugging tool can dramatically simplify the isolation of these problem s and the provision of solutions. There are several types of these issues for which the Debug Diagnostic Tool  is a better choice than other debugging tools</p>
<p>Using the Windows core debuggers (Windbg.exe or Cdb.exe) for post-mortem analysis is a time consuming process and requires many debugging skills.</p>
</blockquote>
<p>试用之后，果然比较简单，功能也很强大。这么个挺好用的工具，还是值得安利一下的。鉴于帮助文档大多是英文版，我就顺手把<code>How to Use the Debug Diagnostic Tool (DebugDiag) to Debug User Mode Processes</code>翻译一下。</p>]]>
    
    </summary>
    
      <category term="debug" scheme="http://blog.decbug.com/tags/debug/"/>
    
      <category term="debugdiag" scheme="http://blog.decbug.com/tags/debugdiag/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[真的是内存碎片吗]]></title>
    <link href="http://blog.decbug.com/2015/01/15/fragment/"/>
    <id>http://blog.decbug.com/2015/01/15/fragment/</id>
    <published>2015-01-15T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.479Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><table>
<thead>
<tr>
<th>配置</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统</td>
<td>win32</td>
</tr>
<tr>
<td>CPU</td>
<td>E5505</td>
</tr>
<tr>
<td>内存</td>
<td>4G</td>
</tr>
</tbody>
</table>
<p>某程序在运行过程中峰值达到1.8G，此后在申请小块内存时出现异常，此时进程只使用了900M内存。<br>如你所知，windows 32bit的每个进程可用虚拟内存是4G，其中内核态2G，用户态2G（<code>打开3G开关后就会是3G，但是不建议打开</code>）。异常时，进程尚有近1G的内存可用，但为什么会抛出异常呢？<br>真的是内存碎片造成的吗？</p>
<a id="more"></a>
<h2 id="调查">调查</h2><p>运行两次，在不同的地方crash，抓到两个dump，用windbg简单分析一下。</p>
<h3 id="Crash_1_:_vector-push_back">Crash 1 : vector.push_back</h3><p>异常链:  <code>push_back -&gt; allovator -&gt; new -&gt; MemoryException</code>。说明是在<code>push_back</code>申请内存时抛出的内存异常。简单回忆一下vector的内存分配机制，vector是连续存储的容器，它在新插入一个元素的时候，如果发现当前持有的<em>内存</em>放不下，那么就会再申请一块更大的内存（内存分配策略有差异，可以简单视为两倍），然后将旧内存中的元素复制到新内存中，并释放旧内存中的元素，再插入新的元素。<br>由此猜测，push_back时vector里是不是有很多元素，使得此次会申请很大的一块连续内存，而系统没有合适的内存空间，然后申请失败抛出异常呢？<br>查看代码，并询问开发小伙，得知crash时vector中元素个数不多，push_back时申请的不会是一块很大的连续内存，难道是真的是传说中的碎片？</p>
<h3 id="Crash_12:_CString-AppendFormat">Crash 12: CString.AppendFormat</h3><p>异常链:  <code>AppendFormat -&gt; PrepareWrite -&gt; Reallocate -&gt; MemoryException</code>。<br>有<code>allocate</code>的字样，看起来又像是在申请内存。查看一下微软CString的源码，在preparewrite函数中实现了这么一个内存算法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//凭印象写的，领会精神</span></span><br><span class="line">PrepareWrite()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (current_len &lt; <span class="number">1</span>G)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//小于1G，每次都是申请1.5倍</span></span><br><span class="line">		new_len = current_len * <span class="number">1.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//大于1G，每次加1M</span></span><br><span class="line">		new_len = current_len + <span class="number">1</span>M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PrepareWrite()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (current_len &lt; <span class="number">1</span>G)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//小于1G，每次都是申请1.5倍</span></span><br><span class="line">		new_len = current_len * <span class="number">1.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//大于1G，每次加1M</span></span><br><span class="line">		new_len = current_len + <span class="number">1</span>M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看了当前string的长度，几百几千个字符而已，也就只申请几K内存。只是申请这么小的内存，怎么也申请失败了？</p>
<h2 id="简单分析">简单分析</h2><p>查了下微软的一些文档</p>
<blockquote>
<p>.Net application, 32-bit process, 32-bit OS, 800-1200 MB</p>
</blockquote>
<p>微软说32位.Net程序内存在800M-1200M的时候，可能会出现out of memory的异常。</p>
<blockquote>
<p>High memory usage or memory leak can cause virtual memory usage in a process to keep growing over time and prevent it from ever returning to normal usage levels. The process can then run out of memory and this can cause it to terminate unexpectedly. During these out-of-memory instances, the virtual memory may fall below 1 Gb, instead of the 2 Gb allowed to Win 32 processes. This problem is sometimes caused by high memory fragmentation.</p>
</blockquote>
<p>微软建议虽然win32进程可以用2G，但最好是低于1G，否则可能会许多奇怪问题，有时就是内存碎片引起的。</p>
<p>如此，可能真的是碎片引起的。</p>
<h2 id="初步解决方法">初步解决方法</h2><p>将前面的内存降下去，就能顺利申请到内存，正常运行。但还是不能确定真的是内存碎片引起的。<br>As a modern OS, the strategy of memory allocation so sucks? I don’t think so. The  failure of memory allocattion caused by fragment. And The fragment should be caused by memory leak..</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><table>
<thead>
<tr>
<th>配置</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统</td>
<td>win32</td>
</tr>
<tr>
<td>CPU</td>
<td>E5505</td>
</tr>
<tr>
<td>内存</td>
<td>4G</td>
</tr>
</tbody>
</table>
<p>某程序在运行过程中峰值达到1.8G，此后在申请小块内存时出现异常，此时进程只使用了900M内存。<br>如你所知，windows 32bit的每个进程可用虚拟内存是4G，其中内核态2G，用户态2G（<code>打开3G开关后就会是3G，但是不建议打开</code>）。异常时，进程尚有近1G的内存可用，但为什么会抛出异常呢？<br>真的是内存碎片造成的吗？</p>]]>
    
    </summary>
    
      <category term="fragment" scheme="http://blog.decbug.com/tags/fragment/"/>
    
      <category term="memory" scheme="http://blog.decbug.com/tags/memory/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>