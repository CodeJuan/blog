<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2016-05-30T00:15:06.745Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[一切脱离业务的设计都是YY]]></title>
    <link href="http://blog.decbug.com/2016/05/29/biz_and_req/"/>
    <id>http://blog.decbug.com/2016/05/29/biz_and_req/</id>
    <published>2016-05-28T16:00:00.000Z</published>
    <updated>2016-05-30T00:15:06.745Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>现在是在工具团队，做的产品都是给业务来用的，业务就是我们的客户。那么业务又是什么呢？业务就是给公司赚钱的产品。<br>然而有时候，我们的专家们却总是脱离业务来YY方案，然后做出一些令人难以理解的产品。</p>
<a id="more"></a>
<h1 id="业务">业务</h1><p>又到了一年一度组里领导和专家们YY方案的时候。在他们做4月份里程碑的时候，我就提出，这个方案不靠谱，甚至采用了不参与架构设计不参与开发来威胁，然而还是没有挡住。<br>因为这个方案，都是基于他们的YY，完全脱离了业务。<br>果然，等到验收的时候，业务完全不认可，只能推倒重来。</p>
<h1 id="互联网公司的工具团队">互联网公司的工具团队</h1><p>曾看过知乎，豆瓣，滴滴，京东的工具，他们都是属于平台部门，里边都是高手。给全公司提供监控，部署，性能优化，日志分析，以及各种牛逼中间件。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>现在是在工具团队，做的产品都是给业务来用的，业务就是我们的客户。那么业务又是什么呢？业务就是给公司赚钱的产品。<br>然而有时候，我们的专家们却总是脱离业务来YY方案，然后做出一些令人难以理解的产品。</p>]]>
    
    </summary>
    
      <category term="business" scheme="http://blog.decbug.com/tags/business/"/>
    
      <category term="requirement" scheme="http://blog.decbug.com/tags/requirement/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读tinyhttpd源码笔记]]></title>
    <link href="http://blog.decbug.com/2016/05/09/tinyhttpd/"/>
    <id>http://blog.decbug.com/2016/05/09/tinyhttpd/</id>
    <published>2016-05-08T16:00:00.000Z</published>
    <updated>2016-05-10T00:24:46.826Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>C语言实现的http server，代码简短，看完可以明了原理。</p>
<a id="more"></a>
<h1 id="流程">流程</h1><p><img src="https://raw.githubusercontent.com/CodeJuan/codejuan.github.io/master/images/blog/tinyhttpd/flow.jpg" alt=""></p>
<ul>
<li>startup，创建socket，bind，listen</li>
<li>accept request</li>
<li>获取请求，读header</li>
<li>是否GET 或 POST</li>
<li>读content length</li>
<li>写header 200</li>
<li>GET就serve file，cat index.html 到 send</li>
<li>POST就创建pipe执行脚本，结果send</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>C语言实现的http server，代码简短，看完可以明了原理。</p>]]>
    
    </summary>
    
      <category term="httpserver" scheme="http://blog.decbug.com/tags/httpserver/"/>
    
      <category term="tinyhttpd" scheme="http://blog.decbug.com/tags/tinyhttpd/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读memcache源码笔记]]></title>
    <link href="http://blog.decbug.com/2016/05/04/memcache/"/>
    <id>http://blog.decbug.com/2016/05/04/memcache/</id>
    <published>2016-05-03T16:00:00.000Z</published>
    <updated>2016-05-10T00:12:42.102Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>memcache应用很广泛，听说内存管理做的很好，以及通过事件驱动的方式效率很高，于是找来看看。</p>
<a id="more"></a>
<h1 id="内存">内存</h1><p>举例子，疯狂动物城里有各种体型的动物，分别安置在不同的城区的街道上的房子里。例如小老鼠在微型动物区，朱迪在小动物区，牛局长在大动物区，大象在大型动物区。</p>
<ul>
<li>先划分城区</li>
<li>再修路</li>
<li>再盖房子</li>
<li>分配房间</li>
<li>盖好的房子不拆，如果拆了再盖，会浪费资源。内存释放分配的开销很大</li>
</ul>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/memcache/mem.jpg" alt=""></p>
<h1 id="流程">流程</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/memcache/flow.jpg" alt=""></p>
<h1 id="总结">总结</h1><hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>memcache应用很广泛，听说内存管理做的很好，以及通过事件驱动的方式效率很高，于是找来看看。</p>]]>
    
    </summary>
    
      <category term="cache" scheme="http://blog.decbug.com/tags/cache/"/>
    
      <category term="memcache" scheme="http://blog.decbug.com/tags/memcache/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读架构漫谈有感]]></title>
    <link href="http://blog.decbug.com/2016/05/03/architectrue_kevin/"/>
    <id>http://blog.decbug.com/2016/05/03/architectrue_kevin/</id>
    <published>2016-05-02T16:00:00.000Z</published>
    <updated>2016-05-10T00:14:48.378Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>来自聊聊架构公众号的系列文章，作者kevin老师。读过之后大开眼界，获益良多。<br>于是再读几遍，记录一下感想。</p>
<a id="more"></a>
<h2 id="一：什么是架构">一：什么是架构</h2><h3 id="起源">起源</h3><ul>
<li>人多了，就会有分工</li>
<li>人类社会，每个人做擅长的事，与他人进行交换</li>
<li>很多人组成了整体</li>
</ul>
<h3 id="架构">架构</h3><ul>
<li>定界</li>
<li>分工，分块</li>
<li>将模块组合为整体</li>
</ul>
<h3 id="摘要">摘要</h3><blockquote>
<p>这个时候人们对建筑的需求也就慢慢的越来越多，空间的切分也会变成很多种，组合的方式也会有很多种，比如每个人住的房子，群居所产生的宗教性质的房子，集体活动的房子等等。这个时候人们就开始有意识的去设计房子，架构师就慢慢的出现了。一切都是为了满足人的越来越高的需求，提升质量，减少时间，更有效率的切分空间，并且让空间之间更加有机的进行沟通。这就是建筑的架构以及建筑的架构的演变</p>
</blockquote>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>来自聊聊架构公众号的系列文章，作者kevin老师。读过之后大开眼界，获益良多。<br>于是再读几遍，记录一下感想。</p>]]>
    
    </summary>
    
      <category term="architecture" scheme="http://blog.decbug.com/tags/architecture/"/>
    
      <category term="architecture" scheme="http://blog.decbug.com/categories/architecture/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[各种锁:自旋锁/互斥锁/读写锁/分布式锁]]></title>
    <link href="http://blog.decbug.com/2016/04/29/lock/"/>
    <id>http://blog.decbug.com/2016/04/29/lock/</id>
    <published>2016-04-28T16:00:00.000Z</published>
    <updated>2016-05-03T12:48:16.456Z</updated>
    <content type="html"><![CDATA[<h1 id="锁">锁</h1><p>锁在计算机的世界里随处可见，当大家都想操作一个资源的时候，如果一窝蜂涌进来，就会出事的。<br>举个例子，加入说有2个线程都在操作一个共享资源（一个int），给他+1。我们知道+1不是原子操作，所谓原子操作，就是如果这个操作开始执行了，那么就不会被打断。看过汇编的同学都知道，+1需要先mov然后在add，如线程1mov了，然后执行线程2的mov，就会出问题。轻则数据错误，重则程序崩溃。感觉这个例子不太恰当，还是领会精神吧。为了保护我们的操作，那么就需要使得这个共享资源的操作变成原子的，这就需要锁了。<br>在并发编程中，尽量少用锁，能不用就不用，因为锁的开销很大很大。首先在业务层面进行分隔，尽量让不同的执行单元操作各自独立的数据，如果不可避免要用到锁，那么锁的范围要尽量小。</p>
<a id="more"></a>
<h1 id="自旋锁vs互斥锁">自旋锁vs互斥锁</h1><h2 id="举个例子">举个例子</h2><ul>
<li>互斥锁：假如说你想进入一个房间，但是这个房间里已经有人了。那么就进不去，这个时候你就先睡一觉，等里边的人出来把你叫醒，然后你再进去。</li>
<li>自旋锁：还是这个房间，房间里有人，你不会睡着，只会每过一分钟就看房间里的人出来了么，如果没出来，那么就继续不停查看。如果出来了，你就进去。</li>
</ul>
<p>对应到系统，就是你这个线程想获取这个锁，但是这个锁被别的线程持有了，那么你这个线程就得休眠，等待锁释放后再被唤醒。要知道，休眠再唤醒的开销很大，所以就出了自旋锁。自旋锁不会休眠，会不停的尝试。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>特征</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>自旋</td>
<td>不会休眠，不停重试，直到获得锁</td>
<td>多核，如果单核的话，就一直自旋，执行线程反而得不到时间片。锁住的代码执行时间很短。因为休眠再唤醒的开销很大。如果时间短，那么自旋的开销就很小</td>
</tr>
<tr>
<td>互斥</td>
<td>休眠，等锁被释放才会被唤醒</td>
<td>锁住的代码要执行很久，如果是自旋锁，就会不停尝试，被锁住的代码分不到足够的时间片，但是性能下降</td>
</tr>
</tbody>
</table>
<h1 id="读写锁">读写锁</h1><p>场景：读多写少<br>条件：</p>
<ul>
<li>只要没有写锁，就能获取到读锁</li>
<li>只有没有任锁，才能获取到写锁</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="锁">锁</h1><p>锁在计算机的世界里随处可见，当大家都想操作一个资源的时候，如果一窝蜂涌进来，就会出事的。<br>举个例子，加入说有2个线程都在操作一个共享资源（一个int），给他+1。我们知道+1不是原子操作，所谓原子操作，就是如果这个操作开始执行了，那么就不会被打断。看过汇编的同学都知道，+1需要先mov然后在add，如线程1mov了，然后执行线程2的mov，就会出问题。轻则数据错误，重则程序崩溃。感觉这个例子不太恰当，还是领会精神吧。为了保护我们的操作，那么就需要使得这个共享资源的操作变成原子的，这就需要锁了。<br>在并发编程中，尽量少用锁，能不用就不用，因为锁的开销很大很大。首先在业务层面进行分隔，尽量让不同的执行单元操作各自独立的数据，如果不可避免要用到锁，那么锁的范围要尽量小。</p>]]>
    
    </summary>
    
      <category term="lock" scheme="http://blog.decbug.com/tags/lock/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里面试经历]]></title>
    <link href="http://blog.decbug.com/2016/04/11/interview_aliyun/"/>
    <id>http://blog.decbug.com/2016/04/11/interview_aliyun/</id>
    <published>2016-04-10T16:00:00.000Z</published>
    <updated>2016-05-30T00:26:10.941Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>之前一直都在通信行业撸代码，做的都是单机类或者小web系统，感觉提升不大，所以打算往互联网转型，看看百万千万用户的产品是如何做出来的。<br>于是在拉勾上投了阿里云。</p>
<a id="more"></a>
<h1 id="阿里云面试记录">阿里云面试记录</h1><p>三轮（也许可以算四轮）技术面，一轮boss面，一轮hr，据说还有一轮hr的大boss价值观面试</p>
<h1 id="一轮">一轮</h1><p>感觉是一位管理者，可能脱离技术一段时间，问的问题都是根据简历来的。</p>
<ul>
<li>先是问项目经验，期间问到几次，为啥要重复造轮子。</li>
<li>docker run的原理，流程</li>
<li>dockerfile，docker build原理</li>
<li>C++虚函数，引用指针，</li>
<li>手写HashMap</li>
<li>AngularJS绑定的原理</li>
<li>并发，我说锁啊，然后忽悠一大堆。后问如何提高性能，我说如果业务允许，应该让每个执行实例独立，不要共享资源，减少竞争</li>
<li>弹性伸缩</li>
<li>一致性</li>
</ul>
<h1 id="二轮">二轮</h1><p>好像是一位P8，曾在外面看过这个名字，title是高级专家</p>
<ul>
<li>聊我之前的一个项目，关于我做的一个数据挖掘工具的消息推送模块的优化讨论，消息队列，锁</li>
<li>STL remove和erase的区别</li>
<li>vector构造析构</li>
<li>HIVE HBASE</li>
<li>我说给测试团队写过自动化测试框架，质疑说为啥需要自己写。我说业务啊，windows的啊，环境啊等等</li>
<li>基于一个<code>随机读，追加写的文件系统</code>，做一个KV存储系统，有增删改查的功能。这个比较好玩。</li>
</ul>
<ol>
<li>我说如果不考虑性能的话，我第一版会采用，每个K就对应一个文件，把V写到这个文件里，先实现功能，交付出去，接口调通，之后再进行优化。面试官说，快速完成的想法不错，那么后面该如何优化呢</li>
<li>第二版，增加索引，保存K，V的长度，V到数据文件，保存K，该K对应V在数据文件中的偏移到索引文件，面试官说如果有改的请求，就需要重写整个索引文件，性能会差。我说，是的，接下来我会继续优化。</li>
<li>第三版，如果内存够大，或者数据不会太多，那么把索引保存到内存中，省去重建索引文件的性能损耗。面试官说，内存不会太大。</li>
<li>第四版，针对K进行hash，每个hash对应一个文件夹，文件夹里是索引文件和数据文件，通过hash可缩短搜索路径。</li>
<li>第五版，可以把索引放到redis中，面试官说，不能用redis。我就说定时把索引文件快照到磁盘，面试官说不行，掉电就还是会丢数据。</li>
<li>数据文件中保存K L V，只有数据文件写入成功，才更新内存中的索引。即使掉电了，也能从数据文件中重建索引。</li>
<li>增加缓存，把热点索引保存在内存中，如内存未命中，则根据用户传入的K，从数据文件中恢复索引到内存中，冷索引则从内存中剔除。</li>
</ol>
<ul>
<li>go中map中 map[a].b = 1能生效吗，我说我不记得了，但如果你这么问，那么肯定是不能，因为可能是值，不是引用，指向的不是内存。</li>
</ul>
<p>面完之后，让我等消息</p>
<h1 id="三轮">三轮</h1><p>之前两轮面试说我技术不错，能力不错，经验不错，对技术也有热情，可惜工作经验不匹配，所以把我推荐到别的组，于是需要再做一轮技术面试。</p>
<ul>
<li>PHP，我说我用过wordpress和phpwind，且做一个小的图片生成系统</li>
<li>python，django和flask</li>
<li>如何监控很多台机器，我说我看过小米open falcon的实现，在每台机器上装个agent</li>
<li>如何控制很多台机器，我说可以参考ansible，添加到ssh的可信里，然后通过ssh来控制</li>
<li>spring的原理</li>
<li>linux熟不熟，问了几个命令</li>
<li>问我会哪些脚本语言，都用来做过啥。我说shell powershell python</li>
<li>给出一个场景，分析并解决。场景好像很简单，我一下就解决了。我在此基础上发挥了一下，提出要总结，下次遇到类似问题的时候就可以很快查到。还可以给用户提供一键式解决办法，这样可以一劳永逸。</li>
<li>因为之前两轮技术面都太惨烈，所以这一轮似乎没问太多复杂的问题。这一轮基本上没啥问题了，后面就是BOSS和HR了</li>
<li>后来又面了一次，主要是谈了一些产品方面的问题，还有我的技术爱好</li>
</ul>
<h1 id="部门BOSS">部门BOSS</h1><ul>
<li>主要是问当前工作，手下带了几个兄弟，我说之前是带100多，但我只需要管技术，不用管理。今年开始独立带人，组建团队。感觉很痛苦，要招聘，要带徒弟，要规划产品，还要写代码。</li>
<li>在产品开发运营过程中的难题，我说最难的就是如何抓住用户的痛点，用平滑的方式解决痛点，不能让用户抵触。</li>
<li>以及问了我对阿里云某些产品的看法，然后我就说了下对于学习aws的一些心得，顺便吐槽了阿里云。</li>
<li>再就是介绍他的团队以及产品，还有未来的规划。说了优点也说了缺点，而不像以前接触过的一些光吹牛的面试官。</li>
</ul>
<h1 id="HR">HR</h1><p>问工作经历，之前每次跳槽的原因。为何想来阿里之类的。</p>
<h1 id="HR的BOSS">HR的BOSS</h1><p>有点像背景调查，问是否统招啊之类的</p>
<h1 id="offer">offer</h1><p>拿下</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>之前一直都在通信行业撸代码，做的都是单机类或者小web系统，感觉提升不大，所以打算往互联网转型，看看百万千万用户的产品是如何做出来的。<br>于是在拉勾上投了阿里云。</p>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="interview" scheme="http://blog.decbug.com/tags/interview/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[京东面试经历]]></title>
    <link href="http://blog.decbug.com/2016/04/10/interview_jd/"/>
    <id>http://blog.decbug.com/2016/04/10/interview_jd/</id>
    <published>2016-04-09T16:00:00.000Z</published>
    <updated>2016-05-30T00:25:04.673Z</updated>
    <content type="html"><![CDATA[<h1 id="京东云面试记录">京东云面试记录</h1><p>从通信行业转型到互联网，对云，分布式，高并发感兴趣，想搞底层。<br>于是在拉勾投了京东云。<br>面试分4轮，四位面试官分别是架构师、部门老大、大boss 、hr。<br><a id="more"></a></p>
<p>总体感觉，面试官都很友善，我平时比较不善言语，这次在面试官的引导之下，交流比较顺畅。</p>
<h1 id="架构师">架构师</h1><p>先开始闲聊，平时看哪些技术网站啊，我说我是面向GitHub so 谷歌编程，然后聊了聊番茄手段，我说自己弄vps ，家里的路由。之后进入正题，问的问题比较偏原理。比如</p>
<ol>
<li>linux的文件权限是如何实现的，</li>
<li>一个hello world程序是如何运行起来的（我回答先把可执行文件加载到进程的代码段，之后执行，然后我讲了讲进程地址空间的一些事，感觉面试官对我的回答不太满意。经提醒，我才明白是要讲fork，我大概说了下，可惜忘了说写时复制。</li>
<li>磁盘空间有空余，然而创建文件失败，是什么原因。我开始没答上来，然后就提示我是否知道，我说可以理解为索引。但还没答上来，后来架构师告诉我是inode space 不足。</li>
<li>设计一个系统，restful 接口，｛num ，返回对应的斐波纳契数组。我说先实现功能，不能用递归，栈溢出就惨了。日志的话，我说可以玩elk（因为我刚在家玩了下），但面试官想听到日志轮转，我回答一般日志库都可以设置单个文件上限，达到这个值就会创建新文件。还有选型，我说最近用了gorilla mux 。经提醒，我还忘了异常保护。还忘了，可以把每次结果缓存到redis中，如果下次有同样的请求，就可以从redis中直接取值并返回，这样性能会高。</li>
</ol>
<p>总体来说，我没答好。但好在我在提醒之下都能跟上思路，所以勉强过关了吧。</p>
<h1 id="部门老大">部门老大</h1><p>先是简单聊了聊之前的项目经验，这个就不赘述了。之后是两个系统设计问题</p>
<ol>
<li>设计一个用户登录注册系统。我说先来一个最简单的，单表单应用。当用户多了，就水平扩展服务，把服务发现做好，因为服务是无状态的。如果数据库有压力，就分表。由于用户系统可能是读取多于写入，所以可以搞写库，多个读库。写库可以加主备。最好再加个用户登录行为分析，如果突然变了地理位置，可以警告。这个是我看到的常用套路，也不知道面试官是否满意。</li>
<li>设计一个电梯系统。我说我做开发的一般喜欢先用一个简单粗暴的方法完成功能。我说记录每个电梯的运行状态，以及个楼层有坐电梯的请求，是到哪一层，可以放到请求列表。遍历列表，找到最近的电梯，然后调度过来。之后再统计电梯的运行数据，找出规律，比如上班高峰期，下班高峰期该如何调度。后来面试官问到如何让电梯的运行负载都均衡，我说暂时没有好的办法，我会给每个电梯设置一个角色，然后每天定时给电梯的角色互换。虽然某一天某个电梯会特别忙，但总体来看，负载会是均衡的。<br>偏理论的东西居多，我看过的书也发挥作用了。对了，最后还问我最近看了啥书，我说正在读第二遍性能之巅。</li>
</ol>
<h1 id="大boss">大boss</h1><p>问的问题是偏团队管理，人员培养，以及产品落地的问题。<br>我说我觉得招聘很难，招到合适的人不容易，招人的标准已经降低了，只要脑子灵活，工作认真，就可以。因为一个人工作不负责，就需要周围的人给他填坑，严重影响团队。关于人员培养，我说我喜欢主动学习，独立解决问题的人，并且会分享的同学，这样团队的技术氛围好了，大家水平提高很快，刻意的培训其实价值不大。产品落地，需要抓住用户的痛点，我们的产品能给用户带来收益，大家双赢。后来问我最近工作中的困惑，我说最近对于项目进度的把控做的不好，组里小伙子干活比较慢，我前端不熟，对于这个进度不知是否合理，我不喜欢逼着小伙子们加班，说白了还是我的技术水平不够，还需要积累。如果我确定这个速度不合理，就可以硬下心肠给小伙子们压力了。</p>
<h1 id="hr">hr</h1><p>问工作经历，教育背景，离职原因，当前薪资，期望薪资等等</p>
<h1 id="offer">offer</h1><p>拿下。<br>然后之前一直都是通信行业，写C写C++，虽然号称全栈，会很多语言，做过很多领域。但和互联网产品的差异还是很大的，没有相关工作背景，被压价是不可避免的。还得继续努力啊。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="京东云面试记录">京东云面试记录</h1><p>从通信行业转型到互联网，对云，分布式，高并发感兴趣，想搞底层。<br>于是在拉勾投了京东云。<br>面试分4轮，四位面试官分别是架构师、部门老大、大boss 、hr。<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="interview" scheme="http://blog.decbug.com/tags/interview/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(6)-swarm]]></title>
    <link href="http://blog.decbug.com/2016/03/27/docker_swarm/"/>
    <id>http://blog.decbug.com/2016/03/27/docker_swarm/</id>
    <published>2016-03-26T16:00:00.000Z</published>
    <updated>2016-03-27T11:31:52.281Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>正在撸自己的容器云，目前的业务不是复杂，所以做法比较土：自己管理集群，调用每个节点的docker daemon remote API来创建/启动/停止/删除镜像及容器，虽然简单，但是需要自己做集群管理（都还没上服务发现），比较麻烦。<br>此后打算用k8s，但由于其他原因，暂时搁置。后来咨询swarm的maintainer线超博，以及DaoCloud的高手们，决定采用swarm<br><a id="more"></a></p>
<h1 id="采用swarm的原因">采用swarm的原因</h1><ol>
<li>自带服务发现，不用我自己弄</li>
<li>和docker daemon remote API的基本相同，仅有的差异请参照<a href="https://github.com/CodeJuan/swarm/blob/master/docs/swarm-api.md#endpoints-which-behave-differently" target="_blank" rel="external">官方文档</a>，基本可以复用原来的代码</li>
</ol>
<p>虽然这次用了swarm，但有机会的话我还是想会继续安利k8s，毕竟k8s更好玩一些</p>
<h1 id="安装">安装</h1><h2 id="节点分配">节点分配</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>i3</td>
<td>192.168.1.245</td>
<td>sonsul,manage0,node</td>
</tr>
<tr>
<td>g540</td>
<td>192.168.1.148</td>
<td>manage1,node</td>
</tr>
<tr>
<td>g640</td>
<td>192.168.1.241</td>
<td>node</td>
</tr>
<tr>
<td>g530</td>
<td>192.168.1.173</td>
<td>node</td>
</tr>
</tbody>
</table>
<p>这里的主机名，都是我的机器的CPU型号，这几台机器都是我收购来的二手台式机，IP是openwrt自动分配的，貌似是hash算出来的，是个固定值。</p>
<h2 id="暴露docker_daemon的端口">暴露docker daemon的端口</h2><p>swarm应该也是调用每个节点的remote API吧，所以需要暴露端口</p>
<p>打开<code>/etc/default/docker</code>，在<code>DOCKER_OPTS</code>加上<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"><span class="constant">H</span> <span class="symbol">tcp:</span>/<span class="regexp">/0.0.0.0:4243 -H unix:/</span><span class="regexp">//var</span><span class="regexp">/run/docker</span>.sock</span></span><br></pre></td></tr></table></figure></p>
<p>记住这个暴露的端口号，后面会用到，我这里是4243</p>
<h2 id="启动consul">启动consul</h2><p>在i3上执行<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> --restart always -<span class="keyword">d</span> -p 8500:8500 --name=consul progrium/consul -server -<span class="keyword">bootstrap</span></span><br></pre></td></tr></table></figure></p>
<p>启动consul，端口是8500</p>
<h2 id="启动manager0">启动manager0</h2><p>还是i3<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> --restart always -<span class="keyword">d</span> -p 4000:4000 swarm manage -<span class="keyword">H</span> :4000 --replication --advertise 192.168.1.245:4000 consul:<span class="comment">//192.168.1.245:8500</span></span><br></pre></td></tr></table></figure></p>
<p>advertise的IP就是i3自身的IP，相当于告诉consul，我是manage，这是我的IP和端口<br>consul就是之前在i3上创建的consul的IP和端口</p>
<h2 id="启动manager1">启动manager1</h2><p>官网把这个叫<code>secondary Swarm manager</code>，领会精神即可<br>这次是在g540上执行<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> --restart always -<span class="keyword">d</span> swarm manage -<span class="keyword">H</span> :4000 --replication --advertise 192.168.1.148:4000 consul:<span class="comment">//192.168.1.245:8500</span></span><br></pre></td></tr></table></figure></p>
<p>consul，还是i3上运行的consul<br>advertise 是manager1，也就是自己的IP和端口</p>
<h2 id="启动node">启动node</h2><p>在4个节点上分别运行<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always -d swarm join --advertise=自己的<span class="string">IP:</span><span class="number">4243</span> <span class="string">consul:</span><span class="comment">//192.168.1.245:8500</span></span><br></pre></td></tr></table></figure></p>
<p>这里的4243就是之前暴露的docker daemon的端口了</p>
<h2 id="在i3上查看info">在i3上查看info</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> -H :<span class="number">4000</span> <span class="built_in">info</span></span><br></pre></td></tr></table></figure>
<p>这里表示，docker会向本机的4000端口发请求，也就是我们最开始启动manager0的时候声明的端口。<br>可以看到<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Containers:</span> <span class="number">19</span></span><br><span class="line"><span class="label"> Running:</span> <span class="number">19</span></span><br><span class="line"><span class="label"> Paused:</span> <span class="number">0</span></span><br><span class="line"><span class="label"> Stopped:</span> <span class="number">0</span></span><br><span class="line"><span class="string">Images:</span> <span class="number">26</span></span><br><span class="line">Server <span class="string">Version:</span> swarm/<span class="number">1.1</span>.3</span><br><span class="line"><span class="string">Role:</span> primary</span><br><span class="line"><span class="string">Strategy:</span> spread</span><br><span class="line"><span class="string">Filters:</span> health, port, dependency, affinity, constraint</span><br><span class="line"><span class="string">Nodes:</span> <span class="number">4</span></span><br><span class="line"><span class="label"> g530:</span> <span class="number">192.168</span>.1.173:<span class="number">4243</span></span><br><span class="line">  └ <span class="string">Status:</span> Healthy</span><br><span class="line">  └ <span class="string">Containers:</span> <span class="number">8</span></span><br><span class="line">  └ Reserved <span class="string">CPUs:</span> <span class="number">0</span> / <span class="number">2</span></span><br><span class="line">  └ Reserved <span class="string">Memory:</span> <span class="number">0</span> B / <span class="number">3.969</span> GiB</span><br><span class="line">  └ <span class="string">Labels:</span> executiondriver=native-<span class="number">0.2</span>, kernelversion=<span class="number">3.19</span>.0-<span class="number">25</span>-generic, operatingsystem=Ubuntu <span class="number">14.04</span>.3 LTS, storagedriver=aufs</span><br><span class="line">  └ <span class="string">Error:</span> (none)</span><br><span class="line">  └ <span class="string">UpdatedAt:</span> <span class="number">2016</span>-<span class="number">03</span>-<span class="number">27</span><span class="string">T09:</span><span class="number">46</span>:<span class="number">45</span>Z</span><br><span class="line"><span class="label"> g540:</span> <span class="number">192.168</span>.1.148:<span class="number">4243</span></span><br><span class="line">  └ <span class="string">Status:</span> Healthy</span><br><span class="line">  └ <span class="string">Containers:</span> <span class="number">4</span></span><br><span class="line">  └ Reserved <span class="string">CPUs:</span> <span class="number">0</span> / <span class="number">2</span></span><br><span class="line">  └ Reserved <span class="string">Memory:</span> <span class="number">0</span> B / <span class="number">3.93</span> GiB</span><br><span class="line">  └ <span class="string">Labels:</span> executiondriver=native-<span class="number">0.2</span>, kernelversion=<span class="number">3.19</span>.0-<span class="number">25</span>-generic, operatingsystem=Ubuntu <span class="number">14.04</span>.4 LTS, storagedriver=aufs</span><br><span class="line">  └ <span class="string">Error:</span> (none)</span><br><span class="line">  └ <span class="string">UpdatedAt:</span> <span class="number">2016</span>-<span class="number">03</span>-<span class="number">27</span><span class="string">T09:</span><span class="number">47</span>:<span class="number">02</span>Z</span><br><span class="line"><span class="label"> g640:</span> <span class="number">192.168</span>.1.241:<span class="number">4243</span></span><br><span class="line">  └ <span class="string">Status:</span> Healthy</span><br><span class="line">  └ <span class="string">Containers:</span> <span class="number">4</span></span><br><span class="line">  └ Reserved <span class="string">CPUs:</span> <span class="number">0</span> / <span class="number">2</span></span><br><span class="line">  └ Reserved <span class="string">Memory:</span> <span class="number">0</span> B / <span class="number">3.739</span> GiB</span><br><span class="line">  └ <span class="string">Labels:</span> executiondriver=native-<span class="number">0.2</span>, kernelversion=<span class="number">3.19</span>.0-<span class="number">25</span>-generic, operatingsystem=Ubuntu <span class="number">14.04</span>.4 LTS, storagedriver=aufs</span><br><span class="line">  └ <span class="string">Error:</span> (none)</span><br><span class="line">  └ <span class="string">UpdatedAt:</span> <span class="number">2016</span>-<span class="number">03</span>-<span class="number">27</span><span class="string">T09:</span><span class="number">46</span>:<span class="number">56</span>Z</span><br><span class="line"><span class="label"> i3:</span> <span class="number">192.168</span>.1.245:<span class="number">4243</span></span><br><span class="line">  └ <span class="string">Status:</span> Healthy</span><br><span class="line">  └ <span class="string">Containers:</span> <span class="number">3</span></span><br><span class="line">  └ Reserved <span class="string">CPUs:</span> <span class="number">0</span> / <span class="number">4</span></span><br><span class="line">  └ Reserved <span class="string">Memory:</span> <span class="number">0</span> B / <span class="number">16.12</span> GiB</span><br><span class="line">  └ <span class="string">Labels:</span> executiondriver=native-<span class="number">0.2</span>, kernelversion=<span class="number">3.19</span>.0-<span class="number">25</span>-generic, operatingsystem=Ubuntu <span class="number">14.04</span>.3 LTS, storagedriver=aufs</span><br><span class="line">  └ <span class="string">Error:</span> (none)</span><br><span class="line">  └ <span class="string">UpdatedAt:</span> <span class="number">2016</span>-<span class="number">03</span>-<span class="number">27</span><span class="string">T09:</span><span class="number">47</span>:<span class="number">17</span>Z</span><br><span class="line"><span class="string">Plugins:</span></span><br><span class="line"><span class="label"> Volume:</span></span><br><span class="line"><span class="label"> Network:</span></span><br><span class="line">Kernel <span class="string">Version:</span> <span class="number">3.19</span>.0-<span class="number">25</span>-generic</span><br><span class="line">Operating <span class="string">System:</span> linux</span><br><span class="line"><span class="string">Architecture:</span> amd64</span><br><span class="line"><span class="string">CPUs:</span> <span class="number">10</span></span><br><span class="line">Total <span class="string">Memory:</span> <span class="number">27.76</span> GiB</span><br></pre></td></tr></table></figure></p>
<p>很帅吧</p>
<h1 id="测试">测试</h1><h2 id="获取当前正在运行的容器">获取当前正在运行的容器</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">http:</span><span class="comment">//192.168.1.245:4000/containers/json</span></span><br></pre></td></tr></table></figure>
<p>返回<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">Id</span>":<span class="value"><span class="string">"b7919e7e49b1fc580f046734ab6eba53435200a9b07a1f75b176afe6663ee573"</span></span>,</span><br><span class="line">        "<span class="attribute">Names</span>":<span class="value">[</span><br><span class="line">            <span class="string">"/i3/consul"</span></span><br><span class="line">        ]</span>,</span><br><span class="line">        "<span class="attribute">Image</span>":<span class="value"><span class="string">"progrium/consul"</span></span>,</span><br><span class="line">        "<span class="attribute">Command</span>":<span class="value"><span class="string">"/bin/start -server -bootstrap"</span></span>,</span><br><span class="line">        "<span class="attribute">Created</span>":<span class="value"><span class="number">1459070754</span></span>,</span><br><span class="line">        "<span class="attribute">Status</span>":<span class="value"><span class="string">"Up About an hour"</span></span>,</span><br><span class="line">        "<span class="attribute">Ports</span>":<span class="value">[</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8301</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"udp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">"192.168.1.245"</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8500</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">8500</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8301</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8302</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"udp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8300</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">53</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">53</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"udp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8400</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                "<span class="attribute">IP</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                "<span class="attribute">PrivatePort</span>":<span class="value"><span class="number">8302</span></span>,</span><br><span class="line">                "<span class="attribute">PublicPort</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                "<span class="attribute">Type</span>":<span class="value"><span class="string">"tcp"</span></span><br><span class="line">            </span>&#125;</span><br><span class="line">        ]</span>,</span><br><span class="line">        "<span class="attribute">SizeRw</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">        "<span class="attribute">SizeRootFs</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">        "<span class="attribute">Labels</span>":<span class="value">&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span>,</span><br><span class="line">        "<span class="attribute">NetworkSettings</span>":<span class="value">&#123;</span><br><span class="line">            "<span class="attribute">Networks</span>":<span class="value">&#123;</span><br><span class="line">                "<span class="attribute">bridge</span>":<span class="value">&#123;</span><br><span class="line">                    "<span class="attribute">IPAMConfig</span>":<span class="value"><span class="literal">null</span></span>,</span><br><span class="line">                    "<span class="attribute">Links</span>":<span class="value"><span class="literal">null</span></span>,</span><br><span class="line">                    "<span class="attribute">Aliases</span>":<span class="value"><span class="literal">null</span></span>,</span><br><span class="line">                    "<span class="attribute">NetworkID</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                    "<span class="attribute">EndpointID</span>":<span class="value"><span class="string">"3527825ec17c51e77cfe005a7bf364e2d2b8777dc500cd7554309e855fcc5395"</span></span>,</span><br><span class="line">                    "<span class="attribute">Gateway</span>":<span class="value"><span class="string">"172.17.0.1"</span></span>,</span><br><span class="line">                    "<span class="attribute">IPAddress</span>":<span class="value"><span class="string">"172.17.0.2"</span></span>,</span><br><span class="line">                    "<span class="attribute">IPPrefixLen</span>":<span class="value"><span class="number">16</span></span>,</span><br><span class="line">                    "<span class="attribute">IPv6Gateway</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                    "<span class="attribute">GlobalIPv6Address</span>":<span class="value"><span class="string">""</span></span>,</span><br><span class="line">                    "<span class="attribute">GlobalIPv6PrefixLen</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">                    "<span class="attribute">MacAddress</span>":<span class="value"><span class="string">"02:42:ac:11:00:02"</span></span><br><span class="line">                </span>&#125;</span><br><span class="line">            </span>&#125;</span><br><span class="line">        </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>可以看到，和以前的remote API获取到的基本相同，只是在IP那里，从<code>0.0.0.0</code>变成了实际的IP</p>
<h2 id="pull一个镜像">pull一个镜像</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST <span class="string">http:</span><span class="comment">//192.168.1.245:4000/images/create?fromImage=ubuntu</span></span><br></pre></td></tr></table></figure>
<h2 id="整一个容器试试">整一个容器试试</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">curl -X POST -H "Content-Type: application/json" -d '&#123;"Image":"registry:2.2.1"&#125;' http://<span class="number">192.168.1.245</span>:4000/containers/create</span><br><span class="line"></span><br><span class="line"># 记录返回的id</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">#curl -X POST http://<span class="number">192.168.1.245</span>:4000/containers/(id)/start</span><br><span class="line">curl -X POST http://<span class="number">192.168.1.245</span>:4000/containers/<span class="number">69e61f836</span>c2fad4cf<span class="number">29a0f37c2</span>b<span class="number">4575e267</span>b<span class="number">45c2931737152</span>ef<span class="number">6f40a9d8</span>a4279/start</span><br><span class="line"></span><br><span class="line"># stop</span><br><span class="line">curl -X POST http://<span class="number">192.168.1.245</span>:4000/containers/<span class="number">69e61f836</span>c2fad4cf<span class="number">29a0f37c2</span>b<span class="number">4575e267</span>b<span class="number">45c2931737152</span>ef<span class="number">6f40a9d8</span>a4279/stop</span><br><span class="line"></span><br><span class="line"># remove</span><br><span class="line">curl -X DELETE http://<span class="number">192.168.1.245</span>:4000/containers/<span class="number">69e61f836</span>c2fad4cf<span class="number">29a0f37c2</span>b<span class="number">4575e267</span>b<span class="number">45c2931737152</span>ef<span class="number">6f40a9d8</span>a4279?v=1</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>正在撸自己的容器云，目前的业务不是复杂，所以做法比较土：自己管理集群，调用每个节点的docker daemon remote API来创建/启动/停止/删除镜像及容器，虽然简单，但是需要自己做集群管理（都还没上服务发现），比较麻烦。<br>此后打算用k8s，但由于其他原因，暂时搁置。后来咨询swarm的maintainer线超博，以及DaoCloud的高手们，决定采用swarm<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-swarm" scheme="http://blog.decbug.com/tags/docker-swarm/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(5)-kubernetes]]></title>
    <link href="http://blog.decbug.com/2016/02/28/docker_kubernetes/"/>
    <id>http://blog.decbug.com/2016/02/28/docker_kubernetes/</id>
    <published>2016-02-27T16:00:00.000Z</published>
    <updated>2016-03-03T12:13:25.626Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>需要做一个容器云，有同事在撸mesos+marathon+chronos，我就顺便折腾下kubernetes。<br><a id="more"></a></p>
<h1 id="kubernetes简介">kubernetes简介</h1><blockquote>
<p>Kubernetes是Google开源的容器集群管理系统。它构建Ddocker技术之上，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能</p>
<p>Kubernetes 是来自 Google 云平台的开源容器集群管理系统。基于 Docker 构建一个容器的调度服务。该系统可以自动在一个容器集群中选择一个工作容器供使用。</p>
</blockquote>
<p>感觉像是Docker版PaaS版的OpenStack。OpenStack对外提供VM，Kubernetes则对外提供基于docker的服务。</p>
<h1 id="通过ansible装docker">通过ansible装docker</h1><p>机器多了，再手工装docker-engine就太麻烦了，所以写个playbook，给家里的机器统一安装。<br>代码放在<a href="https://github.com/CodeJuan/kubernetes_practice" target="_blank" rel="external">https://github.com/CodeJuan/kubernetes_practice</a></p>
<h2 id="hosts">hosts</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[master]</span><br><span class="line">i3	<span class="variable">ansible_user=</span>i3	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.245</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[million]</span><br><span class="line">g530	<span class="variable">ansible_user=</span>g530	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.173</span></span><br><span class="line">g540	<span class="variable">ansible_user=</span>g540	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.148</span></span><br><span class="line">g640	<span class="variable">ansible_user=</span>g640	<span class="variable">ansible_ssh_host=</span><span class="number">192.168</span>.<span class="number">1.241</span></span><br></pre></td></tr></table></figure>
<p>如果没有添加SSH key，那么可以设置ansible_ssh_pass=xxxxxx</p>
<p>这里说一个奇葩的事情，重装了系统之后，手动把maset的pubkey添加到agent的可信ssh里，然而在play的时候总提示<code>没有权限</code>，尝试了各种方法依旧无解。<br>最后死马当活马医，<code>pip uninstall ansible</code>再<code>pip install</code>，竟然就好了，实在是很无语。</p>
<h2 id="playbooks">playbooks</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">--</span><br><span class="line"></span>-<span class="ruby"> <span class="symbol">hosts:</span> all <span class="comment">#表示hosts里的所有agent都要装</span></span><br><span class="line"></span>  tasks:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> ping <span class="comment"># 先测试是否能ping通</span></span><br><span class="line"></span>    ping:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> add_docker_key <span class="comment"># 加入key</span></span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> update_apt_source <span class="comment"># 增加源</span></span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    lineinfile:</span><br><span class="line">      dest=/etc/apt/sources.list.d/docker.list</span><br><span class="line">      create=yes</span><br><span class="line">      line="deb https://apt.dockerproject.org/repo ubuntu-trusty main"</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> install docker</span><br><span class="line"></span>    sudo: yes</span><br><span class="line">    apt: name=docker-engine update_cache=yes</span><br></pre></td></tr></table></figure>
<h2 id="执行">执行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i hosts playbook.yml -K</span><br></pre></td></tr></table></figure>
<p>其中-K表示，交互式的输入sudo密码<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/docker/ansible_install_docker.png" alt=""></p>
<p>稍等片刻，每个agent的docker-engine就都安装好了。接下来就是安装kubernetes</p>
<h1 id="安装kubernetes">安装kubernetes</h1><p><a href="http://kubernetes.io/v1.1/docs/getting-started-guides/locally.html#linux" target="_blank" rel="external">http://kubernetes.io/v1.1/docs/getting-started-guides/locally.html#linux</a><br>参照谷歌的文档安装一下。</p>
<h2 id="安装go">安装go</h2><p><a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a><br>参考之前写的安装一下，要不要翻译成Ansible呢。。。。。。</p>
<h2 id="etcd">etcd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L  https://github.com/coreos/etcd/releases/download/v2.<span class="number">2.4</span>/etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz -o etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz</span><br><span class="line">tar -C /usr/<span class="built_in">local</span>/ -xzvf etcd-v2.<span class="number">2.4</span>-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> etcd-v2.<span class="number">2.4</span>-linux-amd64</span><br><span class="line">./etcd</span><br></pre></td></tr></table></figure>
<h2 id="k8s">k8s</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/<span class="built_in">local</span>/ -xvzf kubernetes.tar.gz</span><br></pre></td></tr></table></figure>
<p><a href="http://kubernetes.io/v1.0/docs/getting-started-guides/ubuntu.html" target="_blank" rel="external">http://kubernetes.io/v1.0/docs/getting-started-guides/ubuntu.html</a></p>
<h2 id="部署">部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> FLANNEL_VERSION=<span class="number">0.5</span>.<span class="number">5</span> &amp;&amp; <span class="built_in">export</span> ETCD_VERSION=<span class="number">2.2</span>.<span class="number">5</span> &amp;&amp; <span class="built_in">export</span> KUBE_VERSION=<span class="number">1.1</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
<h3 id="build">build</h3><p>执行<code>kubernetes/cluster/ubuntu/build.sh</code>，会自动下载二进制，然而。。。。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Prepare </span>flannel <span class="number">0</span>.<span class="number">4.0</span> release ...</span><br><span class="line">  % <span class="constant">Total </span>   % <span class="constant">Received </span>% <span class="constant">Xferd </span> <span class="constant">Average Speed </span>  <span class="constant">Time </span>   <span class="constant">Time </span>    <span class="constant">Time </span> <span class="constant">Current</span></span><br><span class="line">                                 <span class="constant">Dload </span> <span class="constant">Upload </span>  <span class="constant">Total </span>  <span class="constant">Spent </span>   <span class="constant">Left </span> <span class="constant">Speed</span></span><br><span class="line"><span class="number">100</span>   <span class="number">608</span>    <span class="number">0</span>   <span class="number">608</span>    <span class="number">0</span>     <span class="number">0</span>    <span class="number">542</span>      <span class="number">0</span> --<span class="symbol">:--</span><span class="symbol">:--</span>  <span class="number">0</span><span class="symbol">:</span><span class="number">00</span><span class="symbol">:</span><span class="number">01</span> --<span class="symbol">:--</span><span class="symbol">:--</span>   <span class="number">543</span></span><br><span class="line">  <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> --<span class="symbol">:--</span><span class="symbol">:--</span>  <span class="number">0</span><span class="symbol">:</span><span class="number">02</span><span class="symbol">:</span>08 --<span class="symbol">:--</span><span class="symbol">:--</span>     0<span class="symbol">curl:</span> (<span class="number">7</span>) <span class="constant">Failed </span>to connect to github-cloud.s3.amazonaws.com port <span class="number">443</span><span class="symbol">:</span> <span class="constant">Connection </span>timed out</span><br></pre></td></tr></table></figure></p>
<hr>
<p>又是S3，看来又要把路由的全局番茄打开。</p>
<h3 id="修改配置文件">修改配置文件</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#  cluster/ubuntu/config-default.sh</span></span><br><span class="line">export nodes=<span class="string">"vcap@10.10.103.250 vcap@10.10.103.162 vcap@10.10.103.223"</span> #user@IP</span><br><span class="line"><span class="preprocessor">#export roles="ai i i" # 这里需要注意 role和上面的nodes一一对应，也就是说"第一个node对应第一个role，即ai，表示master+node"，后面的i就表示是node</span></span><br><span class="line"><span class="preprocessor">#export NUM_MINIONS=$&#123;NUM_MINIONS:-3&#125;</span></span><br><span class="line"><span class="preprocessor">#export SERVICE_CLUSTER_IP_RANGE=192.168.1.0/16</span></span><br><span class="line"><span class="preprocessor">#export FLANNEL_NET=172.16.0.0/16</span></span><br></pre></td></tr></table></figure>
<h3 id="开始部署">开始部署</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="keyword">local</span>/kubernetes/<span class="keyword">cluster</span>$ KUBERNETES_PROVIDER=ubuntu ./kube-up.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>由于安装过程中老出错，再次部署的时候总提示文件被占用，服务正在运行，所以我写了个kill脚本，每次部署之前都kill一次</p>
<h3 id="部署完成">部署完成</h3><p>部署完成之后<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">kubectl</span> get nodes</span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">NAME            LABELS                                 STATUS    AGE</span><br><span class="line"><span class="number">192.168.1.148</span>   kubernetes.io/hostname=<span class="number">192.168.1.148</span>   Ready     <span class="number">6h</span></span><br><span class="line"><span class="number">192.168.1.173</span>   kubernetes.io/hostname=<span class="number">192.168.1.173</span>   Ready     <span class="number">6h</span></span><br><span class="line"><span class="number">192.168.1.241</span>   kubernetes.io/hostname=<span class="number">192.168.1.241</span>   Ready     <span class="number">6h</span></span><br><span class="line"><span class="number">192.168.1.245</span>   kubernetes.io/hostname=<span class="number">192.168.1.245</span>   Ready     <span class="number">6h</span></span><br></pre></td></tr></table></figure></p>
<h1 id="hello_world">hello world</h1><p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>需要做一个容器云，有同事在撸mesos+marathon+chronos，我就顺便折腾下kubernetes。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="kubernetes" scheme="http://blog.decbug.com/tags/kubernetes/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用go写的镜像构建微服务]]></title>
    <link href="http://blog.decbug.com/2016/02/17/go_image_build/"/>
    <id>http://blog.decbug.com/2016/02/17/go_image_build/</id>
    <published>2016-02-16T16:00:00.000Z</published>
    <updated>2016-02-18T00:16:40.666Z</updated>
    <content type="html"><![CDATA[<h1 id="功能">功能</h1><p>前面已经把私有registry，镜像下载加速器(<a href="http://docs.alauda.cn/feature/accelerator.html" target="_blank" rel="external">摸我</a>，其实就是基于registry官方镜像设置一个proxy，超级简单)完成了。<br>这个时候就可以提供类似Daoloud的代码构建功能啦</p>
<ol>
<li>用户点击构建按钮（或是其他触发方式）</li>
<li>我的镜像构建微服务收到请求后，就从内网github Clone代码</li>
<li>在刚Clone代码里找到Dockerfile</li>
<li>执行docker build -t <code>私有registry域名/用户名/镜像名：tag</code> .</li>
<li>docker push 刚build出来的镜像</li>
<li>构建日志，构建结果，入库</li>
<li>返回 <code>私有registry域名/用户名/镜像名：tag</code></li>
</ol>
<p>用户就可以 pull <code>私有registry域名/用户名/镜像名：tag</code> 啦<br><a id="more"></a></p>
<h1 id="记录">记录</h1><p>终于用go写完了一个类似DaoCloud自动构建镜像的微服务，一边google一边写，全程都是用Docker来开发的，收获还是挺大的，简单记录下。</p>
<ol>
<li>基于golang1.5.3基础镜像，然后在代码里增加一个Godeps，把用到的库都放在Godeps，然后在Dockefile里r把Goeps加入到GOPATH环境变量</li>
<li>参考了docker/distribution的Dockerfile，<a href="https://github.com/CodeJuan/distribution/blob/master/Dockerfile" target="_blank" rel="external">https://github.com/CodeJuan/distribution/blob/master/Dockerfile</a></li>
<li>由于只提供restful，就用的gorilla/mux框架</li>
<li>数据库MySQL，orm用的是gorm</li>
<li>用到了sync,crypt等库</li>
<li>在docker内使用宿主机docker daemon的方法<ul>
<li>RUN (wget “<a href="https://get.docker.com/builds/" target="_blank" rel="external">https://get.docker.com/builds/</a>…” -O /usr/bin/docker &amp;&amp;\</li>
<li>chmod +x /usr/bin/docker)</li>
<li>然后再启动的时候指定/var/run/docker.sock:/var/run/docker.sock</li>
</ul>
</li>
<li>开发测试部署都是用的Docker，数据库也是Docker。大概流程是<ul>
<li>修改代码，build我的微服务镜像，push到我的私有registry</li>
<li>docker-compose从私有registry获取刚build的镜像，由于link了MySQL，就会先启动MySQL。</li>
<li>接下来自动跑测试，我用的是python给我的微服务发post get等等。</li>
</ul>
</li>
<li>后续计划<ul>
<li>自动测试的脚本要加上从数据库里获取结果，与我的期望值进行比对。目前还是人肉比对，有些慢</li>
<li>jenkins自动触发，有代码上了库就自动拉下来完成打镜像，推镜像，拉镜像，compse up，测试的一系列操作</li>
</ul>
</li>
</ol>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="功能">功能</h1><p>前面已经把私有registry，镜像下载加速器(<a href="http://docs.alauda.cn/feature/accelerator.html">摸我</a>，其实就是基于registry官方镜像设置一个proxy，超级简单)完成了。<br>这个时候就可以提供类似Daoloud的代码构建功能啦</p>
<ol>
<li>用户点击构建按钮（或是其他触发方式）</li>
<li>我的镜像构建微服务收到请求后，就从内网github Clone代码</li>
<li>在刚Clone代码里找到Dockerfile</li>
<li>执行docker build -t <code>私有registry域名/用户名/镜像名：tag</code> .</li>
<li>docker push 刚build出来的镜像</li>
<li>构建日志，构建结果，入库</li>
<li>返回 <code>私有registry域名/用户名/镜像名：tag</code></li>
</ol>
<p>用户就可以 pull <code>私有registry域名/用户名/镜像名：tag</code> 啦<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="microservice" scheme="http://blog.decbug.com/tags/microservice/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式消息系统架构图]]></title>
    <link href="http://blog.decbug.com/2016/02/01/msg_arch/"/>
    <id>http://blog.decbug.com/2016/02/01/msg_arch/</id>
    <published>2016-01-31T17:00:00.000Z</published>
    <updated>2016-02-02T00:22:21.314Z</updated>
    <content type="html"><![CDATA[<h1 id="哈哈哈">哈哈哈</h1><p>手画的架构图</p>
<a id="more"></a>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/architecture.jpg" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="哈哈哈">哈哈哈</h1><p>手画的架构图</p>]]>
    
    </summary>
    
      <category term="architecture" scheme="http://blog.decbug.com/tags/architecture/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016学习计划]]></title>
    <link href="http://blog.decbug.com/2016/01/31/planning2016/"/>
    <id>http://blog.decbug.com/2016/01/31/planning2016/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-02-14T11:56:11.959Z</updated>
    <content type="html"><![CDATA[<p>总觉得今天才是2015的最后一天，那么就计划一下2016吧<br><a id="more"></a></p>
<h1 id="英语">英语</h1><ol>
<li>每天10个单词，要求能造句</li>
<li>每天一篇技术文章，要求能复述</li>
<li>继续每天一篇听力</li>
<li>要多开口说了，2015说的太少</li>
<li>已经可以在github上和<code>第一语言是英语的同僚</code>对话了，接下来要尝试用英文写博客</li>
</ol>
<h1 id="代码">代码</h1><ol>
<li>虽然我很讨厌架构师这个头衔，因为太多嘴炮架构师，啥都不会光会吹。但是有时候为了展示自己的实力，不得不给自己也挂上</li>
</ol>
<p>…..</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>总觉得今天才是2015的最后一天，那么就计划一下2016吧<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="planning" scheme="http://blog.decbug.com/categories/planning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(4)-nexus3]]></title>
    <link href="http://blog.decbug.com/2016/01/13/docker_distribution_nexus/"/>
    <id>http://blog.decbug.com/2016/01/13/docker_distribution_nexus/</id>
    <published>2016-01-12T16:00:00.000Z</published>
    <updated>2016-01-13T15:06:33.506Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br><a id="more"></a></p>
<h1 id="下载安装nexu3_repo_manager_oss">下载安装nexu3 repo manager oss</h1><p>下载链接<a href="https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-" target="_blank" rel="external">https://support.sonatype.com/hc/en-us/articles/213466018-Nexus-Repository-Manager-3-0-Technology-Preview-Milestone-6-Release-</a><br>我选择了<a href="http://download.sonatype.com/nexus/oss/nexus-installer-3.0.0-m6-unix-archive.tar.gz" target="_blank" rel="external">Unix bundle</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.sonatype.com/nexus/oss/nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line">tar -zxf nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nexus-installer-<span class="number">3.0</span>.<span class="number">0</span>-m6-unix-archive</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">./nexus run</span><br></pre></td></tr></table></figure></p>
<p>时间会比较久，直到出现<strong>Started Nexus Repository Manager 3.0.0-xxxxxxx</strong><br>然后访问<a href="http://192.168.1.173:8081/" target="_blank" rel="external">http://192.168.1.173:8081/</a>，其中的IP换成安装nexus3机器的IP</p>
<h1 id="配置https">配置https</h1><p>registry V2需要https，参考这里进行配置<a href="https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound" target="_blank" rel="external">https://books.sonatype.com/nexus-book/3.0/reference/security.html#ssl-inbound</a></p>
<p>还有这位印度GG的视频<a href="http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/" target="_blank" rel="external">http://www.sonatype.org/nexus/2015/09/22/docker-and-nexus-3-ready-set-action/</a></p>
<p>按照<a href="http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html" target="_blank" rel="external">http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html</a>生成不了jdx，奇怪</p>
<p>个人感觉还是nexus比原生的registry好用，希望能搞定</p>
<p>累成狗了，明天继续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>前面说到要搭建自己的私有docker云，尝试了registry，感觉还不错。<br>不过，今天有大神推荐nexus3，说很方便。所以呢，我就尝试一下。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-distribution分析]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-01-13T07:12:13.286Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry" target="_blank" rel="external">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution" target="_blank" rel="external">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br><a id="more"></a></p>
<h1 id="通过docker运行">通过docker运行</h1><p>先尝试一个简单的用法，即直接pull一个registry好了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从DaoCloud pull一个registry镜像</span></span><br><span class="line">docker pull daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker run -p <span class="number">5000</span>:<span class="number">5000</span> --name registry daocloud.io/library/registry:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">docker pull golang:<span class="number">1.5</span>.<span class="number">2</span></span><br><span class="line">docker tag golang:<span class="number">1.5</span>.<span class="number">2</span> localhost:<span class="number">5000</span>/golang</span><br><span class="line">docker push localhost:<span class="number">5000</span>/golang</span><br></pre></td></tr></table></figure></p>
<p>通过查看源码中的Dockerfile，有一句<code>VOLUME [&quot;/var/lib/registry&quot;]</code>，那么这个路径就是docker里存放push上来的镜像的路径<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 获取registry的ID</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 进入docker中调试,31f029b39e3c就是上一条命令获取到的ID</span></span><br><span class="line">docker exec -it <span class="number">31</span>f029b39e3c bash</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 这个路径下就有一个golang的文件夹</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/registry/docker/registry/v2/repositories</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 退出docker</span></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在宿主机中查看路径</span></span><br><span class="line">docker inspect <span class="number">31</span>f029b39e3c</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 查看Mounts字段</span></span><br><span class="line"><span class="preprocessor"># /var/lib/docker/volumes/3bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span></span><br><span class="line">cd /<span class="keyword">var</span>/lib/docker/volumes/<span class="number">3</span>bd3f857da3e887fd5d890066b1065450751aa3daf0d405e472e2d31abf44a61/_data</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 果然也有docker/registry/v2/repositories/golang</span></span><br></pre></td></tr></table></figure></p>
<h1 id="源码运行">源码运行</h1><h2 id="下载并安装源码">下载并安装源码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:docker/distribution.git</span><br><span class="line"><span class="built_in">cd</span> distribution</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过查看distribution的Dockerfile，发现需要把$PWD/Godeps/_workspace添加到GOPATH</span></span><br><span class="line"><span class="comment"># 不然就会编译不过，会报缺少一堆库。当然，如果不嫌麻烦的话，也可以把缺失的库都go get下来</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$GOPATH</span>:<span class="variable">$PWD</span>/Godeps/_workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile添加了DOCKER_BUILDTAGS，在make时会用到</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_BUILDTAGS=<span class="string">"include_rados include_oss include_gcs"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装</span></span><br><span class="line">sudo yum install librados2-devel</span><br><span class="line">sudo yum install httpd-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line">make clean binaries</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">bin/registry --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动，也是查看Dockerfile</span></span><br><span class="line"><span class="comment"># ENTRYPOINT ["registry"] CMD ["/etc/docker/registry/config.yml"]</span></span><br><span class="line"><span class="comment"># 而这个config.yml又是从cmd/registry/config-dev.yml拷贝过去的</span></span><br><span class="line"><span class="comment"># 所以，我们这里直接用cmd/registry/config-dev.yml</span></span><br><span class="line">bin/registry cmd/registry/config-dev.yml</span><br></pre></td></tr></table></figure>
<p>这样就运行起来了，但是仅仅是运行还不够，还得深入了解一下原理</p>
<h1 id="源码分析">源码分析</h1><h2 id="makefile">makefile</h2><p>在上一节中，输入了<code>make clean binaries</code>构建出binaries，那么这个binaries就会build<br><code>${PREFIX}/bin/registry ${PREFIX}/bin/digest ${PREFIX}/bin/registry-api-descriptor-template</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;PREFIX&#125;/bin/registry: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/registry</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/digest: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -tags <span class="string">"$&#123;DOCKER_BUILDTAGS&#125;"</span> -o $@ $&#123;GO_LDFLAGS&#125;  $&#123;GO_GCFLAGS&#125; ./cmd/digest</span><br><span class="line"></span><br><span class="line">$&#123;PREFIX&#125;/bin/registry-api-descriptor-template: version/version.go $(shell find . -type f -name '*.go')</span><br><span class="line">	@echo <span class="string">"+ $@"</span></span><br><span class="line">	@go build -o $@ $&#123;GO_LDFLAGS&#125; $&#123;GO_GCFLAGS&#125; ./cmd/registry-api-descriptor-template</span><br></pre></td></tr></table></figure></p>
<p>结合前面的启动命令<code>bin/registry cmd/registry/config-dev.yml</code>，就找到了registry的程序入口，就是<code>cmd/registry/main.go</code></p>
<h2 id="流程">流程</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd<span class="regexp">/registry/</span>main.go<span class="regexp">/main -&gt; registry/</span>registry.go/<span class="string">Cmd:</span>Excute</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>要搞自己的容器云了，那么就得有自己的docker hub，于是采用<a href="https://github.com/docker/docker-registry">docker/registry V1</a>。<br>但由于registry V1荒废许久，所以最后决定采用<a href="https://github.com/docker/distribution">docker/distribution</a><br>鉴于很多地方称呼distribution为registry V2，我这里就不区分版本了，都叫做registry好了。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(3)-搭建registry,nginx,mirror]]></title>
    <link href="http://blog.decbug.com/2016/01/12/docker_distribution_build/"/>
    <id>http://blog.decbug.com/2016/01/12/docker_distribution_build/</id>
    <published>2016-01-11T16:00:00.000Z</published>
    <updated>2016-02-18T00:07:43.666Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br><a id="more"></a></p>
<h1 id="架构">架构</h1><p><img src="http://dockerone.com/uploads/article/20150512/1e111941614512fcc0bdeb2e80ee9384.png" alt=""></p>
<p>就采用<a href="http://dockone.io/people/%E9%9A%BE%E6%98%93" target="_blank" rel="external">钟成</a>提到的架构</p>
<h1 id="进展1">进展1</h1><p>搭建了registry+front，配置了https<br>折腾一天，累成狗了，不详细写拉。直接看代码吧，都写成脚本和compose了<br><a href="https://github.com/CodeJuan/private_registry" target="_blank" rel="external">https://github.com/CodeJuan/private_registry</a></p>
<h1 id="进展2:registry集群">进展2:registry集群</h1><p>实现了负载均衡<br>用的是nginx1.9的镜像<br><a href="https://github.com/CodeJuan/private_registry/commit/7233fbf7def7b32daccc065f6ef546b234606e0d" target="_blank" rel="external">https://github.com/CodeJuan/private_registry/commit/7233fbf7def7b32daccc065f6ef546b234606e0d</a></p>
<h1 id="进展3:后端存储">进展3:后端存储</h1><p>后端存储采用的是某共享存储技术，所有的registry都访问同一个存储集群，路径都一样</p>
<h1 id="进展4：mirror">进展4：mirror</h1><blockquote>
<p>If you have multiple instances of Docker running in your environment (e.g., multiple physical or virtual machines, all running the Docker daemon), each time one of them requires an image that it doesn’t have it will go out to the internet and fetch it from the public Docker registry. By running a local registry mirror, you can keep most of the redundant image fetch traffic on your local network.</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mirror</span>:</span><br><span class="line">  <span class="attribute">restart</span>: always</span><br><span class="line">  <span class="attribute">image</span>: <span class="attribute">registry</span>:<span class="number">2.2</span>.<span class="number">1</span></span><br><span class="line">  <span class="attribute">volumes</span>:</span><br><span class="line">    - ./<span class="attribute">mirror</span>:/var/lib/registry</span><br><span class="line">  <span class="attribute">environment</span>:</span><br><span class="line">    <span class="attribute">STANDALONE</span>: <span class="string">'false'</span></span><br><span class="line">    <span class="attribute">MIRROR_SOURCE</span>: <span class="attribute">https</span>:<span class="comment">//registry-1.docker.io</span></span><br><span class="line">    <span class="attribute">MIRROR_SOURCE_INDEX</span>: <span class="attribute">https</span>:<span class="comment">//index.docker.io registry</span></span><br><span class="line">  <span class="attribute">ports</span>:</span><br><span class="line">   - <span class="number">5555</span>:<span class="number">5000</span></span><br></pre></td></tr></table></figure>
<h2 id="第一次pull">第一次pull</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">docker</span> <span class="tag">pull</span> <span class="tag">django</span></span><br><span class="line">0<span class="class">.19user</span> 0<span class="class">.06system</span> 9<span class="pseudo">:16</span><span class="class">.60elapsed</span> 0%<span class="tag">CPU</span> (0<span class="tag">avgtext</span>+0<span class="tag">avgdata</span> 26432<span class="tag">maxresident</span>)<span class="tag">k</span></span><br></pre></td></tr></table></figure>
<p>mirror log<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">884</span>f518d-f69c-<span class="number">4</span>d7d-<span class="number">8189</span>-<span class="number">0</span>afb70d1f351 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54369"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"//v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="string">"142.245µs"</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">301</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">0</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET //v2/ HTTP/1.1"</span> <span class="number">301</span> <span class="number">0</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=d38c459d-b0e8-<span class="number">4</span>e40-<span class="number">9991</span>-<span class="number">537999</span>b206ca http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.referer</span>=<span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54370"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.311715ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">200</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">2</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET /v2/ HTTP/1.1"</span> <span class="number">200</span> <span class="number">2</span> <span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:15:27Z"</span> level=error msg=<span class="string">"response completed with error"</span> err.code=<span class="string">"MANIFEST_UNKNOWN"</span> err.detail=<span class="string">"unknown manifest name=library/django tag=latest"</span> err.message=<span class="string">"manifest unknown"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">6</span>c236f9c-<span class="number">53</span>e9-<span class="number">4</span>f4a-b61a-bf90e61c4c95 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54371"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/library/django/manifests/latest"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.919044ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">404</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">120</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 vars.name=<span class="string">"library/django"</span> vars.reference=latest version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">15</span>:<span class="number">27</span> +<span class="number">0000</span>] <span class="string">"GET /v2/library/django/manifests/latest HTTP/1.1"</span> <span class="number">404</span> <span class="number">120</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="rmi_django再次pull">rmi django再次pull</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">docker</span> <span class="tag">pull</span> <span class="tag">django</span></span><br><span class="line">0<span class="class">.21user</span> 0<span class="class">.05system</span> 13<span class="pseudo">:35</span><span class="class">.23elapsed</span> 0%<span class="tag">CPU</span> (0<span class="tag">avgtext</span>+0<span class="tag">avgdata</span> 27152<span class="tag">maxresident</span>)<span class="tag">k</span></span><br></pre></td></tr></table></figure>
<p>时间还变长了</p>
<p>mirror log<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">5317</span>fae0-<span class="number">9</span>ead-<span class="number">4</span>bc4-a016-<span class="number">3</span>df313f7873a http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54431"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"//v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="string">"126.687µs"</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">301</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">0</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET //v2/ HTTP/1.1"</span> <span class="number">301</span> <span class="number">0</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=info msg=<span class="string">"response completed"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">86</span>ed3aa8-a2ec-<span class="number">4</span>b88-<span class="number">8</span>a28-adcd4780ef78 http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.referer</span>=<span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54432"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.279031ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">200</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">2</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET /v2/ HTTP/1.1"</span> <span class="number">200</span> <span class="number">2</span> <span class="string">"http://docker-hub.mymirror.com:5555//v2/"</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br><span class="line">time=<span class="string">"2016-01-22T13:36:29Z"</span> level=error msg=<span class="string">"response completed with error"</span> err.code=<span class="string">"MANIFEST_UNKNOWN"</span> err.detail=<span class="string">"unknown manifest name=library/django tag=latest"</span> err.message=<span class="string">"manifest unknown"</span> go.version=go1.<span class="number">5.2</span> http<span class="class">.request</span><span class="class">.host</span>=<span class="string">"docker-hub.mymirror.com:5555"</span> http<span class="class">.request</span><span class="class">.id</span>=<span class="number">2097</span>bff1-<span class="number">98</span>f8-<span class="number">443</span>b-<span class="number">9</span>e6d-<span class="number">9</span>c4b93d0c87f http<span class="class">.request</span><span class="class">.method</span>=GET http<span class="class">.request</span><span class="class">.remoteaddr</span>=<span class="string">"192.168.1.245:54433"</span> http<span class="class">.request</span><span class="class">.uri</span>=<span class="string">"/v2/library/django/manifests/latest"</span> http<span class="class">.request</span><span class="class">.useragent</span>=<span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span> http<span class="class">.response</span><span class="class">.contenttype</span>=<span class="string">"application/json; charset=utf-8"</span> http<span class="class">.response</span><span class="class">.duration</span>=<span class="number">4.300812ms</span> http<span class="class">.response</span><span class="class">.status</span>=<span class="number">404</span> http<span class="class">.response</span><span class="class">.written</span>=<span class="number">120</span> instance.id=<span class="number">3</span>d1817be-d0b8-<span class="number">4</span>c98-<span class="number">8560</span>-fe88c5039957 vars.name=<span class="string">"library/django"</span> vars.reference=latest version=v2.<span class="number">2.1</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.245</span> - - [<span class="number">22</span>/Jan/<span class="number">2016</span>:<span class="number">13</span>:<span class="number">36</span>:<span class="number">29</span> +<span class="number">0000</span>] <span class="string">"GET /v2/library/django/manifests/latest HTTP/1.1"</span> <span class="number">404</span> <span class="number">120</span> <span class="string">""</span> <span class="string">"docker/1.9.1 go/go1.4.2 git-commit/a34a1d5 kernel/3.19.0-25-generic os/linux arch/amd64"</span></span><br></pre></td></tr></table></figure></p>
<p>奇怪</p>
<p>更新，搞定了，原因是在compose里写环境变量不管用，等在config.yml里加上proxy，参见<br><a href="https://github.com/CodeJuan/private_registry/blob/master/mirror_config.yml" target="_blank" rel="external">https://github.com/CodeJuan/private_registry/blob/master/mirror_config.yml</a></p>
<h1 id="进展5：调通删除镜像API">进展5：调通删除镜像API</h1><p>I sent the same request with @adolphlwq ‘s request, and got the same response<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">curl</span> -v -X DELETE http://myregistry/<span class="literal">v2</span>/<span class="keyword">busybox/manifests/sha256:blablabla...</span><br><span class="line"></span></span><br><span class="line">&#123;<span class="string">"errors"</span>:[&#123;<span class="string">"code"</span>:<span class="string">"UNSUPPORTED"</span>,<span class="string">"message"</span>:<span class="string">"The operation is unsupported."</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="update">update</h2><p>I got the solution to delete images</p>
<h3 id="enable_delete">enable delete</h3><p> set the environment variable <code>REGISTRY_STORAGE_DELETE_ENABLED = True</code></p>
<h3 id="the_API_to_delete_image">the API to delete image</h3><ol>
<li>get the manifest from registry<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/manifests/<span class="tag">&lt;<span class="title">tagName</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>the <code>Docker-Content-Digest</code> is response.Header[“Docker-Content-Digest”]<br>the <code>layerDigests</code> is response.body[“fsLayers”][“blobSum”]</p>
<ol>
<li><p>delete layerDigests</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/blobs/<span class="tag">&lt;<span class="title">layerDigests</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>delete Docker-Content-Digest</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete v2/<span class="tag">&lt;<span class="title">repoName</span>&gt;</span>/manifests/<span class="tag">&lt;<span class="title">Docker-Content-Digest</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>then pull the image from registry, the response is <code>invalid character &#39;&lt;&#39; looking for beginning of value</code></p>
</li>
</ol>
<p>But when I get ‘v2/repoName/tags/list’, the tag which was been deleted is still exist…….</p>
<h1 id="参考">参考</h1><p><a href="http://www.mworks92.com/2016/01/13/secure-registry-test/" target="_blank" rel="external">关于私有安全docker registry的实验</a><br><a href="http://blog.gesha.net/archives/613/" target="_blank" rel="external">搭建Docker私有仓库Registry-v2</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>关于registry的基本知识已经了解差不多了，现在开始搭建一个可用的私有registry<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-distribution" scheme="http://blog.decbug.com/tags/docker-distribution/"/>
    
      <category term="docker-registry" scheme="http://blog.decbug.com/tags/docker-registry/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker(2)-compose]]></title>
    <link href="http://blog.decbug.com/2016/01/11/docker_compose/"/>
    <id>http://blog.decbug.com/2016/01/11/docker_compose/</id>
    <published>2016-01-10T16:00:00.000Z</published>
    <updated>2016-01-12T12:11:22.614Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br><a id="more"></a></p>
<h1 id="docker-compose简介">docker-compose简介</h1><blockquote>
<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services. Then, using a single command, you create and start all the services from your configuration. To learn more about all the features of Compose see the list of features.<br>有点类似AWS的栈的概念，通过compose把一堆docker启动并组合起来，就是一个完整的服务。<br>与dockerfile的区别：</p>
<ul>
<li>docerfile对应的是一个docker，compose定义的是一组docker。</li>
</ul>
</blockquote>
<h1 id="install">install</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="number">1.5</span>.<span class="number">2</span>/docker-compose-`uname <span class="operator">-s</span>`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 由于github经常连不上，那么也可以用DaoCloud的链接</span></span><br><span class="line"><span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<h1 id="把当前用户加到docker组">把当前用户加到docker组</h1><p>由于docker的运行需要root权限，在非root用户时每次都要输入<code>sudo</code>，有点麻烦。<br>可以把当前用户加入到docker组，这样就不用每次都输入sudo了，方法</p>
<ul>
<li>sudo vi /etc/group</li>
<li>在docker组的最后加入当前用户名<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker:</span><span class="string">x:</span><span class="number">993</span>:your_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="简单的docker-compose">简单的docker-compose</h1><p>代码在<a href="https://github.com/CodeJuan/test_docker_compose" target="_blank" rel="external">https://github.com/CodeJuan/test_docker_compose</a></p>
<h2 id="创建一个app-py">创建一个app.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen %s times.'</span> % redis.get(<span class="string">'hits'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建requirements-txt">创建requirements.txt</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">flask</span></span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<p>这里没有指定版本，那么pip install的就是最新的版本</p>
<h2 id="创建Dockerfile">创建Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FROM</span> daocloud.io/python:<span class="number">2</span>-<span class="built_in">onbuild</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">. /code</span><br><span class="line"></span><span class="built_in">WORKDIR</span> <span class="bash">/code</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">pip install -r requirements.txt</span><br><span class="line"></span><span class="built_in">CMD</span> <span class="bash">python app.py</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-yml">docker-compose.yml</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">web:</span><br><span class="line">  build: .</span><br><span class="line">  ports:</span><br><span class="line">   -<span class="ruby"> <span class="string">"5000:5000"</span></span><br><span class="line"></span>  volumes:</span><br><span class="line">   -<span class="ruby"> .<span class="symbol">:/code</span></span><br><span class="line"></span>  links:</span><br><span class="line">   -<span class="ruby"> redis</span><br><span class="line"></span>redis:</span><br><span class="line">  build: ./redis</span><br></pre></td></tr></table></figure>
<h2 id="DaoCloud的redis默认有随机密码">DaoCloud的redis默认有随机密码</h2><p>所以需要给redis写一个dockerfile<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM daocloud.io/daocloud/dao-redis:master-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量，表示不需要密码</span></span><br><span class="line">ENV REDIS_PASS=<span class="keyword">*</span><span class="keyword">*</span>None<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>之前已经把docker的常用命令都试了一遍，也通过命令启动了一个django+mysql+redis的应用。需要敲很多行命令才能完成，感觉还是有些麻烦。<br>有鉴于此，正好可以尝试一下docker-compose，通过一个yml文件，就能启动一个服务。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="docker-compose" scheme="http://blog.decbug.com/tags/docker-compose/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[django]]></title>
    <link href="http://blog.decbug.com/2016/01/05/django/"/>
    <id>http://blog.decbug.com/2016/01/05/django/</id>
    <published>2016-01-04T16:00:00.000Z</published>
    <updated>2016-01-05T12:59:17.804Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br><a id="more"></a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp products</span><br><span class="line"><span class="comment">#rm migrate</span></span><br><span class="line">python manage.py sql products</span><br><span class="line">python manage.py syncdb</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>开始撸django<br>]]>
    
    </summary>
    
      <category term="django" scheme="http://blog.decbug.com/tags/django/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[吐槽KPI]]></title>
    <link href="http://blog.decbug.com/2015/12/31/kpi/"/>
    <id>http://blog.decbug.com/2015/12/31/kpi/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2015-12-31T15:20:02.297Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>
<a id="more"></a>
<h1 id="转载—手抄版">转载—手抄版</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/blob/master/images/blog/tucao.jpg?raw=true" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>有同僚吐槽KPI，言语犀利，直指要害，发人深省。<br>余读毕，久久不能释怀，便手抄一份置于键盘边，每日提醒自己，莫要堕落，莫要成为KPI的奴隶。</p>]]>
    
    </summary>
    
      <category term="KPI" scheme="http://blog.decbug.com/tags/KPI/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件开发中的反馈]]></title>
    <link href="http://blog.decbug.com/2015/12/29/feedback_software/"/>
    <id>http://blog.decbug.com/2015/12/29/feedback_software/</id>
    <published>2015-12-28T16:00:00.000Z</published>
    <updated>2015-12-29T14:45:13.162Z</updated>
    <content type="html"><![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>
<a id="more"></a>
<h2 id="关于实验的思考">关于实验的思考</h2><p>同样的人，同样的场景，为何结果会有这么大的差异？原因就在于，是否可以用眼睛观察。<br>结合本文的主题，就是：有反馈和没反馈的区别。我们在有反馈的时候，可以及时根据输出情况调整我们的方向，以避免弯路。<br>反馈在现实中是如此重要，那么在软件开发过程中又是怎样的情况呢？</p>
<h1 id="软件开发与反馈">软件开发与反馈</h1><p>软件开发，其实也是一个输入输出系统，用户的需求经过我们的分析设计开发直到成为一个可运行的产品。<br>然而，在开发过程中，我们对反馈却不够重视。也许会有很极端的情况，我们的产品一直都不符合要求，直到最后死亡。<br>联想到现实生活中，我们看到的高楼大厦，也是从无到有创造出来的，一般很少有失败的情形，当然开发商跑路的烂尾楼除外。那么，二者究竟有什么差异导致不同的结局呢？<br>因为楼房在修建过程中，看得见摸得着，每时每刻都有反馈，细小的误差都会在最快的时间内解决。<br>那么软件开发为什么很难得到反馈呢？盖因软件不可见，只有可以运行的软件才能被我们感知。<br>在《程序员修炼之道》里有提到曳光弹</p>
<blockquote>
<p>注重实效的程序员往往更喜欢使用曳光弹。曳光弹之所以行之有效，是因为它们与真正的子弹在相同环境、相同条件下工作。它们快速飞向目标，所以枪手可以得到即时的反馈。</p>
</blockquote>
<h2 id="时间-成本">时间-成本</h2><p><img src="http://agilemodeling.com/images/costOfChangeTraditional.gif" alt=""></p>
<ul>
<li>时间越久，成本就越高</li>
<li>及时反馈，及时发现问题，及时解决</li>
</ul>
<h2 id="软件开发该如何反馈">软件开发该如何反馈</h2><p><img src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-00-36-52-metablogapi/1830.image_5F00_6DC23340.png" alt=""></p>
<p>敏捷也好，持续集成也罢，从头到尾都强调着反馈。<br><a href="http://blogs.msdn.com/b/brian_harry/archive/2011/09/20/10213910.aspx" target="_blank" rel="external">软件开发中反馈的重要性</a></p>
<h1 id="后记">后记</h1><p>这个是在公司内网发的一篇完成任务的帖子，凭记忆复述了一遍，感觉不如原文多矣。文笔变差了～sigh</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="现实中的反馈">现实中的反馈</h1><p>反馈，即信息的返回。在现实生活中，有很多反馈控制系统，系统的控制器会根据系统的输出进行调整，以期得到正确的输出。</p>
<h2 id="一个小实验">一个小实验</h2><p>试想，有如下三个场景</p>
<ol>
<li>你的前方100米有一瓶水，让你去把水取回来，允许全程睁着眼睛</li>
<li>还是把水取回来，但是只允许每一分钟睁开眼睛观察一次</li>
<li>依旧是取水，但是不允许睁开眼睛，全程都闭着眼睛。</li>
</ol>
<p>那么，会得到怎样的结果呢？</p>
<ol>
<li>场景一：可以避开所有障碍，并按照最优路径把水取回来。</li>
<li>场景二：由于可以睁眼观察，行进过程中会碰到障碍，会走弯路，但依旧可以完成任务</li>
<li>场景三：两眼一抹黑，也许走一路摔一路，也许方向完全走偏，等到后期才发现完全错误，以至于推倒重建。</li>
</ol>]]>
    
    </summary>
    
      <category term="agile" scheme="http://blog.decbug.com/tags/agile/"/>
    
      <category term="feedback" scheme="http://blog.decbug.com/tags/feedback/"/>
    
      <category term="SoftwareEngineering" scheme="http://blog.decbug.com/categories/SoftwareEngineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs(MEAN)]]></title>
    <link href="http://blog.decbug.com/2015/12/28/mean/"/>
    <id>http://blog.decbug.com/2015/12/28/mean/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2015-12-29T13:28:58.495Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>
<a id="more"></a>
<h1 id="安装">安装</h1><h2 id="通过binary安装nodejs">通过binary安装nodejs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v5.<span class="number">3.0</span>/node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line">tar -zxf node-v5.<span class="number">3.0</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> node-v5.<span class="number">3.0</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="安装MEAN">安装MEAN</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g mean-cli</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>刚试过了golang+beego+angularjs做restful api，还挺好用的，只是orm不是特别方便。所以呢，试试传说中性能也很强大的nodejs，正好MEAN比较火，那么就试试吧</p>]]>
    
    </summary>
    
      <category term="angular" scheme="http://blog.decbug.com/tags/angular/"/>
    
      <category term="express" scheme="http://blog.decbug.com/tags/express/"/>
    
      <category term="mongoDB" scheme="http://blog.decbug.com/tags/mongoDB/"/>
    
      <category term="nodejs" scheme="http://blog.decbug.com/tags/nodejs/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>