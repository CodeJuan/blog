<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2015-12-23T13:17:48.723Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[尝试travis CI]]></title>
    <link href="http://blog.decbug.com/2015/12/23/travisci/"/>
    <id>http://blog.decbug.com/2015/12/23/travisci/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2015-12-23T13:17:48.723Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>
<a id="more"></a>
<h1 id="步骤">步骤</h1><ul>
<li>首先，用github帐号登录<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>把某个工程打开，我选的工程是<a href="https://github.com/CodeJuan/python_convert_json2lua" target="_blank" rel="external">https://github.com/CodeJuan/python_convert_json2lua</a></li>
<li><p>创建’.travis.yml’，根据<a href="https://docs.travis-ci.com/user/languages/python" target="_blank" rel="external">https://docs.travis-ci.com/user/languages/python</a>填写一个python的yml</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">language:</span> python</span><br><span class="line"><span class="label">python:</span></span><br><span class="line">  - <span class="string">"2.7"</span></span><br><span class="line"><span class="preprocessor"># command to install dependencies</span></span><br><span class="line"><span class="label">install:</span> <span class="string">"pip install simplejson"</span></span><br><span class="line"><span class="preprocessor"># command to run tests</span></span><br><span class="line"><span class="label">script:</span> python go.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击工程的status图标，拷贝链接<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/travis_status.png" alt=""></p>
</li>
<li><p>在readme加上</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua.svg?branch=master</span>)](<span class="link_url">https://travis-ci.org/CodeJuan/python_convert_json2lua</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果如图</p>
</li>
</ul>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/travisci/demo.png" alt=""></p>
<h1 id="感想">感想</h1><ul>
<li>有提交就触发，很方便</li>
<li>log很完整</li>
<li>可以自由配置环境</li>
<li>省去自己搭建jenkins的步骤</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>看到别的开源软件的ReadMe上总一些build success的图标，感觉很帅，也想尝试一下。</p>]]>
    
    </summary>
    
      <category term="travisCI" scheme="http://blog.decbug.com/tags/travisCI/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(2):web框架revel]]></title>
    <link href="http://blog.decbug.com/2015/12/15/golang_revel/"/>
    <id>http://blog.decbug.com/2015/12/15/golang_revel/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-22T15:15:56.636Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，<a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a><br>接下来就要深入学习一下了。</p>
<a id="more"></a>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>上回已经把revel下载好了，顺利搞出个hello world，<a href="http://blog.decbug.com/2015/11/28/golang/">http://blog.decbug.com/2015/11/28/golang/</a><br>接下来就要深入学习一下了。</p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一次去中心化的性能优化]]></title>
    <link href="http://blog.decbug.com/2015/12/15/decentralized/"/>
    <id>http://blog.decbug.com/2015/12/15/decentralized/</id>
    <published>2015-12-14T16:00:00.000Z</published>
    <updated>2015-12-15T12:43:28.345Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>
<a id="more"></a>
<h1 id="过程">过程</h1><h2 id="原来的流程">原来的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/data2compute.jpg" alt=""></p>
<p>如图，为简化流程，只画了一个存储节点和计算节点<code>典型的数据向计算迁移</code>，当数据特别大（数十G～百G）的时候，从存储节点拷贝到计算节点将特别耗时间。</p>
<p>而计算工具的身材特别苗条，几百M而已，拷贝过去也就是分分钟的事，如果能把计算工具放到存储节点，拷贝的时间就可以忽略不计，这个方法叫<code>计算向数据迁移</code></p>
<h2 id="优化后的流程">优化后的流程</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/decentralized/compute2data.jpg" alt=""></p>
<p>只是把百兆的计算工具拷过去，省去以前拷贝几百G数据的步骤～</p>
<h1 id="结论">结论</h1><p>虽然不是什么很新的技术，但是简单几步就解决了业务问题，还是比较值得高兴一下的。</p>
<p>后面如果能把计算工具封装成docker，放到docker registry上去，每次计算的时候，存储节点把镜像pull过来，应该会比较好玩吧～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>一个分布式计算系统，在数据量越来越大的情况下，处理时间太久，不符合用户需求，需要优化。</p>
<p>经过分析，发现有一个从存储节点把数据拷贝到计算节点的动作，这个过程比较耗时间。如果能把这个拷贝过程去掉，对于系统的整体性能将会有很大提升。</p>]]>
    
    </summary>
    
      <category term="decentralized" scheme="http://blog.decbug.com/tags/decentralized/"/>
    
      <category term="optimization" scheme="http://blog.decbug.com/tags/optimization/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[讲讲缓存]]></title>
    <link href="http://blog.decbug.com/2015/12/14/cache/"/>
    <id>http://blog.decbug.com/2015/12/14/cache/</id>
    <published>2015-12-13T16:00:00.000Z</published>
    <updated>2015-12-14T13:34:22.846Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>
<a id="more"></a>
<h1 id="存储金字塔">存储金字塔</h1><p>首先要说的算存储金字塔，如下图所示</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/hierarchy.jpg" alt=""></p>
<p>可以看到，从上往下，速度越慢，容量越大，相应的成本就越低。</p>
<p>如果成本允许的情况下，我们自然尽量采购金字塔顶端的设备，然而现实却是残酷的，我们没有那么多资源可以挥霍。</p>
<h1 id="缓存的概念">缓存的概念</h1><p>在计算机体系中，缓存的概念其实是相对的。</p>
<ul>
<li>寄存器是L1的缓存</li>
<li>L1是L2的缓存</li>
<li>CPU缓存是内存的缓存</li>
<li>内存是硬盘的缓存</li>
</ul>
<h1 id="CPU_Cache_hit_&amp;_miss">CPU Cache hit &amp; miss</h1><p>我不说话，我只上图，能用图说清楚的，我就不说话。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/the-memory-system-15-638.jpg" alt=""></p>
<h2 id="这里顺便提以下CPU的提前预取？">这里顺便提以下CPU的提前预取？</h2><blockquote>
<p>为了利用空间局部性，同时也为了覆盖传输延迟，可以随机性地在数据被用到之前就将其取入缓存。这一技术称为预取（Prefetch）。本质上讲，加载整个缓存块其实即是一种预取。</p>
</blockquote>
<p>大概就是，CPU会提前给你把数据取过来，如果取到的数据正好是你要用的数据，那么恭喜你，速度会很快。</p>
<h2 id="阶梯延时">阶梯延时</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cpu_cache.jpg" alt=""></p>
<h1 id="内存数据库">内存数据库</h1><p>也是将热点数据放在内存中，相当于是把内存当作硬盘的缓存</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/redis-memcached-pdf-12-728.jpg" alt=""></p>
<h1 id="硬盘自身的缓存">硬盘自身的缓存</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/disk.jpg" alt=""></p>
<h1 id="CDN">CDN</h1><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cache/cache-hit-ratio-latency-graph.png" alt=""></p>
<h1 id="总结">总结</h1><ul>
<li>可以看到，缓存命中的性能会比缓存miss高很多</li>
<li>合理利用缓存，将热点数据放在缓存中</li>
<li>缓存的概念很广泛，不仅仅是CPU缓存</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>缓存，可以说在计算机体系到处被用到。</p>
<ul>
<li>CPU有指令缓存，还有L1L2L3缓存；</li>
<li>磁盘为了提高性能也有缓存；</li>
<li>就拿web开发来说，也会将经常访问的内容放到离用户更近的服务器上。</li>
</ul>
<p>为何缓存的使用如此普遍？这个问题的确值得深入探讨一下。</p>]]>
    
    </summary>
    
      <category term="cache" scheme="http://blog.decbug.com/tags/cache/"/>
    
      <category term="storage" scheme="http://blog.decbug.com/tags/storage/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openwrt内啥内啥]]></title>
    <link href="http://blog.decbug.com/2015/12/03/openwrt/"/>
    <id>http://blog.decbug.com/2015/12/03/openwrt/</id>
    <published>2015-12-02T16:00:00.000Z</published>
    <updated>2015-12-13T06:09:18.531Z</updated>
    <content type="html"><![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>
<a id="more"></a>
<h1 id="HG225D">HG225D</h1><p>购于淘宝，一定要uboot的刷不死版本，如果可以的话，建议买升级到64M内存的版本，速度会快一些。</p>
<h2 id="刷机">刷机</h2><ul>
<li>固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，<a href="http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d" target="_blank" rel="external">http://pan.baidu.com/s/1kTst0gv#path=%252Fhg255d</a></li>
<li>按住reset不放，再给路由通电，直到power灯开始一闪一闪</li>
<li>进入<a href="192.168.1.1">192.168.1.1</a>，此时看到的是刷机界面，选择刚才的固件<code>openwrt-ramips-rt305x-hg255d-aria2-shadowsocks</code>，耐心等待即可</li>
</ul>
<h2 id="内啥内啥的配置">内啥内啥的配置</h2><p>需要配置ss、Redsocks和chinadns，其中chinadns的作用就是，只有被墙了网站才会走ss。</p>
<ul>
<li>进入服务-ss，填入你的服务器信息</li>
<li>进入服务-Redsocks，勾选启用Redsocks，在透明代理区域中，填写正确的代理服务器、代理服务器端口、代理服务器类型，加密方式以及密码。其中代理服务器类型选择<code>ss代理</code></li>
<li>还是在Redsocks，UDP转发区域，也填入和透明代理一样的信息</li>
<li>进入网络-DHCP/DNS，在常规设置的DNS转发处填写<code>127.0.0.1#1153</code></li>
<li>还是DHCP/DNS，点击HOSTS和解析文件，勾选<code>忽略解析文件</code></li>
</ul>
<p>再应用并保存所用配置，重启路由，就可以嘿嘿嘿了！</p>
<h1 id="DB120">DB120</h1><ul>
<li>刷飞翔的<a href="http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/" target="_blank" rel="external">http://downloads.openwrt.org.cn/OpenWrt-DreamBox/barrier_breaker/14.07/</a></li>
<li>然后更新chinaDNS-C到1.21<br><a href="http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk" target="_blank" rel="external">http://iweb.dl.sourceforge.net/project/openwrt-dist/chinadns/chinadns-c/1.2.1-102ab46/ChinaDNS-C_1.2.1-1_brcm63xx.ipk</a></li>
<li>不更新的话，就有一些访问不了</li>
</ul>
<h1 id="WNDR4300">WNDR4300</h1><ul>
<li>下载石像鬼<a href="https://github.com/gygy/gygy.github.io" target="_blank" rel="external">https://github.com/gygy/gygy.github.io</a></li>
<li>按住reset开机</li>
<li>等电源灯变绿并一闪一闪</li>
<li>用tftp把刚下载好的固件传给4300</li>
<li>刷好后关机再开机以激活5G</li>
<li>填写相关配置，然后<a href="https://github.com/gygy" target="_blank" rel="external">@gygy</a>提供了三种方式，点一下按钮就OK了。</li>
</ul>
<h1 id="FAST-FWR171失败的经历，可以不用看">FAST-FWR171失败的经历，可以不用看</h1><h2 id="原厂固件">原厂固件</h2><p>FWR171到703N<br><a href="http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0" target="_blank" rel="external">http://pan.baidu.com/wap/share/home?uk=3457154703&amp;third=0</a></p>
<h2 id="openwrt">openwrt</h2><p><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin</a><br><a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin" target="_blank" rel="external">http://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-factory.bin</a></p>
<p>先刷factory</p>
<p>然后ssh root@192.168.1.1</p>
<p>passwd改密码</p>
<h2 id="开启wifi">开启wifi</h2><p>/etc/config/wireless  radio0的disable一行需要删掉或注释掉<br>顺便加个密<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'psk2'  </span></span><br><span class="line"></span><br><span class="line">config wifi-iface</span><br><span class="line">        <span class="keyword">option</span> device   radio0</span><br><span class="line">        <span class="keyword">option</span> network  lan</span><br><span class="line">        <span class="keyword">option</span> mode     ap</span><br><span class="line">        <span class="keyword">option</span> ssid     OpenWrt</span><br><span class="line">        <span class="keyword">option</span> encryption <span class="comment">'psk2'</span></span><br><span class="line">        <span class="keyword">option</span> <span class="keyword">key</span> <span class="comment">'openwrt1234'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="改_/etc/config/network">改 /etc/config/network</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'loopback'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'lo'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'127.0.0.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.0.0.0'</span></span><br><span class="line"></span><br><span class="line">config globals <span class="comment">'globals'</span></span><br><span class="line">        <span class="keyword">option</span> ula_prefix <span class="comment">'fdaa:5a73:9c8e::/48'</span></span><br><span class="line"></span><br><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'static'</span></span><br><span class="line">        <span class="keyword">option</span> ipaddr <span class="comment">'192.168.1.1'</span></span><br><span class="line">        <span class="keyword">option</span> netmask <span class="comment">'255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure>
<h2 id="搞挂了">搞挂了</h2><p>电脑的IP  192.168.1.2  gateway192.168.1.1 255.255.255.0<br>first_boot<br>reboot -f</p>
<p>ssh 192.168.1.1</p>
<h2 id="network">network</h2><p>加上<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config <span class="keyword">interface</span> <span class="comment">'lan'</span></span><br><span class="line">        <span class="keyword">option</span> ifname <span class="comment">'eth0'</span></span><br><span class="line">        <span class="keyword">option</span> force_link <span class="comment">'1'</span></span><br><span class="line">        <span class="keyword">option</span> type <span class="comment">'bridge'</span></span><br><span class="line"><span class="preprocessor">#       option proto 'static'</span></span><br><span class="line">        <span class="keyword">option</span> proto <span class="comment">'dhcp'</span></span><br><span class="line"><span class="preprocessor">#       option ipaddr '192.168.1.1'</span></span><br><span class="line"><span class="preprocessor">#       option netmask '255.255.255.0'</span></span><br><span class="line">        <span class="keyword">option</span> ip6assign <span class="comment">'60'</span></span><br></pre></td></tr></table></figure></p>
<p>连接已有的路由上网</p>
<p>装东西</p>
<p>软件安装</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="operator"><span class="keyword">update</span></span><br><span class="line">opkg <span class="keyword">install</span> kmod-macvlan ip</span></span><br></pre></td></tr></table></figure>
<p>编辑开机启动文件，在开机时虚拟出另外一张有线网卡，以区别WAN和LAN。</p>
<p>vi /etc/rc.local</p>
<p>在文件的exit 0之前加入以下内容。这里的MAC地址可以改成别的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ip</span> <span class="tag">link</span> <span class="tag">add</span> <span class="tag">link</span> <span class="tag">eth0</span> <span class="tag">eth2</span> <span class="tag">type</span> <span class="tag">macvlan</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">hw</span> <span class="tag">ether</span> 00<span class="pseudo">:11</span><span class="pseudo">:22</span><span class="pseudo">:33</span><span class="pseudo">:44</span><span class="pseudo">:5b</span></span><br><span class="line"><span class="tag">ifconfig</span> <span class="tag">eth2</span> <span class="tag">up</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">exit</span> 0</span><br></pre></td></tr></table></figure></p>
<p>把虚拟出的网卡分配给LAN使用。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uci set network<span class="class">.lan</span><span class="class">.ifname</span>=eth2</span><br></pre></td></tr></table></figure></p>
<p>创建WAN接口。这里的协议设为DHCP，可以直接将703N插入已经存在的有线网络中，即可上网。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uci set network.wan=interface</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.proto</span>=dhcp</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.hostname</span>=openwrt-wan</span><br><span class="line">uci set network<span class="class">.wan</span><span class="class">.ifname</span>=eth0</span><br><span class="line">uci commit network</span><br></pre></td></tr></table></figure>
<h2 id="install_ss">install ss</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg <span class="keyword">install</span> http://ncu.dl.sourceforge.net/<span class="keyword">project</span>/openwrt-dist/shadowsocks-libev/<span class="number">2.4</span>.<span class="number">1</span>-<span class="number">6</span>f44d53/ar71xx/shadowsocks-libev-spec-polarssl_2.<span class="number">4.1</span>-<span class="number">1</span>_ar71xx.ipk</span><br></pre></td></tr></table></figure>
<p>提示空间不够。。。。</p>
<h2 id="刷明月固件">刷明月固件</h2><ul>
<li><a href="http://pan.baidu.com/s/1i3uYGeh#path=%252F" target="_blank" rel="external">http://pan.baidu.com/s/1i3uYGeh#path=%252F</a>，下载最新的7100的upgrade固件</li>
<li>scp固件到路由的/tmp</li>
<li>ssh连上路由，cd到/tmp</li>
<li><code>sysupgrade -v openwrt-ar71xx-generic-tl-wr2543-v1-squashfs-sysupgrade.bin</code></li>
<li>耐心等待</li>
</ul>
<h1 id="参考">参考</h1><p><a href="http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html" target="_blank" rel="external">http://www.cnblogs.com/Lifehacker/archive/2013/04/13/failure_on_fwr171-3g_with_openwrt.html</a><br><a href="http://www.isucc.me/555.html" target="_blank" rel="external">http://www.isucc.me/555.html</a><br><a href="http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html" target="_blank" rel="external">http://shuyz.com/install-shadowsocks-on-hg255d-openwrt-and-config-nat.html</a><br><a href="http://www.tuicool.com/articles/3Q7V7z3" target="_blank" rel="external">http://www.tuicool.com/articles/3Q7V7z3</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="起因">起因</h1><p>最近撸golang，下三方包太痛苦，挂代理太郁闷，所以。。。。。搞个openwrt全局内啥。</p>
<p>把家里的老路由FWR171翻出来刷openwrt，但是还没搞定（具体折腾经历在本文第二段）。只好在淘宝买了个华为HG225D，59+12的邮费，半个小时就搞定啦，太方便了，所以简单记录一下。</p>
<p>刷完HG225D之后，又翻出个DB120，顺手也弄了下。最后，由于我的集群都是千兆网卡，而HG225D的有线只有百兆，所以趁着双12在京东买了个WNDR4300，299-40=259。</p>
<p>至此，已经有三台openwrt设备了，嘿嘿嘿！</p>]]>
    
    </summary>
    
      <category term="openwrt" scheme="http://blog.decbug.com/tags/openwrt/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试open falcon]]></title>
    <link href="http://blog.decbug.com/2015/11/29/open_falcon/"/>
    <id>http://blog.decbug.com/2015/11/29/open_falcon/</id>
    <published>2015-11-28T16:00:00.000Z</published>
    <updated>2015-11-29T09:47:36.738Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y redis</span><br><span class="line">sudo yum install -y mysql-server</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOME=/home/work</span><br><span class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$HOME</span>/open-falcon</span><br><span class="line">mkdir -p <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/scripts.git</span><br><span class="line"><span class="built_in">cd</span> ./scripts/</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/graph-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/dashboard-db-schema.sql</span><br><span class="line"></span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/portal-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/links-db-schema.sql</span><br><span class="line">mysql -h localhost -u root -p &lt; db_schema/uic-db-schema.sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DOWNLOAD=<span class="string">"https://github.com/XiaoMi/open-falcon/releases/download/0.0.5/open-falcon-0.0.5.tar.gz"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"></span><br><span class="line">mkdir ./tmp</span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget <span class="variable">$DOWNLOAD</span> -O open-falcon-latest.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxf open-falcon-latest.tar.gz -C ./tmp/</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `find ./tmp/ -name <span class="string">"*.tar.gz"</span>`;<span class="keyword">do</span> \</span><br><span class="line">    app=`<span class="built_in">echo</span> <span class="variable">$x</span>|cut <span class="operator">-d</span> <span class="string">'-'</span> <span class="operator">-f</span>2`; \</span><br><span class="line">    mkdir -p <span class="variable">$app</span>; \</span><br><span class="line">    tar -zxf <span class="variable">$x</span> -C <span class="variable">$app</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>尝试一下小米的open falcon</p>]]>
    
    </summary>
    
      <category term="monitoring" scheme="http://blog.decbug.com/tags/monitoring/"/>
    
      <category term="ops" scheme="http://blog.decbug.com/tags/ops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学golang(2):初学]]></title>
    <link href="http://blog.decbug.com/2015/11/28/golang/"/>
    <id>http://blog.decbug.com/2015/11/28/golang/</id>
    <published>2015-11-27T16:00:00.000Z</published>
    <updated>2015-12-17T13:51:50.631Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/" target="_blank" rel="external">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>
<a id="more"></a>
<hr>
<h1 id="安装go">安装go</h1><p>原本以为需要用源码来安装，上网查了一下，得知centos7可以直接<code>yum</code>安装，so easy。</p>
<h2 id="还是通过二进制安装一下吧">还是通过二进制安装一下吧</h2><p>yum安装的版本太低了，还是得自己安装1.5<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz</span></span><br><span class="line">tar -C /usr/local -xzf go1.<span class="number">5.1</span><span class="class">.linux-amd64</span><span class="class">.tar</span><span class="class">.gz</span></span><br><span class="line">echo <span class="string">'export GOROOT="/usr/local/go"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export GOPATH="$HOME/code/go_code"'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; ~/<span class="class">.bashrc</span></span><br><span class="line">. ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="golang_plugin_for_idea">golang plugin for idea</h1><p>作为idea的用户，自然首选的IDE还是idea，所以得装一个golang的插件<a href="https://github.com/go-lang-plugin-org/go-lang-idea-plugin" target="_blank" rel="external">https://github.com/go-lang-plugin-org/go-lang-idea-plugin</a><br>然后参考<a href="https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html" target="_blank" rel="external">https://www.jetbrains.com/idea/help/managing-enterprise-plugin-repositories.html</a>进行安装即可</p>
<ol>
<li>file-settings-plugins</li>
<li>Browse repo</li>
<li>Manage repo</li>
<li>Custom plugin</li>
<li>add url <code>https://plugins.jetbrains.com/plugins/nightly/5047</code>，这个nightly不错，我先试试</li>
<li>一路ok/close</li>
<li>然后在file-settings-plugins输入go,选择安装。</li>
</ol>
<p>接下来就创建一个新的go工程，SDK就选择之前解压出来的<code>/usr/local/go</code></p>
<hr>
<h1 id="hello_world">hello world</h1><p>创建一个hello.go，内容如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">     fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后go run hello.go<br>也可以打包成一个可执行文件，go build hello.go</p>
<h1 id="simple_http_server">simple http server</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> handler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"Hi there, I love %s!"</span>, r.URL.Path[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="传说中的routine">传说中的routine</h1><p>大概说一下我的理解，由于线程的切换成本较高，上下文，栈恢复之类的，所以需要考虑其他办法。<br>多个routine，可以粗略的理解为共用一个线程，其CPU的抢占都是由routine自身来决定。由于只有一个线程，所以免去了切换的开销。<br>感觉还是怪怪的，就先简单理解为routine的开销较小，可以有更高的并发数吧。</p>
<hr>
<h1 id="web_frame">web frame</h1><p>打算试试revel<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/revel/cmd/revel</span><br></pre></td></tr></table></figure></p>
<p>提示<code>package golang.org/x/net/websocket: unrecognized import path &quot;golang.org/x/net/websocket&quot;</code></p>
<p>我只在我的办公机上装了SS，其他的几台挖掘机都没装，所以下不了。。<br>看来我真的得把我的openwrt的路由弄好，用来全局Fxxk了。<br>心情不好，今天就玩到这吧，擦擦擦！</p>
<blockquote>
<p>把内啥路由搞好了，HOHO，链接<a href="http://blog.decbug.com/2015/12/03/openwrt/">http://blog.decbug.com/2015/12/03/openwrt/</a>。搞好了三台，网件WNDR4300、华为HG225D和DB120，搞挂了一个迅捷171。继续开搞吧</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get revel framework</span></span><br><span class="line">go get github.com/revel/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get 'revel' command</span></span><br><span class="line">go get github.com/revel/cmd/revel</span><br><span class="line"></span><br><span class="line"><span class="comment"># get samples and run chat app</span></span><br><span class="line">go get github.com/revel/samples</span><br><span class="line">vi src/github.com/codejuan/my-app/conf/app.conf <span class="comment">#8080</span></span><br><span class="line">sudo /sbin/iptables -I INPUT -p tcp -m tcp --dport <span class="number">8080</span> -j ACCEPT</span><br><span class="line">revel run github.com/revel/samples/chat</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>最近经常听到有同事在安利golang，颇为心动。恰巧又看到这篇文章<a href="http://blog.parse.com/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/">How We Moved Our API From Ruby to Go and Saved Our Sanity</a>，于是便忍不住了，打算试试。<br>毕竟是谷歌亲儿子，想必会有一番不错的表现。</p>]]>
    
    </summary>
    
      <category term="golang" scheme="http://blog.decbug.com/tags/golang/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[virtualbox共享文件夹]]></title>
    <link href="http://blog.decbug.com/2015/11/24/virtualbox_share/"/>
    <id>http://blog.decbug.com/2015/11/24/virtualbox_share/</id>
    <published>2015-11-23T16:00:00.000Z</published>
    <updated>2015-11-24T12:57:50.114Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>
<a id="more"></a>
<hr>
<h1 id="步骤">步骤</h1><h2 id="设置共享文件夹">设置共享文件夹</h2><p>点击virtualbox的菜单，选择devices-shared folders settings<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/1.png" alt=""></p>
<h2 id="选中host上的一个文件夹">选中host上的一个文件夹</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/2.png" alt=""></p>
<h2 id="安装virtualbox插件">安装virtualbox插件</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/3.png" alt=""><br>会提示没有插件什么什么的，一路点next就行<br>装完之后需要重启</p>
<h2 id="映射host共享文件夹">映射host共享文件夹</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use x: \\vboxsvr\share</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/virtualbox/4.png" alt=""></p>
<p>然后在网络驱动器就会出现一个X盘，之后就能通过它来传文件了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我的日常系统是ubuntu，但由于特殊国情，很多事情在只能在windows上面才能做。<br>所以呢，只好用virtualbox弄了xp，专门用来做见不得人之事，比如用迅雷下载某些资源。<br>下载完成之后，得把东西拷回到ubuntu吧，这个时候就可以通过共享文件夹的方式来做。</p>]]>
    
    </summary>
    
      <category term="share" scheme="http://blog.decbug.com/tags/share/"/>
    
      <category term="virtualbox" scheme="http://blog.decbug.com/tags/virtualbox/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过python将json转换成lua]]></title>
    <link href="http://blog.decbug.com/2015/11/23/json2lua/"/>
    <id>http://blog.decbug.com/2015/11/23/json2lua/</id>
    <published>2015-11-22T16:00:00.000Z</published>
    <updated>2015-11-24T11:43:35.314Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>某需求要将json转换成lua代码，同事们的做法是人肉翻译，肉眼读json，然后一条条拷贝到lua，如果遇到嵌套多的情况，一不小心就搞错了。<br>即使没有出错，顺利翻译完成，一条简单的json将耗时半小时。如果是100条，将浪费50个小时，太恐怖了。</p>
<p>我在翻译了一次之后，实在是无法接受，于是想通过python来解析json，然后按照格式生成lua代码，也就是<code>用代码写代码</code>。<br>这样可以避免机械劳动，不再浪费生命，可以从原来的半小时减少到1分钟，并且不容易出错。</p>
<a id="more"></a>
<hr>
<h1 id="效果">效果</h1><p>原始的json文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">glossary</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">title</span>": <span class="value"><span class="string">"example glossary"</span></span>,</span><br><span class="line">		"<span class="attribute">GlossDiv</span>": <span class="value">&#123;</span><br><span class="line">            "<span class="attribute">title</span>": <span class="value"><span class="string">"S"</span></span>,</span><br><span class="line">			"<span class="attribute">GlossList</span>": <span class="value">&#123;</span><br><span class="line">                "<span class="attribute">GlossEntry</span>": <span class="value">&#123;</span><br><span class="line">                    "<span class="attribute">ID</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">SortAs</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">GlossTerm</span>": <span class="value"><span class="string">"Standard Generalized Markup Language"</span></span>,</span><br><span class="line">					"<span class="attribute">Acronym</span>": <span class="value"><span class="string">"SGML"</span></span>,</span><br><span class="line">					"<span class="attribute">Abbrev</span>": <span class="value"><span class="string">"ISO 8879:1986"</span></span>,</span><br><span class="line">					"<span class="attribute">GlossDef</span>": <span class="value">&#123;</span><br><span class="line">                        "<span class="attribute">para</span>": <span class="value"><span class="string">"A meta-markup language, used to create markup languages such as DocBook."</span></span>,</span><br><span class="line">						"<span class="attribute">GlossSeeAlso</span>": <span class="value">[<span class="string">"GML"</span>, <span class="string">"XML"</span>]</span><br><span class="line">                    </span>&#125;</span>,</span><br><span class="line">					"<span class="attribute">GlossSee</span>": <span class="value"><span class="string">"markup"</span></span><br><span class="line">                </span>&#125;</span><br><span class="line">            </span>&#125;</span><br><span class="line">        </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>转换成lua的样子<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> msg = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> glossary = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossDiv = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossList = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossEntry = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> GlossDef = &#123;&#125;</span><br><span class="line">GlossDef.GlossSeeAlso = &#123;<span class="string">"GML"</span>,<span class="string">"XML"</span>&#125;</span><br><span class="line">GlossDef.para = <span class="string">"A meta-markup language, used to create markup languages such as DocBook."</span></span><br><span class="line">GlossEntry.GlossDef = GlossDef</span><br><span class="line">GlossEntry.GlossSee = <span class="string">"markup"</span></span><br><span class="line">GlossEntry.Acronym = <span class="string">"SGML"</span></span><br><span class="line">GlossEntry.GlossTerm = <span class="string">"Standard Generalized Markup Language"</span></span><br><span class="line">GlossEntry.Abbrev = <span class="string">"ISO 8879:1986"</span></span><br><span class="line">GlossEntry.SortAs = <span class="string">"SGML"</span></span><br><span class="line">GlossEntry.ID = <span class="string">"SGML"</span></span><br><span class="line">GlossList.GlossEntry = GlossEntry</span><br><span class="line">GlossDiv.GlossList = GlossList</span><br><span class="line">GlossDiv.title = <span class="string">"S"</span></span><br><span class="line">glossary.GlossDiv = GlossDiv</span><br><span class="line">glossary.title = <span class="string">"example glossary"</span></span><br><span class="line">msg.glossary = glossary</span><br></pre></td></tr></table></figure></p>
<h1 id="思路">思路</h1><ul>
<li>simplejson解析原始的json文件</li>
<li>识别出array，subitem，alue</li>
<li>subitem递归下去，然后一层一层往上汇总</li>
<li>根据规律分别组装出lua代码</li>
<li>输出</li>
</ul>
<hr>
<h1 id="步骤">步骤</h1><h3 id="simplejson">simplejson</h3><p>先要安装simplejson</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install simplejson</span><br></pre></td></tr></table></figure>
<h3 id="分析value">分析value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printValue</span><span class="params">(key, value, prefix, substring)</span>:</span></span><br><span class="line">    left = <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(prefix, key, <span class="string">' = '</span>)</span><br><span class="line">    right = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'None'</span> <span class="keyword">in</span> substring:</span><br><span class="line">        right = <span class="string">'gLuaNULL.null'</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'True'</span> <span class="keyword">in</span> substring:</span><br><span class="line">        right = <span class="string">'true'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = <span class="string">'"&#123;&#125;"'</span>.format(value)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125;'</span>.format(left, right)</span><br></pre></td></tr></table></figure>
<p>根据不同的值，转换成lua的结果。例如<code>None</code>对应的是<code>gLuaNULL.null</code>，<code>True</code>对应<code>true</code>,普通的值就等于’”json中的值”‘<br>例如<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"GlossEntry": &#123;</span><br><span class="line">		"ID": "SGML"</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>转换成<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlossEntry.ID = <span class="string">"SGML"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="分析array">分析array</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"GlossSeeAlso": ["GML", "XML"]</span><br></pre></td></tr></table></figure>
<p>类似于这样的，就要转换成<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GlossDef.GlossSeeAlso = &#123;<span class="string">"GML"</span>,<span class="string">"XML"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>python代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printArray</span><span class="params">(key, value, prefix)</span>:</span></span><br><span class="line">    elements = <span class="string">'&#123;'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> value:</span><br><span class="line">        elements += <span class="string">'"&#123;&#125;",'</span>.format(i)</span><br><span class="line">    elements = elements[:-<span class="number">1</span>]</span><br><span class="line">    elements += <span class="string">'&#125;'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;'</span>.format(prefix, key, <span class="string">' = '</span>, elements)</span><br></pre></td></tr></table></figure></p>
<h3 id="分析subitem">分析subitem</h3><p>需要用到递归，将item不停的传递下去，直到完成<br>不多解释了，直接看代码吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSubItem</span><span class="params">(key, value, prefix)</span>:</span></span><br><span class="line">    <span class="comment">#print '&#123;&#125;11111111111'.format(key)</span></span><br><span class="line">    local = <span class="string">'local '</span> + key + <span class="string">' = &#123;&#125;'</span></span><br><span class="line">    <span class="keyword">print</span> local</span><br><span class="line">    parseJson(value, key+<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;&#125;&#123;&#125; = &#123;&#125;'</span>.format(prefix, key, key)</span><br><span class="line">    <span class="comment">#print '&#123;&#125;22222222222'.format(key)</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="代码链接">代码链接</h1><p>放在<a href="https://github.com/CodeJuan/python_convert_json2lua" target="_blank" rel="external">https://github.com/CodeJuan/python_convert_json2lua</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>某需求要将json转换成lua代码，同事们的做法是人肉翻译，肉眼读json，然后一条条拷贝到lua，如果遇到嵌套多的情况，一不小心就搞错了。<br>即使没有出错，顺利翻译完成，一条简单的json将耗时半小时。如果是100条，将浪费50个小时，太恐怖了。</p>
<p>我在翻译了一次之后，实在是无法接受，于是想通过python来解析json，然后按照格式生成lua代码，也就是<code>用代码写代码</code>。<br>这样可以避免机械劳动，不再浪费生命，可以从原来的半小时减少到1分钟，并且不容易出错。</p>]]>
    
    </summary>
    
      <category term="json" scheme="http://blog.decbug.com/tags/json/"/>
    
      <category term="lua" scheme="http://blog.decbug.com/tags/lua/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(4):rabbitmq-server、kombu、tcpdump]]></title>
    <link href="http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/"/>
    <id>http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/</id>
    <published>2015-11-09T16:00:00.000Z</published>
    <updated>2015-11-17T14:50:21.882Z</updated>
    <content type="html"><![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html" target="_blank" rel="external">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html" target="_blank" rel="external">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>说起来还是ubuntu安装简单，apt-get install rabbitmq-server就够了</p>
<h1 id="management_plugin">management plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用management</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p>然后访问<code>serverIP:15672</code>，就可以进入管理页面。此时只有guest帐号可用，然而rabbitmq-server的默认配置，guest帐号只能本机才能用，所以需要add_user</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加用户</span></span><br><span class="line">sudo rabbitmqctl add_user <span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置管理员权限</span></span><br><span class="line">sudo rabbitmqctl <span class="built_in">set</span>_user_tags <span class="built_in">test</span> administrator</span><br></pre></td></tr></table></figure>
<p>然后再访问<code>serverIP:15672</code>，用刚才创建的test账户登录，就能看到管理界面了。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_management.png" alt=""></p>
<h1 id="tracing_plugin">tracing plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/bin</span><br><span class="line"><span class="comment"># enable tracing</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_tracing</span><br><span class="line"><span class="comment"># trace on</span></span><br><span class="line">rabbitmqctl trace_on </span><br><span class="line"><span class="comment"># stop</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_tracing.png" alt=""></p>
<h1 id="kombu">kombu</h1><blockquote>
<p>Kombu是一个为Python写的消息库，目标是为AMQ协议提供一个傻瓜式的高层接口，让Python中的消息传递变得尽可能简单，并且也提供一些常见消息传递问题的解决方案。</p>
</blockquote>
<h2 id="kombu_cast">kombu_cast</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, routing_key=<span class="string">'video'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># connections</span></span><br><span class="line"><span class="keyword">with</span> Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>) <span class="keyword">as</span> conn:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># produce</span></span><br><span class="line">    producer = conn.Producer(serializer=<span class="string">'json'</span>)</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    producer.publish(&#123;<span class="string">'name'</span>: <span class="string">'/tmp/lolcat1.avi'</span>, <span class="string">'size'</span>: now&#125;,</span><br><span class="line">                      exchange=media_exchange, routing_key=<span class="string">'video'</span>,</span><br><span class="line">                      declare=[video_queue])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the declare above, makes sure the video queue is declared</span></span><br><span class="line">    <span class="comment"># so that the messages can be delivered.</span></span><br><span class="line">    <span class="comment"># It's a best practice in Kombu to have both publishers and</span></span><br><span class="line">    <span class="comment"># consumers declare the queue.  You can also declare the</span></span><br><span class="line">    <span class="comment"># queue manually using:</span></span><br><span class="line">    <span class="comment">#     video_queue(conn).declare()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># consume</span></span><br><span class="line"><span class="comment">#    with conn.Consumer(video_queue, callbacks=[process_media]) as consumer:</span></span><br><span class="line"><span class="comment">#        # Process messages and handle events on all channels</span></span><br><span class="line"><span class="comment">#        while True:</span></span><br><span class="line"><span class="comment">#            conn.drain_events()</span></span><br></pre></td></tr></table></figure>
<h2 id="kombu_consumer">kombu_consumer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>)</span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Consume from several queues on the same channel:</span></span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, key=<span class="string">'video'</span>)</span><br><span class="line">image_queue = Queue(<span class="string">'image'</span>, exchange=media_exchange, key=<span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> conn.Consumer([video_queue, image_queue],</span><br><span class="line">                         callbacks=[process_media]) <span class="keyword">as</span> consumer:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        conn.drain_events()</span><br></pre></td></tr></table></figure>
<h1 id="tcpdump">tcpdump</h1><p>抓包利器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump tcp -i wlan1 -n dst port <span class="number">5672</span>  -w cast.cap</span><br><span class="line"><span class="comment"># tcp 表示抓tcp协议</span></span><br><span class="line"><span class="comment"># -i，表示抓哪个网卡。我这里算wlan1抓无线网卡1</span></span><br><span class="line"><span class="comment"># -w 表示写入到哪个文件</span></span><br><span class="line"><span class="comment"># dst port 5672表示只抓目的端口为5672的数据</span></span><br></pre></td></tr></table></figure></p>
<p>然后用wireshark打开cast.cap<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_cast.png" alt=""></p>
<p>顺便抓了下consumer的<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_consume.png" alt=""></p>
<p>等有时间把每一包的意思都解释一下，今天就到这吧。<br>抓的包放在<br><a href="https://github.com/CodeJuan/test_rabbitmq" target="_blank" rel="external">https://github.com/CodeJuan/test_rabbitmq</a><br>可以对照代码看看</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="rabbitmq" scheme="http://blog.decbug.com/tags/rabbitmq/"/>
    
      <category term="tcpdump" scheme="http://blog.decbug.com/tags/tcpdump/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译构建时间优化]]></title>
    <link href="http://blog.decbug.com/2015/11/05/compile_optimize/"/>
    <id>http://blog.decbug.com/2015/11/05/compile_optimize/</id>
    <published>2015-11-04T16:00:00.000Z</published>
    <updated>2015-11-08T12:16:52.030Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br><a id="more"></a></p>
<h1 id="分析各组件的依赖关系">分析各组件的依赖关系</h1><p>既然无人支持，但我还是得试试。<br>于是顺手写了个脚本分析组件之间的依赖关系，并且看C++代码，将项目整体分为4层。UI是C#工程，用显式加载的方式调用C++，故可以独立出来。<br>脚本<a href="http://blog.decbug.com/2015/07/26/pe_depen/">http://blog.decbug.com/2015/07/26/pe_depen/</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">framework</td>
</tr>
<tr>
<td style="text-align:center">midware</td>
</tr>
<tr>
<td style="text-align:center">plugin</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">UI</td>
</tr>
</tbody>
</table>
<p>下层依赖上层，也就是下层必须等待上层编译完成。同一层的组件相互独立，可以并行构建。</p>
<p>分层之后，编译还是那么滴慢，毕竟CPU内存资源有限，再优化的意义也不大。</p>
<h1 id="升级服务器">升级服务器</h1><p>正当我无可奈何之际，公司出了这么一个要求：让每个项目的编译构建时间小于15分钟，这时候大家才重视起来。。各种资源刷刷滴都来了。</p>
<h2 id="时间还增加了？">时间还增加了？</h2><p>有了领导的重视，事情就好办了，服务器刷刷的就到位了，24核96G，还有20T的硬盘，看着都爽啊。<br>高高兴兴的把构建脚本拷贝过去，然后自动下代码，开始编译。<br>原本以为在硬件有极大提升的情况下，构建时间应该会缩短一半多，达到50分钟的水平。<br>可实际情况却让我无比郁闷，竟然时间还增加了。想起之前在领导面前夸下的海口，说有办法搞到25分钟左右，领导才同意申请服务器的。</p>
<h2 id="分析并解决">分析并解决</h2><p>只好开始新一轮的构建，手动更新一下代码，发现更新速度超级慢，猜测是网络的原因，导致下载很慢，经过分析，网络正常。<br>内存和CPU都极其给力，自然不会是瓶颈。于是把怀疑目标转向硬盘，用crystal mark测试一下硬盘速度，果然奇慢无比。看来真的是硬盘拖累了速度啊。<br>远程开机，查看bios中关于磁盘的设置，竟然是RAID5。。。。<br>好吧，反正是编译机器，不需要数据安全，那就改成不raid吧，再次编译，时间减少到了60分钟。</p>
<h1 id="分析VC的工程文件">分析VC的工程文件</h1><h2 id="减少文件拷贝">减少文件拷贝</h2><p>sln：其实就是一个配置文件，把用到VC工程即vcxproj都include进来<br>vcxproj其实就是xml文件，记录着cpp h的相对路径，各种编译选项等等。可以把它当成xml进行读写。</p>
<p>查看每个vcxproj，发现prebuild和postbuild的event都会做拷贝文件的操作，大约会拷贝近300M的文件。看了下拷贝路径，原来是用于本地调试的，对于编译构建来说，完全用不着。<br>写个powershell脚本，在编译的ant脚本里调用一下，每次构建之前都调用一次，把这两个event都disable掉。<br>经过测试，时间从60分钟降低到50分钟</p>
<h2 id="开启mp">开启mp</h2><p>观察编译过程，CPU利用率始终上不去，没有发挥多核的优势啊，得想办法把CPU都利用起来。<br>看了下编译选项，有个/MP引起了我的注意，看看微软咋说的<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/MP (<span class="keyword">Build </span>with <span class="keyword">Multiple </span>Processes)</span><br><span class="line"><span class="label">The</span> /MP compiler option can significantly reduce <span class="keyword">build </span>time when you compile many files.</span><br></pre></td></tr></table></figure></p>
<p>我那可是24核的机器啊，不开启多核编译真的是太浪费资源了。<br>老规矩，windows平台，写个powershell脚本，遍历所有工程的vcxproj文件，把/MP都打开。</p>
<p>在ant编译脚本里加入套餐，在编译之前执行powershell脚本，再次测试，时间降低到40分钟。</p>
<h1 id="分布式编译">分布式编译</h1><p>继续观察编译过程，大部分时间的CPU都能有90%以上，但有一段时间内CPU始终只有10%左右。打开任务管理器，选择列，命令行。看下MSBUILD进程的命令行，找出此时是在搞哪个SLN，想办法把这个SLN的时间降下来。<br>找到SLN后，查看它的代码结构，发现优化的空间不大。只好用别的方法，由于link的原因，每个SLN的编译过程，都是串行的，所以CPU一直上不去。<br>找incredi build，可以并行link，充分利用CPU，修改编译脚本，在编译这个SLN的时候，不用MSBUILD，改incredi build，CPU果然上去了。<br>经测试，整体的时间从40分钟降低到30分钟</p>
<h1 id="这不是终点">这不是终点</h1><p>虽然用到incredi build，但这只是伪分布式，所有的计算资源都是在一台服务器上，当代码继续膨胀，编译时间还是会变长。<br>这只是在治标不治本，真正要做到分布式构建，每个组件都能并行构建的话。需要把隐式加载改为显式加载，即组件之间只通过头文件进行依赖，而不是通过lib，这样就不用等待上游的完成。</p>
<p>具体方法是：</p>
<ul>
<li>都改成loadlibrary，GetFunctionProcess的方式加载组件，组件之间在编译过程中相互独立。</li>
<li>如此便可把将每个组件的编译过程推送到agent上执行</li>
<li>汇总每个agent上的编译结果（DLL）</li>
</ul>
<p>这样整体的编译构建时间，就是编译最慢的那个组件的时间了。</p>
<p>然而我已换部门，只能先把demo弄好，等待后来者完善了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br>]]>
    
    </summary>
    
      <category term="build" scheme="http://blog.decbug.com/tags/build/"/>
    
      <category term="compile" scheme="http://blog.decbug.com/tags/compile/"/>
    
      <category term="optimize" scheme="http://blog.decbug.com/tags/optimize/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cobbler自动部署系统]]></title>
    <link href="http://blog.decbug.com/2015/11/01/cobbler/"/>
    <id>http://blog.decbug.com/2015/11/01/cobbler/</id>
    <published>2015-10-31T17:00:00.000Z</published>
    <updated>2015-11-19T13:47:26.242Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/" target="_blank" rel="external">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>
<a id="more"></a>
<h1 id="开启PXE">开启PXE</h1><p>由于cobbler是通过PXE给裸机装系统的，所以要先改裸机的BIOS设置，改为从网卡启动。</p>
<h2 id="某品牌主板的设置方法">某品牌主板的设置方法</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/1.jpg" alt=""><br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/2.jpg" alt=""><br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/3.jpg" alt=""></p>
<h2 id="另一品牌主板的设置方法">另一品牌主板的设置方法</h2><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/cobbler/MicroStar.jpg" alt=""></p>
<h1 id="安装cobbler">安装cobbler</h1><p>参考官网的quick start <a href="http://cobbler.github.io/manuals/quickstart/" target="_blank" rel="external">http://cobbler.github.io/manuals/quickstart/</a></p>
<h2 id="disable_SELinux">disable SELinux</h2><p>由于我对SELinux不熟悉，根据官网的建议，还是把SELinux Disable吧</p>
<p>参考<a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html" target="_blank" rel="external">https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html</a></p>
<p>修改<code>/etc/sysconfig/selinux</code>，修改<code>SELINUX</code>的值为<code>disabled</code>，并增加一行<code>SETLOCALDEFS=0</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=enforcing  <span class="comment"># 改为 disabled</span></span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h2 id="Installing_Cobbler">Installing Cobbler</h2><h3 id="错误的方法">错误的方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cobbler</span><br></pre></td></tr></table></figure>
<p>提示没有package，说明要添加源。<br>按照<a href="http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html" target="_blank" rel="external">http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html</a>说</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-X-Y.noarch.rpm</span></span><br><span class="line">  sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/<span class="number">7</span>/x86_64/epel-release-<span class="number">7</span>-<span class="number">0</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>还是不行，因为我不知道具体的版本号。</p>
<p>只好找到最新release的页面<a href="http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html" target="_blank" rel="external">http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html</a>，根据<code>Packages will be provided as soon as possible, please check</code>的提示，找到<a href="http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/" target="_blank" rel="external">http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/</a></p>
<p>添加源</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-web-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/koan-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少python的一堆库，</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">python-simplejson</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br><span class="line"><span class="tag">python-cheetah</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br></pre></td></tr></table></figure>
<p>使用pip安装simplejson和cheetah，还是报这个错，看来此路不通，需要另想它法。</p>
<h3 id="正确的方法">正确的方法</h3><p>找到了这个链接<a href="http://cobbler.readthedocs.org/en/latest/installation-guide.html" target="_blank" rel="external">http://cobbler.readthedocs.org/en/latest/installation-guide.html</a></p>
<p>Make sure you have the EPEL repository enabled on your system:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment"># sudo curl -o cobbler30.repo http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler30/CentOS_CentOS-7/home:libertas-ict:cobbler30.repo</span></span><br></pre></td></tr></table></figure>
<p>接下来</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cobbler cobbler-web</span><br></pre></td></tr></table></figure>
<p>就安装成功了</p>
<h2 id="启动cobbler">启动cobbler</h2><h3 id="改配置">改配置</h3><p><code>/etc/cobbler/settings</code></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">default_password_crypted:</span> <span class="string">"$1$bfI7WLZz$PxXetL97LkScqJFxnW7KS1"</span> <span class="preprocessor"># 123456</span></span><br><span class="line">openssl passwd -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="label">next_server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"><span class="label">server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"></span><br><span class="line">manage_dhcp = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service httpd start</span><br><span class="line">sudo service xinetd start</span><br><span class="line">sudo service cobblerd start</span><br><span class="line"></span><br><span class="line">sudo chkconfig cobblerd on</span><br><span class="line">sudo chkconfig xinetd on</span><br><span class="line">sudo chkconfig httpd on</span><br></pre></td></tr></table></figure>
<p>检查配置</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:</span><br><span class="line">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class="line">2 : <span class="operator"><span class="keyword">change</span> <span class="string">'disable'</span> <span class="keyword">to</span> <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line"><span class="number">3</span> : <span class="keyword">some</span> network boot-loaders <span class="keyword">are</span> missing <span class="keyword">from</span> /<span class="keyword">var</span>/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> <span class="keyword">to</span> download them, <span class="keyword">or</span>, <span class="keyword">if</span> you <span class="keyword">only</span> want <span class="keyword">to</span> handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* <span class="keyword">version</span> <span class="keyword">of</span> the syslinux package installed <span class="keyword">and</span> can <span class="keyword">ignore</span> this message entirely.  Files <span class="keyword">in</span> this directory, should you want <span class="keyword">to</span> support <span class="keyword">all</span> architectures, should include pxelinux.0, menu.c32, elilo.efi, <span class="keyword">and</span> yaboot. The <span class="string">'cobbler get-loaders'</span> command <span class="keyword">is</span> the easiest way <span class="keyword">to</span> resolve these requirements.</span><br><span class="line"><span class="number">4</span> : file /etc/xinetd.d/rsync does <span class="keyword">not</span> exist</span><br><span class="line"><span class="number">5</span> : debmirror package <span class="keyword">is</span> <span class="keyword">not</span> installed, it will be required <span class="keyword">to</span> manage debian deployments <span class="keyword">and</span> repositories</span><br><span class="line"><span class="number">6</span> : The <span class="keyword">default</span> <span class="keyword">password</span> used <span class="keyword">by</span> the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) <span class="keyword">is</span> still <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">'cobbler'</span> <span class="keyword">and</span> should be <span class="keyword">changed</span>, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> <span class="keyword">to</span> generate new one</span><br><span class="line"><span class="number">7</span> : fencing tools were <span class="keyword">not</span> <span class="keyword">found</span>, <span class="keyword">and</span> <span class="keyword">are</span> required <span class="keyword">to</span> <span class="keyword">use</span> the (optional) <span class="keyword">power</span> management features. <span class="keyword">install</span> cman <span class="keyword">or</span> fence-agents <span class="keyword">to</span> <span class="keyword">use</span> them</span></span><br></pre></td></tr></table></figure>
<p>根据提示一一修改<br>解决方法</p>
<ol>
<li>disable selinux</li>
<li>改配置文件</li>
<li>执行cobbler get-loaders</li>
<li>新建/etc/xinetd.d/rsync，增加disable = no,修改 rsync 和 tftp 这两个服务的 xinetd 配置</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/xinetd.d/rsync</span></span><br><span class="line"><span class="title">service</span> rsync</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vi /etc/xinetd.d/tftp</span></span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>不支持debian系，cobbler服务器能同时部署CentOS/Fedora/Debian/Ubuntu系统，所以需要安装debmirror，安装debmirror-20090807-1.el5.noarch.rpm，在此之前，需要先安装一些其他的依赖包：<br>暂时不管，我这里只测试centos<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://rpmfind.net/linux/epel/<span class="number">6</span>/x86_64/debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br><span class="line">sudo rpm -ivh debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum install ed patch perl perl-Compress-Zlib perl-Cwd perl-Digest-MD5 perl-Digest-SHA1 perl-LockFile-Simple perl-libwww-perl</span></span><br><span class="line"><span class="preprocessor"># wget ftp://fr2.rpmfind.net/linux/epel/5/ppc/debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># rpm –ivh debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># 修改/etc/debmirror.conf 配置文件，注释掉 @dists 和 @arches 两行</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># vim /etc/debmirror.conf</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#@dists=”sid”;</span></span><br><span class="line">@sections=”main,main/debian-installer,contrib,non-free”;</span><br><span class="line"><span class="preprocessor">#@arches=”i386″;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>生成密码。修改默认系统密码用 openssl 生成一串密码后加入到 cobbler 的配置文件（/etc/cobbler/settings）里，替换 default_password_crypted 字段：</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openssl passwd -1 -salt ‘bihan’ ‘Abcd1234′</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span></span><br><span class="line"><span class="comment"># vi /etc/cobbler/settings</span></span><br><span class="line">修改内容如下：</span><br><span class="line"><span class="symbol">default_password_crypted:</span> “<span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span>″</span><br></pre></td></tr></table></figure>
<ol>
<li>yum install cman或者fence-agents，我装的是fence-agents</li>
</ol>
<p>改完之后运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service cobblerd restart</span><br><span class="line">sudo cobbler sync</span><br><span class="line"><span class="comment"># 再check一下</span></span><br><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>就只剩下debmirror的问题了，可以暂时不管</p>
<p>下载并挂载iso</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget wget http://mirrors.sina.cn/centos/<span class="number">7</span>/isos/x86_64/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso</span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo mount -t iso9660 -o loop,ro ./CentOS-7-x86_64-Minimal-1503-01.iso /mnt</span></span><br><span class="line">sudo mount -t iso9660 -o loop,ro /home/i3/save/iso/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso /mnt/centos</span><br><span class="line"><span class="comment">#sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt</span></span><br><span class="line">sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt/centos</span><br><span class="line"><span class="comment">#sudo vi /etc/fstab</span></span><br><span class="line"><span class="comment"># 增一行/home/i3/save/iso/CentOS-7-x86_64-Minimal-1503-01.iso   /home/i3/save/cobbler_os iso9660 defaults,ro,loop  0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#umount /somedir</span></span><br></pre></td></tr></table></figure>
<p>挂载时报错</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># sudo cobbler import --name=centos7 --<span class="keyword">arch</span>=x86_64 --path=/mnt/centos</span><br><span class="line">task started: 2015-11-04_215116_import</span><br><span class="line">task started (id=Media import, time=Wed Nov  4 21:51:16 2015)</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel6</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Found a matching signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Adding distros from path /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64:</span><br><span class="line">creating new distro: centos7-x86_64</span><br><span class="line">trying symlink: /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64 -&gt; /<span class="keyword">var</span>/www/cobbler/links/centos7-x86_64</span><br><span class="line">creating new profile: centos7-x86_64</span><br><span class="line">Exception occured: &lt;<span class="keyword">type</span> 'exceptions.UnicodeEncodeError'&gt;</span><br><span class="line">Exception value: 'ascii' codec can't <span class="keyword">encode</span> character <span class="keyword">u</span>'\u2018' <span class="keyword">in</span> position 3: ordinal not <span class="keyword">in</span> <span class="keyword">range</span>(128)</span><br><span class="line">Exception Info:</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 87, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    rc = self._run(self)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 231, <span class="keyword">in</span> runner</span><br><span class="line">    self.logger</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/api.py"</span>, <span class="keyword">line</span> 938, <span class="keyword">in</span> import_tree</span><br><span class="line">    <span class="keyword">return</span> import_module.<span class="keyword">run</span>(path,mirror_name,network_root,kickstart_file,<span class="keyword">arch</span>,breed,os_version)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 140, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    os.path.walk(self.path, self.distro_adder, distros_added)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 238, <span class="keyword">in</span> walk</span><br><span class="line">    func(arg, top, names)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 255, <span class="keyword">in</span> distro_adder</span><br><span class="line">    adtls.<span class="keyword">append</span>(self.add_entry(dirname,kernel,initrd))</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 360, <span class="keyword">in</span> add_entry</span><br><span class="line">    self.profiles.add(profile,<span class="keyword">save</span>=True)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/collection.py"</span>, <span class="keyword">line</span> 352, <span class="keyword">in</span> add</span><br><span class="line">    self.lite_sync.add_single_profile(ref.name)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/action_litesync.py"</span>, <span class="keyword">line</span> 133, <span class="keyword">in</span> add_single_profile</span><br><span class="line">    self.sync.pxegen.make_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 330, <span class="keyword">in</span> make_pxe_menu</span><br><span class="line">    self.make_actual_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 480, <span class="keyword">in</span> make_actual_pxe_menu</span><br><span class="line">    menu_items = self.get_menu_items()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 404, <span class="keyword">in</span> get_menu_items</span><br><span class="line">    <span class="keyword">arch</span>=distro.<span class="keyword">arch</span>, include_header=False)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 702, <span class="keyword">in</span> write_pxe_file</span><br><span class="line">    image, <span class="keyword">arch</span>, kickstart_path)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 880, <span class="keyword">in</span> build_kernel_options</span><br><span class="line">    append_line = self.templar.render(append_line,utils.flatten(blended),None)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/templar.py"</span>, <span class="keyword">line</span> 137, <span class="keyword">in</span> render</span><br><span class="line">    data_out = data_out.<span class="keyword">replace</span>(<span class="string">"@@%s@@"</span> % str(x), str(search_table[str(x)]))</span><br><span class="line"></span><br><span class="line">!!! TASK FAILED !!!</span><br></pre></td></tr></table></figure>
<p>删除</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler profile remove --name=centos7-x86_64</span><br><span class="line">sudo cobbler distro remove --name=centos7-x86_64</span><br></pre></td></tr></table></figure>
<p>再重来，看看是不是哪里代码的问题</p>
<p>python编码的问题，在python的Lib\site-packages文件夹下新建一个sitecustomize.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf8  </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler distro report</span><br><span class="line">sudo cobbler system add --name=<span class="built_in">test</span> --profile=centos7-x86_64</span><br><span class="line">sudo cobbler system list</span><br><span class="line">sudo cobbler system report --name=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待安装机器的mac和IP</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --interface=eth0 --mac=d0:<span class="number">27</span>:<span class="number">88</span>:d1:<span class="number">4</span>d:<span class="number">7</span>f --ip-address=<span class="number">192.168</span>.<span class="number">161.52</span> --netmask=<span class="number">255.255</span>.<span class="number">255.0</span> --static=<span class="number">1</span> </span><br><span class="line"><span class="comment">#--dns-name=bogon</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --gateway=<span class="number">192.168</span>.<span class="number">161.1</span> </span><br><span class="line"><span class="comment">#--hostname=bogon</span></span><br><span class="line">sudo cobbler sync</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>]]>
    
    </summary>
    
      <category term="cobbler" scheme="http://blog.decbug.com/tags/cobbler/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="system" scheme="http://blog.decbug.com/tags/system/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[絮叨ansible做持续交付,闲扯分布式]]></title>
    <link href="http://blog.decbug.com/2015/11/01/ansible4ci_distributed/"/>
    <id>http://blog.decbug.com/2015/11/01/ansible4ci_distributed/</id>
    <published>2015-10-31T16:00:00.000Z</published>
    <updated>2015-11-01T13:09:42.354Z</updated>
    <content type="html"><![CDATA[<h1 id="随手记录">随手记录</h1><p>杂记而已，随便记录</p>
<hr>
<h1 id="ansbile做持续交付">ansbile做持续交付</h1><p>突然想到，ansible可以控制一大堆机器，那么是否可以像jenkins的master/slave那样，做分布式构建呢。<br>应该是可以的吧</p>
<ul>
<li>把代码同步到各个agent上，可以用git/svn都行</li>
<li>通过一堆参数，控制各个agent做不同的事情，并行构建。比如编译，静态检测，单元测试，自动化测试等等</li>
<li>artifact收集</li>
<li>部署</li>
</ul>
<p>无缝接入呀，有时间可以试试。</p>
<a id="more"></a>
<hr>
<h1 id="分布式的一些感想">分布式的一些感想</h1><p>想到一句话，<code>不谋全局者，不足以谋一域；不谋万世者，不足以谋一时</code>。</p>
<ul>
<li>以前把玩有限的几台服务器，更多的是关注单点的CPU/IO/内存等等，现在得关注整体的性能，找出拖慢整体性能的瓶颈。</li>
<li>在考虑方案的时候，哪怕当前只有10台服务器，最好是按照1000台的规模去设计。</li>
</ul>
<p>哈哈哈～～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="随手记录">随手记录</h1><p>杂记而已，随便记录</p>
<hr>
<h1 id="ansbile做持续交付">ansbile做持续交付</h1><p>突然想到，ansible可以控制一大堆机器，那么是否可以像jenkins的master/slave那样，做分布式构建呢。<br>应该是可以的吧</p>
<ul>
<li>把代码同步到各个agent上，可以用git/svn都行</li>
<li>通过一堆参数，控制各个agent做不同的事情，并行构建。比如编译，静态检测，单元测试，自动化测试等等</li>
<li>artifact收集</li>
<li>部署</li>
</ul>
<p>无缝接入呀，有时间可以试试。</p>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://blog.decbug.com/tags/ansible/"/>
    
      <category term="continous delivery" scheme="http://blog.decbug.com/tags/continous-delivery/"/>
    
      <category term="distributed" scheme="http://blog.decbug.com/tags/distributed/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(3):移植rabbitmq-c]]></title>
    <link href="http://blog.decbug.com/2015/10/26/openstack_perf_tester_3/"/>
    <id>http://blog.decbug.com/2015/10/26/openstack_perf_tester_3/</id>
    <published>2015-10-25T16:00:00.000Z</published>
    <updated>2015-10-26T14:40:18.368Z</updated>
    <content type="html"><![CDATA[<h1 id="rabbitmq">rabbitmq</h1><p>rabbitmq是AMQP的一个具体实现。与之类似的还有apache的qpid。rabbitmq的官网是<a href="http://www.rabbitmq.com/" target="_blank" rel="external">http://www.rabbitmq.com/</a></p>
<p>我要做的是一个收发消息的模拟器，那么就用client就可以了。rabbitmq提供了各种语言的client版本，其中JAVA、C#、ErLang是官方维护的亲儿子版本。至于C语言的版本，则被归类到了other languages，下载链接是<a href="http://www.rabbitmq.com/devtools.html" target="_blank" rel="external">http://www.rabbitmq.com/devtools.html</a>，C版本的链接是<a href="https://github.com/alanxz/rabbitmq-c" target="_blank" rel="external">https://github.com/alanxz/rabbitmq-c</a></p>
<a id="more"></a>
<h1 id="移植">移植</h1><h2 id="编译rabbitmq-c">编译rabbitmq-c</h2><p>生产环境用的是suse，那边哥们给我的测试环境无法mount到我的本机，所以，只能在我docker ubuntu14.04来先验证一下。</p>
<h3 id="CMake">CMake</h3><p>下载<a href="https://cmake.org/files/v3.4/cmake-3.4.0-rc2.tar.gz" target="_blank" rel="external">https://cmake.org/files/v3.4/cmake-3.4.0-rc2.tar.gz</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.<span class="number">4</span>/cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2.tar.gz</span><br><span class="line">tar -xzvf cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2.tar.gz </span><br><span class="line"><span class="built_in">cd</span> cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2</span><br><span class="line">./bootstrap &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></p>
<h4 id="-/bootstrap">./bootstrap</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- Check <span class="keyword">if</span> the system is big endian</span><br><span class="line">-- Searching <span class="number">16</span> bit <span class="built_in">integer</span></span><br><span class="line">-- Using unsigned short</span><br><span class="line">-- Check <span class="keyword">if</span> the system is big endian - little endian</span><br><span class="line">Curses libraries were not found. Curses GUI <span class="keyword">for</span> CMake will not be built.</span><br><span class="line">-- Looking <span class="keyword">for</span> elf.h</span><br><span class="line">-- Looking <span class="keyword">for</span> elf.h - found</span><br><span class="line">-- Looking <span class="keyword">for</span> a Fortran compiler</span><br><span class="line">-- Looking <span class="keyword">for</span> a Fortran compiler - NOTFOUND</span><br><span class="line">qmake: could not <span class="built_in">exec</span> <span class="string">'/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</span>: No such file or directory</span><br><span class="line">qmake: could not <span class="built_in">exec</span> <span class="string">'/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</span>: No such file or directory</span><br><span class="line">-- Performing Test run_pic_<span class="built_in">test</span></span><br><span class="line">-- Performing Test run_pic_<span class="built_in">test</span> - Success</span><br><span class="line">-- Performing Test run_inlines_hidden_<span class="built_in">test</span></span><br><span class="line">-- Performing Test run_inlines_hidden_<span class="built_in">test</span> - Success</span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /home/xh/save/code/cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2</span><br><span class="line">---------------------------------------------</span><br><span class="line">CMake has bootstrapped.  Now run make.</span><br></pre></td></tr></table></figure>
<h4 id="make">make</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">61</span>%] Built target cmjsoncpp</span><br><span class="line">Scanning dependencies of target CMakeLib</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmArchiveWrite.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmBootstrapCommands1.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmBootstrapCommands2.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCacheManager.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommands.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCLocaleEnvironmentScope.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentLexer.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentParser.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentParserHelper.cxx.o</span><br></pre></td></tr></table></figure>
<h4 id="make_install">make install</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/UtilityHeader.dsptemplate</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CTestScript.cmake.in</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CPack.GenericDescription.txt</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CPack.GenericLicense.txt</span><br></pre></td></tr></table></figure>
<h4 id="version">version</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br><span class="line"><span class="comment"># cmake version 3.4.0-rc2</span></span><br></pre></td></tr></table></figure>
<h3 id="openssl">openssl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.openssl.org/<span class="built_in">source</span>/openssl-<span class="number">1.0</span>.<span class="number">2</span>d.tar.gz</span><br><span class="line">tar -xzvf openssl-<span class="number">1.0</span>.<span class="number">2</span>d</span><br><span class="line"><span class="built_in">cd</span> openssl-<span class="number">1.0</span>.<span class="number">2</span>d</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>version一下看看<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"><span class="comment"># OpenSSL 1.0.1f 6 Jan 2014</span></span><br></pre></td></tr></table></figure></p>
<h3 id="make-1">make</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:alanxz/rabbitmq-c.git</span><br><span class="line"><span class="built_in">cd</span> rabbitmq-c</span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">cmake --build . --config BUILD_TOOLS=OFF</span><br></pre></td></tr></table></figure>
<p><code>cmake ..</code>时会提示找不到xmlto等等，因为我不需要生成辅助工具（文档、命令行工具等等)，暂时不管它。<br><code>BUILD_TOOLS=OFF</code>就表示不生成辅助工具</p>
<p>一路编译没有报错，至此，我们的rabbitmq就编译成功了，接下来就是要把<code>librabbitmq</code>移植到现有代码中。</p>
<h2 id="移植过程">移植过程</h2><ul>
<li>拷贝<code>librabbitmq</code>到原有代码中</li>
<li>在makefile里加上<code>librabbitmq</code>的路径</li>
<li>make，提示说找不到<code>amqp_framing.h</code>，原因是include用的是<code>&lt;&gt;</code>，而amqp_framing.h就在同一个目录。</li>
<li>sed -i s/<amqp_framing.h>/\”amqp_framing.h\”/g改成相对路径，再次make，不报这个错了。</amqp_framing.h></li>
<li>找不到<code>threads.h</code>，原因是没有把<code>librabbitmq/unix</code>-I，所以需要改以下路径为<code>unix/threads.h</code></li>
<li><p>找不到<code>AMQP_PLATFORM</code>,这个是在config.h里定义的。看了下报错的c文件，确实有include了config.h，但为什么还报这个错呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#ifdef HAVE_CONFIG_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "config.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原因就在于<code>HAVE_CONFIG_H</code>了，在makefile的gcc后加上<code>-DHAVE_CONFIG_H</code>，再次编译，就OK了。</p>
</li>
</ul>
<p>在ubuntu上已经搞定，接下来就是迁移到suse上。<br>关键点就在于config.h，因为config.h包含了内核版本以及epoll等等，所以需要在suse上编译一下rabbitmq-c，然后把suse上的config.h替换ubuntu上的config.h，编译就OK了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="rabbitmq">rabbitmq</h1><p>rabbitmq是AMQP的一个具体实现。与之类似的还有apache的qpid。rabbitmq的官网是<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p>
<p>我要做的是一个收发消息的模拟器，那么就用client就可以了。rabbitmq提供了各种语言的client版本，其中JAVA、C#、ErLang是官方维护的亲儿子版本。至于C语言的版本，则被归类到了other languages，下载链接是<a href="http://www.rabbitmq.com/devtools.html">http://www.rabbitmq.com/devtools.html</a>，C版本的链接是<a href="https://github.com/alanxz/rabbitmq-c">https://github.com/alanxz/rabbitmq-c</a></p>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="rabbitmq" scheme="http://blog.decbug.com/tags/rabbitmq/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(2):消息调用过程oslo.messaging]]></title>
    <link href="http://blog.decbug.com/2015/10/16/openstack_perf_tester_2/"/>
    <id>http://blog.decbug.com/2015/10/16/openstack_perf_tester_2/</id>
    <published>2015-10-15T17:00:00.000Z</published>
    <updated>2015-11-17T14:28:43.362Z</updated>
    <content type="html"><![CDATA[<h1 id="openstack简介">openstack简介</h1><p>The OpenStack project is an open source cloud computing platform that supports all types of cloud environments. The project aims for simple implementation, massive scalability, and a rich set of features. Cloud computing experts from around the world contribute to the project.<br><a id="more"></a></p>
<p>OpenStack provides an Infrastructure-as-a-Service (IaaS) solution through a variety of complemental services. Each service offers an application programming interface (API) that facilitates this integration.</p>
<h1 id="openstack组件">openstack组件</h1><table>
<thead>
<tr>
<th>Service</th>
<th>Project name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dashboard</td>
<td>Horizon</td>
<td>Provides a web-based self-service portal to interact with underlying OpenStack services, such as launching an instance, assigning IP addresses and configuring access controls.</td>
</tr>
<tr>
<td>Compute</td>
<td>Nova</td>
<td>Manages the lifecycle of compute instances in an OpenStack environment. Responsibilities include spawning, scheduling and decommissioning of virtual machines on demand.</td>
</tr>
<tr>
<td>Networking</td>
<td>Neutron</td>
<td>Enables Network-Connectivity-as-a-Service for other OpenStack services, such as OpenStack Compute. Provides an API for users to define networks and the attachments into them. Has a pluggable architecture that supports many popular networking vendors and technologies.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Storage</td>
</tr>
<tr>
<td>Object Storage</td>
<td>Swift</td>
<td>Stores and retrieves arbitrary unstructured data objects via a RESTful, HTTP based API. It is highly fault tolerant with its data replication and scale-out architecture. Its implementation is not like a file server with mountable directories. In this case, it writes objects and files to multiple drives, ensuring the data is replicated across a server cluster.</td>
</tr>
<tr>
<td>Block Storage</td>
<td>Cinder</td>
<td>Provides persistent block storage to running instances. Its pluggable driver architecture facilitates the creation and management of block storage devices.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Shared services</td>
</tr>
<tr>
<td>Identity service</td>
<td>Keystone</td>
<td>Provides an authentication and authorization service for other OpenStack services. Provides a catalog of endpoints for all OpenStack services.</td>
</tr>
<tr>
<td>Image service</td>
<td>Glance</td>
<td>Stores and retrieves virtual machine disk images. OpenStack Compute makes use of this during instance provisioning.</td>
</tr>
<tr>
<td>Telemetry</td>
<td>Ceilometer</td>
<td>Monitors and meters the OpenStack cloud for billing, benchmarking, scalability, and statistical purposes.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Higher-level services</td>
</tr>
<tr>
<td>Orchestration</td>
<td>Heat</td>
<td>Orchestrates multiple composite cloud applications by using either the native HOT template format or the AWS CloudFormation template format, through both an OpenStack-native REST API and a CloudFormation-compatible Query API.</td>
</tr>
</tbody>
</table>
<h2 id="oslo-messaging">oslo.messaging</h2><p>消息组件，其中的/_drivers/impl_rabbit.py就是rabbitMQ的具体实现。我们要用的AMQP就是靠它来完成。</p>
<h1 id="一个call的前世今生">一个call的前世今生</h1><h2 id="neutron/common/rpc-py_init">neutron/common/rpc.py init</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">common/rpc-&#62;oslo_messaging/transport:get_transport&#10;oslo_messaging/transport-&#62;stevedore:DriverManager&#10;stevedore-&#62;impl_rabbit:get impl_rabbit&#10;impl_rabbit--&#62;stevedore:return impl_rabbit&#10;stevedore--&#62;oslo_messaging/transport:return driver&#10;oslo_messaging/transport--&#62;common/rpc:return transport</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/1.png" alt=""></p>
<h2 id="neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent-py">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent.py</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OVSNeutronAgent-&#62;OVSNeutronAgent: __init__&#10;OVSNeutronAgent-&#62;OVSNeutronAgent: setup_rpc&#10;setup_rpc-&#62;OVSPluginApi: plugin_rpc = OVSPluginApi&#10;OVSPluginApi-&#62;PluginApi: __init__&#10;PluginApi-&#62;oslo_messaging/target:tartget::__init__&#10;oslo_messaging/target--&#62;PluginApi: return target&#10;PluginApi-&#62;common/rpc: get_client&#10;common/rpc-&#62;oslo_messaging/rpc/client:construct RPCClient&#10;oslo_messaging/rpc/client--&#62;common/rpc: return RPCClient&#10;common/rpc--&#62;PluginApi: return client</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/2.png" alt=""></p>
<h2 id="call">call</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OVSNeutronAgent-&#62;OVSPluginApi.plugin_rpc:tunnel_sync&#10;OVSPluginApi.plugin_rpc-&#62;PluginApi:tunnel_sync&#10;PluginApi-&#62;oslo_messaging/rpc/client.RPCClient:prepare&#10;oslo_messaging/rpc/client.RPCClient-&#62;oslo_messaging/rpc/client._CallContext:_prepare&#10;oslo_messaging/rpc/client._CallContext--&#62;oslo_messaging/rpc/client.RPCClient:return callContext&#10;oslo_messaging/rpc/client.RPCClient--&#62;PluginApi:return callContext&#10;PluginApi-&#62;oslo_messaging/rpc/client._CallContext: call&#10;oslo_messaging/rpc/client._CallContext-&#62;oslo_messaging/rpc/client._CallContext:make message&#10;oslo_messaging/rpc/client._CallContext-&#62;transport:send&#10;transport-&#62;AMQPDriverBase:_send&#10;AMQPDriverBase-&#62;oslo_messaging/_drivers/amqp:get connection&#10;note right of oslo_messaging/_drivers/amqp: get connection from pool&#10;oslo_messaging/_drivers/amqp--&#62;driverbase:return connection&#10;AMQPDriverBase-&#62;AMQPDriverBase: get exchange&#10;AMQPDriverBase-&#62;ReplyWaiter: _get_reply_q&#10;AMQPDriverBase-&#62;impl_rabbit:connection.topic_send&#10;impl_rabbit-&#62;impl_rabbit: connection._ensure_publishing&#10;AMQPDriverBase-&#62;ReplyWaiter: wait&#10;ReplyWaiter--&#62;AMQPDriverBase: return result&#10;AMQPDriverBase--&#62;transport: return result&#10;transport--&#62;oslo_messaging/rpc/client._CallContext: return result&#10;oslo_messaging/rpc/client._CallContext--&#62;PluginApi: return&#10;PluginApi--&#62;OVSPluginApi.plugin_rpc: return</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/3.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="openstack简介">openstack简介</h1><p>The OpenStack project is an open source cloud computing platform that supports all types of cloud environments. The project aims for simple implementation, massive scalability, and a rich set of features. Cloud computing experts from around the world contribute to the project.<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="perfmance" scheme="http://blog.decbug.com/tags/perfmance/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(1):AMQP]]></title>
    <link href="http://blog.decbug.com/2015/10/16/openstack_perf_tester_1/"/>
    <id>http://blog.decbug.com/2015/10/16/openstack_perf_tester_1/</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2015-11-01T13:06:11.378Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我司的公有云产品是基于OpenStack，一直以来都有做性能测试，但以前的性能测试方法比较老土。</p>
<ul>
<li>有一部分基于http的消息是通过自己写的测试器来测试，即模拟真实场景的消息收发，测试各组件在高并发下的性能。</li>
<li>另外一些基于AMQP的消息则还是通过一堆虚拟机来做测试，需要耗费大量资源。</li>
</ul>
<p>有鉴于此，需要再把测试器完善一下，使其能模拟OpenStack的各种组件，用有限的几台虚拟机，就能完成所有组件的性能测试。<br>而作为什么都会一点的牛X人物，自然少不了被派来开荒。正好可以借此机会深入了解一下OpenStack，以前只是久闻其名，无缘深入探究，这次终于得偿所望。<br>嘎嘎嘎！！<br><a id="more"></a></p>
<h1 id="AMQP">AMQP</h1><p>要想做好模拟器，就需要了解AMQP协议，以及此协议在OpenStack中的应用场景。</p>
<h2 id="概念">概念</h2><p>AMQP是一种异步消息协议，在分布式系统就被大量使用。其传递流程可以大致理解成下图<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/hello-world-example-routing.png" alt=""><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer-&gt;broker-&gt;consumer</span><br></pre></td></tr></table></figure></p>
<p>producer连接broker，broker可以理解为一个消息服务器，所有的消息都是通过它来中转。<br>还有几个概念需要注意：exchange channel topic routing-key</p>
<p>等有空的时候，照着wireshark抓的包来对着讲解一下消息收发过程。<br>以login为例，</p>
<table>
<thead>
<tr>
<th>clien</th>
<th>direct</th>
<th>server</th>
</tr>
</thead>
<tbody>
<tr>
<td>建立TCP连接</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>发送heade</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>connection</td>
</tr>
<tr>
<td>connection ok</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>connection.tune</td>
</tr>
<tr>
<td>connection.tune ok</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>open connection</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>open connection ok</td>
</tr>
</tbody>
</table>
<h2 id="openstack">openstack</h2><p>openstack用的就是AMQP，具体实现有两种，是rabbitMQ和qpid，二者皆可使用。曾描过一眼，说ubuntu用rabbit，centos用qpid。我司用的是ubuntu，那么就看rabbitMQ好了。<br>发送分为三类</p>
<ul>
<li>cast:发送给特定的consumer，且不等待response</li>
<li>call：发送给特定consumer，需要等待response</li>
<li>fanout：发送给订阅了此消息的一组consumer，不等待response</li>
</ul>
<h3 id="oslo-messaging">oslo.messaging</h3><p>这个组件专门负责消息。其中的/_drivers/impl_rabbit.py就是rabbitMQ的具体实现。</p>
<h2 id="吐槽">吐槽</h2><p>在折腾的过程中，在oslo.messaging的tools里发现了一个<code>simulator.py</code>，就是一个消息模拟器，然而由于原有框架是C写的，历史原因只能用C再做一个模拟器。<br>其实openstack就有一个性能测试工具，名叫rally，也很不错，但是也不让用，sigh～～</p>
<p>欲知后事如何，请看下集openstack的消息流程</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我司的公有云产品是基于OpenStack，一直以来都有做性能测试，但以前的性能测试方法比较老土。</p>
<ul>
<li>有一部分基于http的消息是通过自己写的测试器来测试，即模拟真实场景的消息收发，测试各组件在高并发下的性能。</li>
<li>另外一些基于AMQP的消息则还是通过一堆虚拟机来做测试，需要耗费大量资源。</li>
</ul>
<p>有鉴于此，需要再把测试器完善一下，使其能模拟OpenStack的各种组件，用有限的几台虚拟机，就能完成所有组件的性能测试。<br>而作为什么都会一点的牛X人物，自然少不了被派来开荒。正好可以借此机会深入了解一下OpenStack，以前只是久闻其名，无缘深入探究，这次终于得偿所望。<br>嘎嘎嘎！！<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="perfmance" scheme="http://blog.decbug.com/tags/perfmance/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习ruby on rails]]></title>
    <link href="http://blog.decbug.com/2015/10/14/ror/"/>
    <id>http://blog.decbug.com/2015/10/14/ror/</id>
    <published>2015-10-13T16:00:00.000Z</published>
    <updated>2015-10-14T15:19:04.079Z</updated>
    <content type="html"><![CDATA[<h1 id="入门文档">入门文档</h1><p><a href="http://guides.ruby-china.org/getting_started.html" target="_blank" rel="external">http://guides.ruby-china.org/getting_started.html</a><br><a id="more"></a></p>
<h1 id="install">install</h1><h2 id="ruby-lang_&amp;_sqlite">ruby-lang &amp; sqlite</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby-devel sqlite sqlite-devel ruby-rdoc</span><br><span class="line"></span><br><span class="line">ruby --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># ruby 2.0.0p598 (2014-11-13) [x86_64-linux]</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br><span class="line"></span><br><span class="line">sqlite3 --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># 3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure>
<h2 id="gem">gem</h2><h3 id="换源">换源</h3><p>需要换源，原因</p>
<blockquote>
<p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。所以你会与遇到 gem install rack 或 bundle install 的时候半天没有响应，具体可以用 gem install rails -V 来查看执行过程。</p>
</blockquote>
<p>以上引用自<a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a>，好人一生平安。</p>
<h3 id="方法">方法</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:<span class="comment">//ruby.taobao.org/ --remove https://rubygems.org/</span></span><br><span class="line">gem sources -l</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># *** CURRENT SOURCES ***</span></span><br><span class="line"><span class="preprocessor"># </span></span><br><span class="line"><span class="preprocessor"># https://ruby.taobao.org/</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure>
<p>说明换成了<em>taobao</em>的源</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle config mirror<span class="class">.https</span>:<span class="comment">//rubygems.org https://ruby.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>bundle也需要换，然而似乎还是没啥用，后面还是得改<code>Gemfile</code></p>
<h2 id="rails">rails</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> rails</span><br></pre></td></tr></table></figure>
<p>漫长的等待，就装好了，查看一下版本吧<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># Rails 4.2.4</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure></p>
<h2 id="new_project">new project</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails <span class="keyword">new</span> learn_ror</span><br></pre></td></tr></table></figure>
<p>卡在<code>bundle install</code>，原因是learn_ror/Gemfile里的source指向的还是官网，所以需要手动改成淘宝的源<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">source</span> <span class="string">'https://rubygems.org'</span>                                                                                                                                                                             </span><br><span class="line"><span class="keyword">source</span> <span class="string">'https://ruby.taobao.org'</span></span><br></pre></td></tr></table></figure></p>
<p>再次执行install<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> learn_ror</span><br><span class="line"><span class="keyword">bundle </span>install</span><br></pre></td></tr></table></figure></p>
<h2 id="启动">启动</h2><p>执行启动命令<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<p>提示缺少jsruntime，看了下<a href="https://github.com/rails/execjs" target="_blank" rel="external">https://github.com/rails/execjs</a>，决定采用<a href="https://github.com/cowboyd/therubyracer" target="_blank" rel="external">therubyracer</a>，在<code>Gemfile</code>里添加一行<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//github.com/cowboyd/therubyracer</span></span><br></pre></td></tr></table></figure></p>
<p>再次bundle install，rails server，欢迎页面就出现了。</p>
<p>如果指定端口-p，则提示create_listener没权限<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] INFO  WEBrick <span class="number">1.3</span>.1</span><br><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] INFO  ruby <span class="number">2.0</span>.0 (<span class="number">2014</span>-<span class="number">11</span>-<span class="number">13</span>) [x86_64-linux]</span><br><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] WARN  TCPServer <span class="keyword">Error</span>: Permission denied - bind(<span class="number">2</span>)</span><br><span class="line">Exiting</span><br><span class="line">/home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `require<span class="comment">': cannot load such file -- abrt/handler (LoadError)</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> require<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">240</span>:<span class="keyword">in</span> `load_dependency<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `require<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/abrt-<span class="number">0.1</span>.1/<span class="keyword">lib</span>/abrt.rb:<span class="number">6</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> &lt;top (required)&gt;<span class="comment">'</span></span><br><span class="line">/usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `initialize<span class="comment">': Permission denied - bind(2) (Errno::EACCES)</span></span><br><span class="line">	<span class="keyword">from</span> /usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `<span class="keyword">new</span><span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> create_listeners<span class="comment">'</span></span><br></pre></td></tr></table></figure></p>
<p>这个时候需要<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo semanage port -<span class="tag">a</span> -t http_port_t -<span class="tag">p</span> tcp <span class="number">3000</span></span><br><span class="line">sudo iptables -I INPUT -<span class="tag">p</span> TCP --dport <span class="number">3000</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<h2 id="hello_world">hello world</h2><p>接下来就是照着教程做了，没啥技术含量。。。。。。。<br>练习的代码放在<a href="https://github.com/CodeJuan/learn_ror" target="_blank" rel="external">https://github.com/CodeJuan/learn_ror</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门文档">入门文档</h1><p><a href="http://guides.ruby-china.org/getting_started.html">http://guides.ruby-china.org/getting_started.html</a><br>]]>
    
    </summary>
    
      <category term="rails" scheme="http://blog.decbug.com/tags/rails/"/>
    
      <category term="ruby" scheme="http://blog.decbug.com/tags/ruby/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习ansible]]></title>
    <link href="http://blog.decbug.com/2015/10/11/ansible/"/>
    <id>http://blog.decbug.com/2015/10/11/ansible/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-12-23T13:15:14.099Z</updated>
    <content type="html"><![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/" target="_blank" rel="external">http://docs.ansible.com/</a><br><a id="more"></a></p>
<h1 id="install">install</h1><p>老规矩，从源码开始<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ansible/ansible.git --recursive</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line"><span class="built_in">source</span> ./hacking/env-setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖的库</span></span><br><span class="line">sudo pip install paramiko PyYAML Jinja2 httplib2 six</span><br></pre></td></tr></table></figure></p>
<p>当然，也可以直接用pip安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible</span><br></pre></td></tr></table></figure></p>
<h1 id="Inventory">Inventory</h1><h2 id="创建hosts">创建hosts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/ansible/</span><br><span class="line"></span><br><span class="line">sudo vi /etc/ansible/hosts</span><br><span class="line"><span class="comment"># 在hosts写上agent的IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ANSIBLE_INVENTORY=/etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<h2 id="执行ping">执行ping</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure>
<h2 id="提示失败">提示失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">161.52</span> | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"ERROR! SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我明明已经把master加入到可信SSH里了呀，可以不用密码ssh到agent呢。</p>
<h2 id="配置ssh-agent试试">配置ssh-agent试试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>还是不行</p>
<h2 id="解决">解决</h2><p>查看官方文档<a href="http://docs.ansible.com/ansible/intro_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_inventory.html</a>，提到</p>
<blockquote>
<p><code>ansible_host</code><br>  The name of the host to connect to, if different from the alias you wish to give to it.<br><code>ansible_port</code><br>  The ssh port number, if not 22<br><code>ansible_user</code><br>  The default ssh user name to use.<br>ansible_ssh_pass<br>  The ssh password to use (this is insecure, we strongly recommend using —ask-pass or SSH keys)<br>ansible_ssh_private_key_file<br>  Private key file used by ssh.  Useful if using multiple keys and you don’t want to use SSH agent.<br>ansible_ssh_common_args<br>  This setting is always appended to the default command line for<br>  sftp, scp, and ssh. Useful to configure a <code>ProxyCommand</code> for a<br>  certain host (or group).<br>ansible_sftp_extra_args<br>  This setting is always appended to the default sftp command line.<br>ansible_scp_extra_args<br>  This setting is always appended to the default scp command line.<br>ansible_ssh_extra_args<br>  This setting is always appended to the default ssh command line.<br>ansible_ssh_pipelining<br>  Determines whether or not to use SSH pipelining. This can override the<br>  <code>pipelining</code> setting in <code>ansible.cfg</code>.</p>
</blockquote>
<p>需要设置IP、port和user</p>
<h2 id="改写hosts文件">改写hosts文件</h2><p>加上user<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">g530</span> ansible_user=g530 ansible_ssh_host=<span class="number">192.168.161.52</span></span><br></pre></td></tr></table></figure></p>
<p>再次调用<code>ansible all -m ping</code>，提示成功</p>
<h1 id="dynamic_inventory">dynamic_inventory</h1><p><a href="http://docs.ansible.com/ansible/intro_dynamic_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_dynamic_inventory.html</a><br>暂时不看，等用到的时候再看</p>
<h1 id="pattern_&amp;_ad-hoc_command">pattern &amp; ad-hoc command</h1><p>也暂时略过</p>
<h1 id="playbook">playbook</h1><h2 id="ping">ping</h2><p>先写一个最简单的ping</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">--                                                                        </span><br><span class="line"></span>-<span class="ruby"> <span class="symbol">hosts:</span> g53<span class="number">0</span></span><br><span class="line"></span>  tasks:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">name:</span> ping</span><br><span class="line"></span>    ping:</span><br></pre></td></tr></table></figure>
<p>然后调用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -<span class="tag">i</span> /etc/ansible/hosts playbook.yml</span><br></pre></td></tr></table></figure></p>
<p>显示<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PLAY <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>说明成功</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/ping" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/ping</a></p>
<h2 id="advanced">advanced</h2><p>来尝试一个高端点的，带roles handler template的</p>
<h3 id="playbook-1">playbook</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">--</span><br><span class="line"></span>-<span class="ruby"> <span class="symbol">name:</span> role_handler</span><br><span class="line"></span>  hosts: g530</span><br><span class="line">  </span><br><span class="line">  roles:</span><br><span class="line">  -<span class="ruby"> test</span></span><br></pre></td></tr></table></figure>
<h3 id="创建roles">创建roles</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">current_dir</span><br><span class="line"><span class="string">|--playbook.yml</span></span><br><span class="line"><span class="string">|--roles</span></span><br><span class="line">   <span class="string">|--test</span></span><br><span class="line">      <span class="string">|--handlers</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--tasks</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--templates</span></span><br><span class="line">         <span class="string">|--存放模板</span></span><br></pre></td></tr></table></figure>
<p>需要创建一个roles文件夹，里边的子文件夹的名字就是playbook里写的roles名字</p>
<h3 id="handlers">handlers</h3><p>每个role都会有handlers文件夹，里边的main.yml放一些响应事件<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: restart</span><br><span class="line">  service: name=iptables <span class="keyword">state</span>=restarted enabled=yes</span><br></pre></td></tr></table></figure></p>
<p>例子里表示重启iptables</p>
<h3 id="tasks">tasks</h3><p>role的tasks里的main.yml就是真正要执行的任务<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">--</span><br><span class="line"></span>-<span class="ruby"> <span class="symbol">name:</span> ping <span class="keyword">and</span> restart iptables</span><br><span class="line"></span>  ping:  </span><br><span class="line">  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>表示先ping，然后调用handler里的restart</p>
<h3 id="template">template</h3><p>在template里创建一个文件<code>haha</code>，将他拷贝到agent的<code>/tmp</code><br>tasks mail.yml改为<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: ping</span><br><span class="line">  ping:   </span><br><span class="line">  <span class="keyword">template</span>: src=haha dest=/tmp/haha</span><br><span class="line">  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>提示语法错误，看起来似乎一个<code>name</code>只能有一个操作</p>
<p>改为两个name貌似就好了<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: ping</span><br><span class="line">  ping:   </span><br><span class="line"></span><br><span class="line">- name: <span class="keyword">template</span> iptables</span><br><span class="line">  <span class="keyword">template</span>: src=haha dest=/tmp/haha</span><br><span class="line">  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>再play一下<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [role_handler] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : template iptables] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">changed: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>果然多了一个操作</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/advancded_play" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/advancded_play</a></p>
<h1 id="深入学习">深入学习</h1><p>已经了解了基本概念，接下来就要看一些优秀案例了<br><a href="http://docs.ansible.com/ansible/playbooks_best_practices.html" target="_blank" rel="external">http://docs.ansible.com/ansible/playbooks_best_practices.html</a><br><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">https://github.com/ansible/ansible-examples</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/">http://docs.ansible.com/</a><br>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://blog.decbug.com/tags/ansible/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="devops" scheme="http://blog.decbug.com/tags/devops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换部门]]></title>
    <link href="http://blog.decbug.com/2015/10/10/dept/"/>
    <id>http://blog.decbug.com/2015/10/10/dept/</id>
    <published>2015-10-09T16:00:00.000Z</published>
    <updated>2015-10-11T07:17:25.543Z</updated>
    <content type="html"><![CDATA[<p>换了个好玩的部门<br><a id="more"></a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>换了个好玩的部门<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tornado+nginx+IP白名单]]></title>
    <link href="http://blog.decbug.com/2015/09/13/tornado/"/>
    <id>http://blog.decbug.com/2015/09/13/tornado/</id>
    <published>2015-09-12T16:00:00.000Z</published>
    <updated>2015-11-17T14:36:02.062Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>
<a id="more"></a>
<h2 id="分析一下需求">分析一下需求</h2><ul>
<li>一个input，一个button，点button就把input的内容追加到某个文件中，暂时不考虑input是否合法</li>
<li>tornado 写一个handler</li>
<li>定时把最新的IP合并到allow_ip.con</li>
</ul>
<h1 id="tornado">tornado</h1><h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/t/tornado/tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tornado-<span class="number">4.2</span>.<span class="number">1</span></span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="开搞">开搞</h2><h3 id="demos">demos</h3><p>先试用一下<code>tornado</code>源码里的demos，找到最简单的helloworld，运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python helloworld.py</span><br></pre></td></tr></table></figure></p>
<p>在另一台机器上访问，总是载入不了网页。于是开始排查</p>
<ul>
<li>本机上查看端口<code>netstat -tulpn | grep :8888</code></li>
<li>在本机上curl，可以打开</li>
<li>猜测可能是防火墙的问题，<code>iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code><br>再次访问，就OK啦</li>
</ul>
<h3 id="一个输入页面">一个输入页面</h3><h4 id="login-html">login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"&#123;&#123; request.path &#125;&#125;"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;&#123; _("你的IP") &#125;&#125; <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;div&gt;&#123;&#123; _("Password") &#125;&#125; &lt;input type="password" name="password"/&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"&#123;&#123; _("</span><span class="value">输入")</span> &#125;&#125;"/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       &#123;% module xsrf_form_html() %&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="test-py">test.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LoginHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># template from login.html</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line">        <span class="comment">#pwd=self.get_argument("password", "") </span></span><br><span class="line">        self.write(usr)</span><br><span class="line">        <span class="comment">#self.write(pwd)</span></span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login时通过LoginHandler处理</span></span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h4 id="运行效果">运行效果</h4><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2021:59:01.png" alt="输入"></p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2022:04:20.png" alt="结果"></p>
<h3 id="保存用户的IP到白名单">保存用户的IP到白名单</h3><p>先写入到一个临时文件，然后定时同步到nginx的配置里include白名单文件allow_ips.conf</p>
<h4 id="写入文件">写入文件</h4><p>先实现一个最简单的，不考虑锁啊，共享之类的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    file_name = <span class="string">"ip.txt"</span></span><br><span class="line">    FILE = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把用户输入的IP写入到文件</span></span><br><span class="line">        self.WriteIP(usr)</span><br><span class="line">        self.write(<span class="string">"Your IP have been added to the white list\n"</span>+usr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加一个writeIP的方法不考虑共享等问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">WriteIP</span><span class="params">(self,ip)</span>:</span></span><br><span class="line">        self.FILE = open(self.file_name, <span class="string">"w"</span>) </span><br><span class="line">        self.FILE.writelines(ip)</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h1 id="nginx">nginx</h1><h2 id="下载安装">下载安装</h2><h3 id="源码编译">源码编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line">tar zxvf nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="number">1.9</span>.<span class="number">4</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>
<p>提示缺少C编译器，于是<code>yum install gcc</code><br>提示缺少pcre library，于是<code>yum -y install pcre-devel</code><br>接着又提示缺少zlib。。算了，还是换别的方式吧，不从源码编了</p>
<h3 id="yum安装">yum安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/<span class="number">7</span>/noarch/RPMS/nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm</span><br><span class="line">sudo rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm </span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置nginx-conf">配置nginx.conf</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">8777</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://192.168.151.55:8888/</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试配置是否正确</span></span><br><span class="line">sudo nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<h1 id="iptables">iptables</h1><p>我们只是需要一个白名单而已，用nginx是不是太重型化了？<br>iptables热插拔，即使生效，也支持可信ip，而且用起来比较简单。</p>
<h2 id="导入导出">导入导出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export the rules of iptable</span></span><br><span class="line">iptables-save &gt; /some/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">iptables-restore &lt;/some/file</span><br></pre></td></tr></table></figure>
<h2 id="即时生效">即时生效</h2><blockquote>
<p>Is a reboot required after edit/saving linux iptables?</p>
<blockquote>
<p>iptables rules take effect immediately.<br>Changes to iptables take effect immediately when they are run.However, your language of “edit and save” makes me think you are editing a conf file or script of some kind rather than actually running the iptables commands.If you are making your changes in a script, you must make sure that script gets run in order for the changes to take affect. </p>
</blockquote>
</blockquote>
<h2 id="使用">使用</h2><h1 id="生产环境的使用">生产环境的使用</h1><p>最终还是采用了nginx</p>
<ol>
<li>用户注册，将IP保存到数据库</li>
<li>定时从数据库中取IP，并生成allow_ips.conf</li>
<li>nginx reload -s</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 配置</span></span><br><span class="line">    <span class="title">server</span> &#123;</span><br><span class="line">        <span class="title">listen</span> <span class="number">8777</span>;</span><br><span class="line">        <span class="title">location</span> / &#123;</span><br><span class="line">            <span class="title">include</span> allow_ips.conf</span><br><span class="line">            deny all;</span><br><span class="line">            <span class="title">errorpage</span> <span class="number">403</span> <span class="url">http://register_server:port</span>;</span><br><span class="line">            <span class="title">proxy_pass</span> <span class="url">http://192.168.151.55:8888/</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>]]>
    
    </summary>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="tornado" scheme="http://blog.decbug.com/tags/tornado/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>