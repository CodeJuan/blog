<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Continuous Learning]]></title>
  <subtitle><![CDATA[浮云一别后，流水十年间]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.decbug.com//"/>
  <updated>2015-11-17T14:50:21.882Z</updated>
  <id>http://blog.decbug.com//</id>
  
  <author>
    <name><![CDATA[CodeJuan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[openstack性能测试器(4):rabbitmq-server、kombu、tcpdump]]></title>
    <link href="http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/"/>
    <id>http://blog.decbug.com/2015/11/10/openstack_perf_tester_4/</id>
    <published>2015-11-09T16:00:00.000Z</published>
    <updated>2015-11-17T14:50:21.882Z</updated>
    <content type="html"><![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html" target="_blank" rel="external">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html" target="_blank" rel="external">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>说起来还是ubuntu安装简单，apt-get install rabbitmq-server就够了</p>
<h1 id="management_plugin">management plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用management</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p>然后访问<code>serverIP:15672</code>，就可以进入管理页面。此时只有guest帐号可用，然而rabbitmq-server的默认配置，guest帐号只能本机才能用，所以需要add_user</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加用户</span></span><br><span class="line">sudo rabbitmqctl add_user <span class="built_in">test</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置管理员权限</span></span><br><span class="line">sudo rabbitmqctl <span class="built_in">set</span>_user_tags <span class="built_in">test</span> administrator</span><br></pre></td></tr></table></figure>
<p>然后再访问<code>serverIP:15672</code>，用刚才创建的test账户登录，就能看到管理界面了。</p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_management.png" alt=""></p>
<h1 id="tracing_plugin">tracing plugin</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/bin</span><br><span class="line"><span class="comment"># enable tracing</span></span><br><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_tracing</span><br><span class="line"><span class="comment"># trace on</span></span><br><span class="line">rabbitmqctl trace_on </span><br><span class="line"><span class="comment"># stop</span></span><br><span class="line">sudo service rabbitmq-server stop</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line">sudo service rabbitmq-server start</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/rabbitmq_tracing.png" alt=""></p>
<h1 id="kombu">kombu</h1><blockquote>
<p>Kombu是一个为Python写的消息库，目标是为AMQ协议提供一个傻瓜式的高层接口，让Python中的消息传递变得尽可能简单，并且也提供一些常见消息传递问题的解决方案。</p>
</blockquote>
<h2 id="kombu_cast">kombu_cast</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, routing_key=<span class="string">'video'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># connections</span></span><br><span class="line"><span class="keyword">with</span> Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>) <span class="keyword">as</span> conn:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># produce</span></span><br><span class="line">    producer = conn.Producer(serializer=<span class="string">'json'</span>)</span><br><span class="line">    now = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    producer.publish(&#123;<span class="string">'name'</span>: <span class="string">'/tmp/lolcat1.avi'</span>, <span class="string">'size'</span>: now&#125;,</span><br><span class="line">                      exchange=media_exchange, routing_key=<span class="string">'video'</span>,</span><br><span class="line">                      declare=[video_queue])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the declare above, makes sure the video queue is declared</span></span><br><span class="line">    <span class="comment"># so that the messages can be delivered.</span></span><br><span class="line">    <span class="comment"># It's a best practice in Kombu to have both publishers and</span></span><br><span class="line">    <span class="comment"># consumers declare the queue.  You can also declare the</span></span><br><span class="line">    <span class="comment"># queue manually using:</span></span><br><span class="line">    <span class="comment">#     video_queue(conn).declare()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># consume</span></span><br><span class="line"><span class="comment">#    with conn.Consumer(video_queue, callbacks=[process_media]) as consumer:</span></span><br><span class="line"><span class="comment">#        # Process messages and handle events on all channels</span></span><br><span class="line"><span class="comment">#        while True:</span></span><br><span class="line"><span class="comment">#            conn.drain_events()</span></span><br></pre></td></tr></table></figure>
<h2 id="kombu_consumer">kombu_consumer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Connection, Exchange, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = Connection(<span class="string">'amqp://test:test@192.168.161.56:5672//'</span>)</span><br><span class="line">media_exchange = Exchange(<span class="string">'media'</span>, <span class="string">'direct'</span>, durable=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_media</span><span class="params">(body, message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> body</span><br><span class="line">    message.ack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Consume from several queues on the same channel:</span></span><br><span class="line">video_queue = Queue(<span class="string">'video'</span>, exchange=media_exchange, key=<span class="string">'video'</span>)</span><br><span class="line">image_queue = Queue(<span class="string">'image'</span>, exchange=media_exchange, key=<span class="string">'image'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> conn.Consumer([video_queue, image_queue],</span><br><span class="line">                         callbacks=[process_media]) <span class="keyword">as</span> consumer:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        conn.drain_events()</span><br></pre></td></tr></table></figure>
<h1 id="tcpdump">tcpdump</h1><p>抓包利器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump tcp -i wlan1 -n dst port <span class="number">5672</span>  -w cast.cap</span><br><span class="line"><span class="comment"># tcp 表示抓tcp协议</span></span><br><span class="line"><span class="comment"># -i，表示抓哪个网卡。我这里算wlan1抓无线网卡1</span></span><br><span class="line"><span class="comment"># -w 表示写入到哪个文件</span></span><br><span class="line"><span class="comment"># dst port 5672表示只抓目的端口为5672的数据</span></span><br></pre></td></tr></table></figure></p>
<p>然后用wireshark打开cast.cap<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_cast.png" alt=""></p>
<p>顺便抓了下consumer的<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/wireshark_consume.png" alt=""></p>
<p>等有时间把每一包的意思都解释一下，今天就到这吧。<br>抓的包放在<br><a href="https://github.com/CodeJuan/test_rabbitmq" target="_blank" rel="external">https://github.com/CodeJuan/test_rabbitmq</a><br>可以对照代码看看</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="rabbitmq_server">rabbitmq server</h1><p><a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.<span class="number">5.6</span>/rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line">sudo rpm -ivh rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少erlang</p>
<p><a href="http://www.erlang.org/download.html">http://www.erlang.org/download.html</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.erlang.org/download/otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line">tar -xvf otp_src_18.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> otp_src_18.<span class="number">1</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示缺少fop和wxWidgets</span></span><br><span class="line">sudo yum install fop</span><br><span class="line">sudo yum install wxWidgets</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh --nodeps rabbitmq-server-<span class="number">3.5</span>.<span class="number">6</span>-<span class="number">1</span>.noarch.rpm</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="rabbitmq" scheme="http://blog.decbug.com/tags/rabbitmq/"/>
    
      <category term="tcpdump" scheme="http://blog.decbug.com/tags/tcpdump/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译构建时间优化]]></title>
    <link href="http://blog.decbug.com/2015/11/05/compile_optimize/"/>
    <id>http://blog.decbug.com/2015/11/05/compile_optimize/</id>
    <published>2015-11-04T16:00:00.000Z</published>
    <updated>2015-11-08T12:16:52.030Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br><a id="more"></a></p>
<h1 id="分析各组件的依赖关系">分析各组件的依赖关系</h1><p>既然无人支持，但我还是得试试。<br>于是顺手写了个脚本分析组件之间的依赖关系，并且看C++代码，将项目整体分为4层。UI是C#工程，用显式加载的方式调用C++，故可以独立出来。<br>脚本<a href="http://blog.decbug.com/2015/07/26/pe_depen/">http://blog.decbug.com/2015/07/26/pe_depen/</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">framework</td>
</tr>
<tr>
<td style="text-align:center">midware</td>
</tr>
<tr>
<td style="text-align:center">plugin</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">UI</td>
</tr>
</tbody>
</table>
<p>下层依赖上层，也就是下层必须等待上层编译完成。同一层的组件相互独立，可以并行构建。</p>
<p>分层之后，编译还是那么滴慢，毕竟CPU内存资源有限，再优化的意义也不大。</p>
<h1 id="升级服务器">升级服务器</h1><p>正当我无可奈何之际，公司出了这么一个要求：让每个项目的编译构建时间小于15分钟，这时候大家才重视起来。。各种资源刷刷滴都来了。</p>
<h2 id="时间还增加了？">时间还增加了？</h2><p>有了领导的重视，事情就好办了，服务器刷刷的就到位了，24核96G，还有20T的硬盘，看着都爽啊。<br>高高兴兴的把构建脚本拷贝过去，然后自动下代码，开始编译。<br>原本以为在硬件有极大提升的情况下，构建时间应该会缩短一半多，达到50分钟的水平。<br>可实际情况却让我无比郁闷，竟然时间还增加了。想起之前在领导面前夸下的海口，说有办法搞到25分钟左右，领导才同意申请服务器的。</p>
<h2 id="分析并解决">分析并解决</h2><p>只好开始新一轮的构建，手动更新一下代码，发现更新速度超级慢，猜测是网络的原因，导致下载很慢，经过分析，网络正常。<br>内存和CPU都极其给力，自然不会是瓶颈。于是把怀疑目标转向硬盘，用crystal mark测试一下硬盘速度，果然奇慢无比。看来真的是硬盘拖累了速度啊。<br>远程开机，查看bios中关于磁盘的设置，竟然是RAID5。。。。<br>好吧，反正是编译机器，不需要数据安全，那就改成不raid吧，再次编译，时间减少到了60分钟。</p>
<h1 id="分析VC的工程文件">分析VC的工程文件</h1><h2 id="减少文件拷贝">减少文件拷贝</h2><p>sln：其实就是一个配置文件，把用到VC工程即vcxproj都include进来<br>vcxproj其实就是xml文件，记录着cpp h的相对路径，各种编译选项等等。可以把它当成xml进行读写。</p>
<p>查看每个vcxproj，发现prebuild和postbuild的event都会做拷贝文件的操作，大约会拷贝近300M的文件。看了下拷贝路径，原来是用于本地调试的，对于编译构建来说，完全用不着。<br>写个powershell脚本，在编译的ant脚本里调用一下，每次构建之前都调用一次，把这两个event都disable掉。<br>经过测试，时间从60分钟降低到50分钟</p>
<h2 id="开启mp">开启mp</h2><p>观察编译过程，CPU利用率始终上不去，没有发挥多核的优势啊，得想办法把CPU都利用起来。<br>看了下编译选项，有个/MP引起了我的注意，看看微软咋说的<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/MP (<span class="keyword">Build </span>with <span class="keyword">Multiple </span>Processes)</span><br><span class="line"><span class="label">The</span> /MP compiler option can significantly reduce <span class="keyword">build </span>time when you compile many files.</span><br></pre></td></tr></table></figure></p>
<p>我那可是24核的机器啊，不开启多核编译真的是太浪费资源了。<br>老规矩，windows平台，写个powershell脚本，遍历所有工程的vcxproj文件，把/MP都打开。</p>
<p>在ant编译脚本里加入套餐，在编译之前执行powershell脚本，再次测试，时间降低到40分钟。</p>
<h1 id="分布式编译">分布式编译</h1><p>继续观察编译过程，大部分时间的CPU都能有90%以上，但有一段时间内CPU始终只有10%左右。打开任务管理器，选择列，命令行。看下MSBUILD进程的命令行，找出此时是在搞哪个SLN，想办法把这个SLN的时间降下来。<br>找到SLN后，查看它的代码结构，发现优化的空间不大。只好用别的方法，由于link的原因，每个SLN的编译过程，都是串行的，所以CPU一直上不去。<br>找incredi build，可以并行link，充分利用CPU，修改编译脚本，在编译这个SLN的时候，不用MSBUILD，改incredi build，CPU果然上去了。<br>经测试，整体的时间从40分钟降低到30分钟</p>
<h1 id="这不是终点">这不是终点</h1><p>虽然用到incredi build，但这只是伪分布式，所有的计算资源都是在一台服务器上，当代码继续膨胀，编译时间还是会变长。<br>这只是在治标不治本，真正要做到分布式构建，每个组件都能并行构建的话。需要把隐式加载改为显式加载，即组件之间只通过头文件进行依赖，而不是通过lib，这样就不用等待上游的完成。</p>
<p>具体方法是：</p>
<ul>
<li>都改成loadlibrary，GetFunctionProcess的方式加载组件，组件之间在编译过程中相互独立。</li>
<li>如此便可把将每个组件的编译过程推送到agent上执行</li>
<li>汇总每个agent上的编译结果（DLL）</li>
</ul>
<p>这样整体的编译构建时间，就是编译最慢的那个组件的时间了。</p>
<p>然而我已换部门，只能先把demo弄好，等待后来者完善了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>项目是一个Windows桌面应用程序，用VS2010开发，后台是C++开发的DLL，UI是C#，目前已有103万行代码。<br>在代码只有30万行的时候，编译时间大约是10多分钟，反馈的速度足够快。然而随着代码膨胀，编译时间急剧上涨，当前的编译构建时间高达120分钟，也就是说，当你提交了一行代码，需要等120分钟之后，才能做全量测试。<br>如此长的等待时间，绝对是在浪费生命，此前我就一直想要优化，奈何见效不大。<br>原因有二：</p>
<ul>
<li>构建的机器太差了，4核4G的虚拟机，蜗牛速度。</li>
<li>项目中各组件（DLL）用的是隐式记载的方式。如果A依赖B，那么，必须等待B编译结束，才能编译A，只能串行。</li>
</ul>
<p>我向领导安利了多次，采购一台好点的服务器，用来编译构建。也算了这么一笔账，项目组有100多人，如果有100个人在等待编译的话，这100个人的一小时的工资可不是小数目啊，绝对比一台服务器贵了。然而还是。。。。。。<br>还向各开发组安利过，快速构建的好处，可以减少等待，缩短反馈周期，更快的进行测试验证，然而。。。。。<br>对此我想说，呵呵！<br>不能再吐槽了，还是讲正事吧。</p>
<p>由于家里没有windows系统，无法截图，只能凭记忆胡乱记录一下。<br>]]>
    
    </summary>
    
      <category term="build" scheme="http://blog.decbug.com/tags/build/"/>
    
      <category term="compile" scheme="http://blog.decbug.com/tags/compile/"/>
    
      <category term="optimize" scheme="http://blog.decbug.com/tags/optimize/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cobbler自动部署系统]]></title>
    <link href="http://blog.decbug.com/2015/11/01/cobbler/"/>
    <id>http://blog.decbug.com/2015/11/01/cobbler/</id>
    <published>2015-10-31T17:00:00.000Z</published>
    <updated>2015-11-05T11:45:12.208Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/" target="_blank" rel="external">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>
<a id="more"></a>
<h1 id="安装cobbler">安装cobbler</h1><p>参考官网的quick start <a href="http://cobbler.github.io/manuals/quickstart/" target="_blank" rel="external">http://cobbler.github.io/manuals/quickstart/</a></p>
<h2 id="disable_SELinux">disable SELinux</h2><p>由于我对SELinux不熟悉，根据官网的建议，还是把SELinux Disable吧</p>
<p>参考<a href="https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html" target="_blank" rel="external">https://www.centos.org/docs/5/html/5.1/Deployment_Guide/sec-sel-enable-disable.html</a></p>
<p>修改<code>/etc/sysconfig/selinux</code>，修改<code>SELINUX</code>的值为<code>permissive</code>，并增加一行<code>SETLOCALDEFS=0</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=enforcing  <span class="comment"># 改为 disabled</span></span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure>
<h2 id="Installing_Cobbler">Installing Cobbler</h2><h3 id="错误的方法">错误的方法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cobbler</span><br></pre></td></tr></table></figure>
<p>提示没有package，说明要添加源。<br>按照<a href="http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html" target="_blank" rel="external">http://cobbler.github.io/manuals/2.4.0/3/2_-_Installing_From_Packages.html</a>说</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-X-Y.noarch.rpm</span></span><br><span class="line">  sudo rpm -Uvh http://download.fedoraproject.org/pub/epel/<span class="number">7</span>/x86_64/epel-release-<span class="number">7</span>-<span class="number">0</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>还是不行，因为我不知道具体的版本号。</p>
<p>只好找到最新release的页面<a href="http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html" target="_blank" rel="external">http://cobbler.github.io/posts/2015/09/30/cobbler_2.6.10_released.html</a>，根据<code>Packages will be provided as soon as possible, please check</code>的提示，找到<a href="http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/" target="_blank" rel="external">http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-7/noarch/</a></p>
<p>添加源</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/cobbler-web-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br><span class="line">sudo rpm -Uvh http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/CentOS_CentOS-<span class="number">7</span>/noarch/koan-<span class="number">2.6</span>.<span class="number">10</span>-<span class="number">11.2</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>提示缺少python的一堆库，</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">python-simplejson</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br><span class="line"><span class="tag">python-cheetah</span> <span class="tag">is</span> <span class="tag">needed</span> <span class="tag">by</span> <span class="tag">cobbler-2</span><span class="class">.6</span><span class="class">.10-11</span><span class="class">.2</span><span class="class">.noarch</span></span><br></pre></td></tr></table></figure>
<p>使用pip安装simplejson和cheetah，还是报这个错，看来此路不通，需要另想它法。</p>
<h3 id="正确的方法">正确的方法</h3><p>找到了这个链接<a href="http://cobbler.readthedocs.org/en/latest/installation-guide.html" target="_blank" rel="external">http://cobbler.readthedocs.org/en/latest/installation-guide.html</a></p>
<p>Make sure you have the EPEL repository enabled on your system:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum repolist</span><br><span class="line"><span class="comment"># sudo curl -o cobbler30.repo http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler30/CentOS_CentOS-7/home:libertas-ict:cobbler30.repo</span></span><br></pre></td></tr></table></figure>
<p>接下来</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cobbler cobbler-web</span><br></pre></td></tr></table></figure>
<p>就安装成功了</p>
<h2 id="启动cobbler">启动cobbler</h2><h3 id="改配置">改配置</h3><p><code>/etc/cobbler/settings</code></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">default_password_crypted:</span> <span class="string">"$1$bfI7WLZz$PxXetL97LkScqJFxnW7KS1"</span> <span class="preprocessor"># 123456</span></span><br><span class="line">openssl passwd -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="label">next_server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"><span class="label">server:</span> <span class="number">192.168</span>.161.51</span><br><span class="line"></span><br><span class="line">我是通过路由分配IP，就不设置manage_dhcp</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service httpd start</span><br><span class="line">sudo service xinetd start</span><br><span class="line">sudo service cobblerd start</span><br><span class="line"></span><br><span class="line">sudo chkconfig cobblerd on</span><br><span class="line">sudo chkconfig xinetd on</span><br><span class="line">sudo chkconfig httpd on</span><br></pre></td></tr></table></figure>
<p>检查配置</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 : SELinux is enabled. Please review the following wiki page for details on ensuring cobbler works correctly in your SELinux environment:</span><br><span class="line">    https://github.com/cobbler/cobbler/wiki/Selinux</span><br><span class="line">2 : <span class="operator"><span class="keyword">change</span> <span class="string">'disable'</span> <span class="keyword">to</span> <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line"><span class="number">3</span> : <span class="keyword">some</span> network boot-loaders <span class="keyword">are</span> missing <span class="keyword">from</span> /<span class="keyword">var</span>/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> <span class="keyword">to</span> download them, <span class="keyword">or</span>, <span class="keyword">if</span> you <span class="keyword">only</span> want <span class="keyword">to</span> handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* <span class="keyword">version</span> <span class="keyword">of</span> the syslinux package installed <span class="keyword">and</span> can <span class="keyword">ignore</span> this message entirely.  Files <span class="keyword">in</span> this directory, should you want <span class="keyword">to</span> support <span class="keyword">all</span> architectures, should include pxelinux.0, menu.c32, elilo.efi, <span class="keyword">and</span> yaboot. The <span class="string">'cobbler get-loaders'</span> command <span class="keyword">is</span> the easiest way <span class="keyword">to</span> resolve these requirements.</span><br><span class="line"><span class="number">4</span> : file /etc/xinetd.d/rsync does <span class="keyword">not</span> exist</span><br><span class="line"><span class="number">5</span> : debmirror package <span class="keyword">is</span> <span class="keyword">not</span> installed, it will be required <span class="keyword">to</span> manage debian deployments <span class="keyword">and</span> repositories</span><br><span class="line"><span class="number">6</span> : The <span class="keyword">default</span> <span class="keyword">password</span> used <span class="keyword">by</span> the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) <span class="keyword">is</span> still <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">'cobbler'</span> <span class="keyword">and</span> should be <span class="keyword">changed</span>, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> <span class="keyword">to</span> generate new one</span><br><span class="line"><span class="number">7</span> : fencing tools were <span class="keyword">not</span> <span class="keyword">found</span>, <span class="keyword">and</span> <span class="keyword">are</span> required <span class="keyword">to</span> <span class="keyword">use</span> the (optional) <span class="keyword">power</span> management features. <span class="keyword">install</span> cman <span class="keyword">or</span> fence-agents <span class="keyword">to</span> <span class="keyword">use</span> them</span></span><br></pre></td></tr></table></figure>
<p>根据提示一一修改<br>解决方法</p>
<ol>
<li>disable selinux</li>
<li>改配置文件</li>
<li>执行cobbler get-loaders</li>
<li>新建/etc/xinetd.d/rsync，增加disable = no,修改 rsync 和 tftp 这两个服务的 xinetd 配置</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/xinetd.d/rsync</span></span><br><span class="line"><span class="title">service</span> rsync</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># vi /etc/xinetd.d/tftp</span></span><br><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">        <span class="title">disable</span> = <span class="built_in">no</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>不支持debian系，cobbler服务器能同时部署CentOS/Fedora/Debian/Ubuntu系统，所以需要安装debmirror，安装debmirror-20090807-1.el5.noarch.rpm，在此之前，需要先安装一些其他的依赖包：<br>暂时不管，我这里只测试centos<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://rpmfind.net/linux/epel/<span class="number">6</span>/x86_64/debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br><span class="line">sudo rpm -ivh debmirror-<span class="number">2.14</span>-<span class="number">2</span>.el6.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum install ed patch perl perl-Compress-Zlib perl-Cwd perl-Digest-MD5 perl-Digest-SHA1 perl-LockFile-Simple perl-libwww-perl</span></span><br><span class="line"><span class="preprocessor"># wget ftp://fr2.rpmfind.net/linux/epel/5/ppc/debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># rpm –ivh debmirror-20090807-1.el5.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># 修改/etc/debmirror.conf 配置文件，注释掉 @dists 和 @arches 两行</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># vim /etc/debmirror.conf</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#@dists=”sid”;</span></span><br><span class="line">@sections=”main,main/debian-installer,contrib,non-free”;</span><br><span class="line"><span class="preprocessor">#@arches=”i386″;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>生成密码。修改默认系统密码用 openssl 生成一串密码后加入到 cobbler 的配置文件（/etc/cobbler/settings）里，替换 default_password_crypted 字段：</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openssl passwd -1 -salt ‘bihan’ ‘Abcd1234′</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span></span><br><span class="line"><span class="comment"># vi /etc/cobbler/settings</span></span><br><span class="line">修改内容如下：</span><br><span class="line"><span class="symbol">default_password_crypted:</span> “<span class="variable">$1</span><span class="variable">$‘</span>bihan<span class="variable">$bndMeAmxTpT0ldGYQoRSw0</span>″</span><br></pre></td></tr></table></figure>
<ol>
<li>yum install cman或者fence-agents，我装的是fence-agents</li>
</ol>
<p>改完之后运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo service cobblerd restart</span><br><span class="line">sudo cobbler sync</span><br><span class="line"><span class="comment"># 再check一下</span></span><br><span class="line">sudo cobbler check</span><br></pre></td></tr></table></figure>
<p>就只剩下debmirror的问题了，可以暂时不管</p>
<p>下载并挂载iso</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget wget http://mirrors.sina.cn/centos/<span class="number">7</span>/isos/x86_64/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso</span><br><span class="line"></span><br><span class="line"><span class="comment">#sudo mount -t iso9660 -o loop,ro ./CentOS-7-x86_64-Minimal-1503-01.iso /mnt</span></span><br><span class="line">sudo mount -t iso9660 -o loop,ro /home/i3/save/iso/CentOS-<span class="number">7</span>-x86_64-Minimal-<span class="number">1503</span>-<span class="number">01</span>.iso /mnt/centos</span><br><span class="line"><span class="comment">#sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt</span></span><br><span class="line">sudo cobbler import --name=centos7 --arch=x86_64 --path=/mnt/centos</span><br><span class="line"><span class="comment">#sudo vi /etc/fstab</span></span><br><span class="line"><span class="comment"># 增一行/home/i3/save/iso/CentOS-7-x86_64-Minimal-1503-01.iso   /home/i3/save/cobbler_os iso9660 defaults,ro,loop  0 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#umount /somedir</span></span><br></pre></td></tr></table></figure>
<p>挂载时报错</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># sudo cobbler import --name=centos7 --<span class="keyword">arch</span>=x86_64 --path=/mnt/centos</span><br><span class="line">task started: 2015-11-04_215116_import</span><br><span class="line">task started (id=Media import, time=Wed Nov  4 21:51:16 2015)</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel6</span><br><span class="line">Found a candidate signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Found a matching signature: breed=redhat, <span class="keyword">version</span>=rhel7</span><br><span class="line">Adding distros from path /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64:</span><br><span class="line">creating new distro: centos7-x86_64</span><br><span class="line">trying symlink: /<span class="keyword">var</span>/www/cobbler/ks_mirror/centos7-x86_64 -&gt; /<span class="keyword">var</span>/www/cobbler/links/centos7-x86_64</span><br><span class="line">creating new profile: centos7-x86_64</span><br><span class="line">Exception occured: &lt;<span class="keyword">type</span> 'exceptions.UnicodeEncodeError'&gt;</span><br><span class="line">Exception value: 'ascii' codec can't <span class="keyword">encode</span> character <span class="keyword">u</span>'\u2018' <span class="keyword">in</span> position 3: ordinal not <span class="keyword">in</span> <span class="keyword">range</span>(128)</span><br><span class="line">Exception Info:</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 87, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    rc = self._run(self)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/remote.py"</span>, <span class="keyword">line</span> 231, <span class="keyword">in</span> runner</span><br><span class="line">    self.logger</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/api.py"</span>, <span class="keyword">line</span> 938, <span class="keyword">in</span> import_tree</span><br><span class="line">    <span class="keyword">return</span> import_module.<span class="keyword">run</span>(path,mirror_name,network_root,kickstart_file,<span class="keyword">arch</span>,breed,os_version)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 140, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    os.path.walk(self.path, self.distro_adder, distros_added)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 246, <span class="keyword">in</span> walk</span><br><span class="line">    walk(name, func, arg)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib64/python2.7/posixpath.py"</span>, <span class="keyword">line</span> 238, <span class="keyword">in</span> walk</span><br><span class="line">    func(arg, top, names)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 255, <span class="keyword">in</span> distro_adder</span><br><span class="line">    adtls.<span class="keyword">append</span>(self.add_entry(dirname,kernel,initrd))</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/modules/manage_import_signatures.py"</span>, <span class="keyword">line</span> 360, <span class="keyword">in</span> add_entry</span><br><span class="line">    self.profiles.add(profile,<span class="keyword">save</span>=True)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/collection.py"</span>, <span class="keyword">line</span> 352, <span class="keyword">in</span> add</span><br><span class="line">    self.lite_sync.add_single_profile(ref.name)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/action_litesync.py"</span>, <span class="keyword">line</span> 133, <span class="keyword">in</span> add_single_profile</span><br><span class="line">    self.sync.pxegen.make_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 330, <span class="keyword">in</span> make_pxe_menu</span><br><span class="line">    self.make_actual_pxe_menu()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 480, <span class="keyword">in</span> make_actual_pxe_menu</span><br><span class="line">    menu_items = self.get_menu_items()</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 404, <span class="keyword">in</span> get_menu_items</span><br><span class="line">    <span class="keyword">arch</span>=distro.<span class="keyword">arch</span>, include_header=False)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 702, <span class="keyword">in</span> write_pxe_file</span><br><span class="line">    image, <span class="keyword">arch</span>, kickstart_path)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/pxegen.py"</span>, <span class="keyword">line</span> 880, <span class="keyword">in</span> build_kernel_options</span><br><span class="line">    append_line = self.templar.render(append_line,utils.flatten(blended),None)</span><br><span class="line">   <span class="keyword">File</span> <span class="string">"/usr/lib/python2.7/site-packages/cobbler/templar.py"</span>, <span class="keyword">line</span> 137, <span class="keyword">in</span> render</span><br><span class="line">    data_out = data_out.<span class="keyword">replace</span>(<span class="string">"@@%s@@"</span> % str(x), str(search_table[str(x)]))</span><br><span class="line"></span><br><span class="line">!!! TASK FAILED !!!</span><br></pre></td></tr></table></figure>
<p>删除</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler profile remove --name=centos7-x86_64</span><br><span class="line">sudo cobbler distro remove --name=centos7-x86_64</span><br></pre></td></tr></table></figure>
<p>再重来，看看是不是哪里代码的问题</p>
<p>python编码的问题，在python的Lib\site-packages文件夹下新建一个sitecustomize.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf8  </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo cobbler distro report</span><br><span class="line">sudo cobbler system add --name=<span class="built_in">test</span> --profile=centos7-x86_64</span><br><span class="line">sudo cobbler system list</span><br><span class="line">sudo cobbler system report --name=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 待安装机器的mac和IP</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --interface=eth0 --mac=d0:<span class="number">27</span>:<span class="number">88</span>:d1:<span class="number">4</span>d:<span class="number">7</span>f --ip-address=<span class="number">192.168</span>.<span class="number">161.52</span> --netmask=<span class="number">255.255</span>.<span class="number">255.0</span> --static=<span class="number">1</span> </span><br><span class="line"><span class="comment">#--dns-name=bogon</span></span><br><span class="line">sudo cobbler system edit --name=<span class="built_in">test</span> --gateway=<span class="number">192.168</span>.<span class="number">161.1</span> </span><br><span class="line"><span class="comment">#--hostname=bogon</span></span><br><span class="line">sudo cobbler sync</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我司竟然还是人肉装系统，太TMD老土了。于是找到了<code>cobbler</code>，官网在<a href="http://cobbler.github.io/">http://cobbler.github.io/</a></p>
<p>先看一段简介</p>
<blockquote>
<p>Cobbler is a Linux installation server that allows for rapid setup of network installation environments.</p>
</blockquote>
<p>很叼吧。</p>]]>
    
    </summary>
    
      <category term="cobbler" scheme="http://blog.decbug.com/tags/cobbler/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="system" scheme="http://blog.decbug.com/tags/system/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[絮叨ansible做持续交付,闲扯分布式]]></title>
    <link href="http://blog.decbug.com/2015/11/01/ansible4ci_distributed/"/>
    <id>http://blog.decbug.com/2015/11/01/ansible4ci_distributed/</id>
    <published>2015-10-31T16:00:00.000Z</published>
    <updated>2015-11-01T13:09:42.354Z</updated>
    <content type="html"><![CDATA[<h1 id="随手记录">随手记录</h1><p>杂记而已，随便记录</p>
<hr>
<h1 id="ansbile做持续交付">ansbile做持续交付</h1><p>突然想到，ansible可以控制一大堆机器，那么是否可以像jenkins的master/slave那样，做分布式构建呢。<br>应该是可以的吧</p>
<ul>
<li>把代码同步到各个agent上，可以用git/svn都行</li>
<li>通过一堆参数，控制各个agent做不同的事情，并行构建。比如编译，静态检测，单元测试，自动化测试等等</li>
<li>artifact收集</li>
<li>部署</li>
</ul>
<p>无缝接入呀，有时间可以试试。</p>
<a id="more"></a>
<hr>
<h1 id="分布式的一些感想">分布式的一些感想</h1><p>想到一句话，<code>不谋全局者，不足以谋一域；不谋万世者，不足以谋一时</code>。</p>
<ul>
<li>以前把玩有限的几台服务器，更多的是关注单点的CPU/IO/内存等等，现在得关注整体的性能，找出拖慢整体性能的瓶颈。</li>
<li>在考虑方案的时候，哪怕当前只有10台服务器，最好是按照1000台的规模去设计。</li>
</ul>
<p>哈哈哈～～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code></p>
<p>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a></p>
<p>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="随手记录">随手记录</h1><p>杂记而已，随便记录</p>
<hr>
<h1 id="ansbile做持续交付">ansbile做持续交付</h1><p>突然想到，ansible可以控制一大堆机器，那么是否可以像jenkins的master/slave那样，做分布式构建呢。<br>应该是可以的吧</p>
<ul>
<li>把代码同步到各个agent上，可以用git/svn都行</li>
<li>通过一堆参数，控制各个agent做不同的事情，并行构建。比如编译，静态检测，单元测试，自动化测试等等</li>
<li>artifact收集</li>
<li>部署</li>
</ul>
<p>无缝接入呀，有时间可以试试。</p>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://blog.decbug.com/tags/ansible/"/>
    
      <category term="continous delivery" scheme="http://blog.decbug.com/tags/continous-delivery/"/>
    
      <category term="distributed" scheme="http://blog.decbug.com/tags/distributed/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(3):移植rabbitmq-c]]></title>
    <link href="http://blog.decbug.com/2015/10/26/openstack_perf_tester_3/"/>
    <id>http://blog.decbug.com/2015/10/26/openstack_perf_tester_3/</id>
    <published>2015-10-25T16:00:00.000Z</published>
    <updated>2015-10-26T14:40:18.368Z</updated>
    <content type="html"><![CDATA[<h1 id="rabbitmq">rabbitmq</h1><p>rabbitmq是AMQP的一个具体实现。与之类似的还有apache的qpid。rabbitmq的官网是<a href="http://www.rabbitmq.com/" target="_blank" rel="external">http://www.rabbitmq.com/</a></p>
<p>我要做的是一个收发消息的模拟器，那么就用client就可以了。rabbitmq提供了各种语言的client版本，其中JAVA、C#、ErLang是官方维护的亲儿子版本。至于C语言的版本，则被归类到了other languages，下载链接是<a href="http://www.rabbitmq.com/devtools.html" target="_blank" rel="external">http://www.rabbitmq.com/devtools.html</a>，C版本的链接是<a href="https://github.com/alanxz/rabbitmq-c" target="_blank" rel="external">https://github.com/alanxz/rabbitmq-c</a></p>
<a id="more"></a>
<h1 id="移植">移植</h1><h2 id="编译rabbitmq-c">编译rabbitmq-c</h2><p>生产环境用的是suse，那边哥们给我的测试环境无法mount到我的本机，所以，只能在我docker ubuntu14.04来先验证一下。</p>
<h3 id="CMake">CMake</h3><p>下载<a href="https://cmake.org/files/v3.4/cmake-3.4.0-rc2.tar.gz" target="_blank" rel="external">https://cmake.org/files/v3.4/cmake-3.4.0-rc2.tar.gz</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.<span class="number">4</span>/cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2.tar.gz</span><br><span class="line">tar -xzvf cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2.tar.gz </span><br><span class="line"><span class="built_in">cd</span> cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2</span><br><span class="line">./bootstrap &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></p>
<h4 id="-/bootstrap">./bootstrap</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- Check <span class="keyword">if</span> the system is big endian</span><br><span class="line">-- Searching <span class="number">16</span> bit <span class="built_in">integer</span></span><br><span class="line">-- Using unsigned short</span><br><span class="line">-- Check <span class="keyword">if</span> the system is big endian - little endian</span><br><span class="line">Curses libraries were not found. Curses GUI <span class="keyword">for</span> CMake will not be built.</span><br><span class="line">-- Looking <span class="keyword">for</span> elf.h</span><br><span class="line">-- Looking <span class="keyword">for</span> elf.h - found</span><br><span class="line">-- Looking <span class="keyword">for</span> a Fortran compiler</span><br><span class="line">-- Looking <span class="keyword">for</span> a Fortran compiler - NOTFOUND</span><br><span class="line">qmake: could not <span class="built_in">exec</span> <span class="string">'/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</span>: No such file or directory</span><br><span class="line">qmake: could not <span class="built_in">exec</span> <span class="string">'/usr/lib/x86_64-linux-gnu/qt4/bin/qmake'</span>: No such file or directory</span><br><span class="line">-- Performing Test run_pic_<span class="built_in">test</span></span><br><span class="line">-- Performing Test run_pic_<span class="built_in">test</span> - Success</span><br><span class="line">-- Performing Test run_inlines_hidden_<span class="built_in">test</span></span><br><span class="line">-- Performing Test run_inlines_hidden_<span class="built_in">test</span> - Success</span><br><span class="line">-- Configuring <span class="keyword">done</span></span><br><span class="line">-- Generating <span class="keyword">done</span></span><br><span class="line">-- Build files have been written to: /home/xh/save/code/cmake-<span class="number">3.4</span>.<span class="number">0</span>-rc2</span><br><span class="line">---------------------------------------------</span><br><span class="line">CMake has bootstrapped.  Now run make.</span><br></pre></td></tr></table></figure>
<h4 id="make">make</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">61</span>%] Built target cmjsoncpp</span><br><span class="line">Scanning dependencies of target CMakeLib</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmArchiveWrite.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmBootstrapCommands1.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmBootstrapCommands2.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCacheManager.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommands.cxx.o</span><br><span class="line">[ <span class="number">61</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCLocaleEnvironmentScope.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentLexer.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentParser.cxx.o</span><br><span class="line">[ <span class="number">62</span>%] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommandArgumentParserHelper.cxx.o</span><br></pre></td></tr></table></figure>
<h4 id="make_install">make install</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/UtilityHeader.dsptemplate</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CTestScript.cmake.in</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CPack.GenericDescription.txt</span><br><span class="line">-- Installing: /usr/<span class="built_in">local</span>/share/cmake-<span class="number">3.4</span>/Templates/CPack.GenericLicense.txt</span><br></pre></td></tr></table></figure>
<h4 id="version">version</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br><span class="line"><span class="comment"># cmake version 3.4.0-rc2</span></span><br></pre></td></tr></table></figure>
<h3 id="openssl">openssl</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.openssl.org/<span class="built_in">source</span>/openssl-<span class="number">1.0</span>.<span class="number">2</span>d.tar.gz</span><br><span class="line">tar -xzvf openssl-<span class="number">1.0</span>.<span class="number">2</span>d</span><br><span class="line"><span class="built_in">cd</span> openssl-<span class="number">1.0</span>.<span class="number">2</span>d</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make <span class="built_in">test</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>version一下看看<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"><span class="comment"># OpenSSL 1.0.1f 6 Jan 2014</span></span><br></pre></td></tr></table></figure></p>
<h3 id="make-1">make</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:alanxz/rabbitmq-c.git</span><br><span class="line"><span class="built_in">cd</span> rabbitmq-c</span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">cmake --build . --config BUILD_TOOLS=OFF</span><br></pre></td></tr></table></figure>
<p><code>cmake ..</code>时会提示找不到xmlto等等，因为我不需要生成辅助工具（文档、命令行工具等等)，暂时不管它。<br><code>BUILD_TOOLS=OFF</code>就表示不生成辅助工具</p>
<p>一路编译没有报错，至此，我们的rabbitmq就编译成功了，接下来就是要把<code>librabbitmq</code>移植到现有代码中。</p>
<h2 id="移植过程">移植过程</h2><ul>
<li>拷贝<code>librabbitmq</code>到原有代码中</li>
<li>在makefile里加上<code>librabbitmq</code>的路径</li>
<li>make，提示说找不到<code>amqp_framing.h</code>，原因是include用的是<code>&lt;&gt;</code>，而amqp_framing.h就在同一个目录。</li>
<li>sed -i s/<amqp_framing.h>/\”amqp_framing.h\”/g改成相对路径，再次make，不报这个错了。</amqp_framing.h></li>
<li>找不到<code>threads.h</code>，原因是没有把<code>librabbitmq/unix</code>-I，所以需要改以下路径为<code>unix/threads.h</code></li>
<li><p>找不到<code>AMQP_PLATFORM</code>,这个是在config.h里定义的。看了下报错的c文件，确实有include了config.h，但为什么还报这个错呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#ifdef HAVE_CONFIG_H</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "config.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原因就在于<code>HAVE_CONFIG_H</code>了，在makefile的gcc后加上<code>-DHAVE_CONFIG_H</code>，再次编译，就OK了。</p>
</li>
</ul>
<p>在ubuntu上已经搞定，接下来就是迁移到suse上。<br>关键点就在于config.h，因为config.h包含了内核版本以及epoll等等，所以需要在suse上编译一下rabbitmq-c，然后把suse上的config.h替换ubuntu上的config.h，编译就OK了。</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="rabbitmq">rabbitmq</h1><p>rabbitmq是AMQP的一个具体实现。与之类似的还有apache的qpid。rabbitmq的官网是<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p>
<p>我要做的是一个收发消息的模拟器，那么就用client就可以了。rabbitmq提供了各种语言的client版本，其中JAVA、C#、ErLang是官方维护的亲儿子版本。至于C语言的版本，则被归类到了other languages，下载链接是<a href="http://www.rabbitmq.com/devtools.html">http://www.rabbitmq.com/devtools.html</a>，C版本的链接是<a href="https://github.com/alanxz/rabbitmq-c">https://github.com/alanxz/rabbitmq-c</a></p>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="rabbitmq" scheme="http://blog.decbug.com/tags/rabbitmq/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(2):消息调用过程oslo.messaging]]></title>
    <link href="http://blog.decbug.com/2015/10/16/openstack_perf_tester_2/"/>
    <id>http://blog.decbug.com/2015/10/16/openstack_perf_tester_2/</id>
    <published>2015-10-15T17:00:00.000Z</published>
    <updated>2015-11-17T14:28:43.362Z</updated>
    <content type="html"><![CDATA[<h1 id="openstack简介">openstack简介</h1><p>The OpenStack project is an open source cloud computing platform that supports all types of cloud environments. The project aims for simple implementation, massive scalability, and a rich set of features. Cloud computing experts from around the world contribute to the project.<br><a id="more"></a></p>
<p>OpenStack provides an Infrastructure-as-a-Service (IaaS) solution through a variety of complemental services. Each service offers an application programming interface (API) that facilitates this integration.</p>
<h1 id="openstack组件">openstack组件</h1><table>
<thead>
<tr>
<th>Service</th>
<th>Project name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dashboard</td>
<td>Horizon</td>
<td>Provides a web-based self-service portal to interact with underlying OpenStack services, such as launching an instance, assigning IP addresses and configuring access controls.</td>
</tr>
<tr>
<td>Compute</td>
<td>Nova</td>
<td>Manages the lifecycle of compute instances in an OpenStack environment. Responsibilities include spawning, scheduling and decommissioning of virtual machines on demand.</td>
</tr>
<tr>
<td>Networking</td>
<td>Neutron</td>
<td>Enables Network-Connectivity-as-a-Service for other OpenStack services, such as OpenStack Compute. Provides an API for users to define networks and the attachments into them. Has a pluggable architecture that supports many popular networking vendors and technologies.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Storage</td>
</tr>
<tr>
<td>Object Storage</td>
<td>Swift</td>
<td>Stores and retrieves arbitrary unstructured data objects via a RESTful, HTTP based API. It is highly fault tolerant with its data replication and scale-out architecture. Its implementation is not like a file server with mountable directories. In this case, it writes objects and files to multiple drives, ensuring the data is replicated across a server cluster.</td>
</tr>
<tr>
<td>Block Storage</td>
<td>Cinder</td>
<td>Provides persistent block storage to running instances. Its pluggable driver architecture facilitates the creation and management of block storage devices.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Shared services</td>
</tr>
<tr>
<td>Identity service</td>
<td>Keystone</td>
<td>Provides an authentication and authorization service for other OpenStack services. Provides a catalog of endpoints for all OpenStack services.</td>
</tr>
<tr>
<td>Image service</td>
<td>Glance</td>
<td>Stores and retrieves virtual machine disk images. OpenStack Compute makes use of this during instance provisioning.</td>
</tr>
<tr>
<td>Telemetry</td>
<td>Ceilometer</td>
<td>Monitors and meters the OpenStack cloud for billing, benchmarking, scalability, and statistical purposes.</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Higher-level services</td>
</tr>
<tr>
<td>Orchestration</td>
<td>Heat</td>
<td>Orchestrates multiple composite cloud applications by using either the native HOT template format or the AWS CloudFormation template format, through both an OpenStack-native REST API and a CloudFormation-compatible Query API.</td>
</tr>
</tbody>
</table>
<h2 id="oslo-messaging">oslo.messaging</h2><p>消息组件，其中的/_drivers/impl_rabbit.py就是rabbitMQ的具体实现。我们要用的AMQP就是靠它来完成。</p>
<h1 id="一个call的前世今生">一个call的前世今生</h1><h2 id="neutron/common/rpc-py_init">neutron/common/rpc.py init</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">common/rpc-&#62;oslo_messaging/transport:get_transport&#10;oslo_messaging/transport-&#62;stevedore:DriverManager&#10;stevedore-&#62;impl_rabbit:get impl_rabbit&#10;impl_rabbit--&#62;stevedore:return impl_rabbit&#10;stevedore--&#62;oslo_messaging/transport:return driver&#10;oslo_messaging/transport--&#62;common/rpc:return transport</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/1.png" alt=""></p>
<h2 id="neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent-py">neutron/plugins/ml2/drivers/openvswitch/agent/ovs_neutron_agent.py</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OVSNeutronAgent-&#62;OVSNeutronAgent: __init__&#10;OVSNeutronAgent-&#62;OVSNeutronAgent: setup_rpc&#10;setup_rpc-&#62;OVSPluginApi: plugin_rpc = OVSPluginApi&#10;OVSPluginApi-&#62;PluginApi: __init__&#10;PluginApi-&#62;oslo_messaging/target:tartget::__init__&#10;oslo_messaging/target--&#62;PluginApi: return target&#10;PluginApi-&#62;common/rpc: get_client&#10;common/rpc-&#62;oslo_messaging/rpc/client:construct RPCClient&#10;oslo_messaging/rpc/client--&#62;common/rpc: return RPCClient&#10;common/rpc--&#62;PluginApi: return client</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/2.png" alt=""></p>
<h2 id="call">call</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OVSNeutronAgent-&#62;OVSPluginApi.plugin_rpc:tunnel_sync&#10;OVSPluginApi.plugin_rpc-&#62;PluginApi:tunnel_sync&#10;PluginApi-&#62;oslo_messaging/rpc/client.RPCClient:prepare&#10;oslo_messaging/rpc/client.RPCClient-&#62;oslo_messaging/rpc/client._CallContext:_prepare&#10;oslo_messaging/rpc/client._CallContext--&#62;oslo_messaging/rpc/client.RPCClient:return callContext&#10;oslo_messaging/rpc/client.RPCClient--&#62;PluginApi:return callContext&#10;PluginApi-&#62;oslo_messaging/rpc/client._CallContext: call&#10;oslo_messaging/rpc/client._CallContext-&#62;oslo_messaging/rpc/client._CallContext:make message&#10;oslo_messaging/rpc/client._CallContext-&#62;transport:send&#10;transport-&#62;AMQPDriverBase:_send&#10;AMQPDriverBase-&#62;oslo_messaging/_drivers/amqp:get connection&#10;note right of oslo_messaging/_drivers/amqp: get connection from pool&#10;oslo_messaging/_drivers/amqp--&#62;driverbase:return connection&#10;AMQPDriverBase-&#62;AMQPDriverBase: get exchange&#10;AMQPDriverBase-&#62;ReplyWaiter: _get_reply_q&#10;AMQPDriverBase-&#62;impl_rabbit:connection.topic_send&#10;impl_rabbit-&#62;impl_rabbit: connection._ensure_publishing&#10;AMQPDriverBase-&#62;ReplyWaiter: wait&#10;ReplyWaiter--&#62;AMQPDriverBase: return result&#10;AMQPDriverBase--&#62;transport: return result&#10;transport--&#62;oslo_messaging/rpc/client._CallContext: return result&#10;oslo_messaging/rpc/client._CallContext--&#62;PluginApi: return&#10;PluginApi--&#62;OVSPluginApi.plugin_rpc: return</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/CodeJuan/blog/raw/master/source/image/amqp/3.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="openstack简介">openstack简介</h1><p>The OpenStack project is an open source cloud computing platform that supports all types of cloud environments. The project aims for simple implementation, massive scalability, and a rich set of features. Cloud computing experts from around the world contribute to the project.<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="perfmance" scheme="http://blog.decbug.com/tags/perfmance/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[openstack性能测试器(1):AMQP]]></title>
    <link href="http://blog.decbug.com/2015/10/16/openstack_perf_tester_1/"/>
    <id>http://blog.decbug.com/2015/10/16/openstack_perf_tester_1/</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2015-11-01T13:06:11.378Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>我司的公有云产品是基于OpenStack，一直以来都有做性能测试，但以前的性能测试方法比较老土。</p>
<ul>
<li>有一部分基于http的消息是通过自己写的测试器来测试，即模拟真实场景的消息收发，测试各组件在高并发下的性能。</li>
<li>另外一些基于AMQP的消息则还是通过一堆虚拟机来做测试，需要耗费大量资源。</li>
</ul>
<p>有鉴于此，需要再把测试器完善一下，使其能模拟OpenStack的各种组件，用有限的几台虚拟机，就能完成所有组件的性能测试。<br>而作为什么都会一点的牛X人物，自然少不了被派来开荒。正好可以借此机会深入了解一下OpenStack，以前只是久闻其名，无缘深入探究，这次终于得偿所望。<br>嘎嘎嘎！！<br><a id="more"></a></p>
<h1 id="AMQP">AMQP</h1><p>要想做好模拟器，就需要了解AMQP协议，以及此协议在OpenStack中的应用场景。</p>
<h2 id="概念">概念</h2><p>AMQP是一种异步消息协议，在分布式系统就被大量使用。其传递流程可以大致理解成下图<br><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/amqp/hello-world-example-routing.png" alt=""><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer-&gt;broker-&gt;consumer</span><br></pre></td></tr></table></figure></p>
<p>producer连接broker，broker可以理解为一个消息服务器，所有的消息都是通过它来中转。<br>还有几个概念需要注意：exchange channel topic routing-key</p>
<p>等有空的时候，照着wireshark抓的包来对着讲解一下消息收发过程。<br>以login为例，</p>
<table>
<thead>
<tr>
<th>clien</th>
<th>direct</th>
<th>server</th>
</tr>
</thead>
<tbody>
<tr>
<td>建立TCP连接</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>发送heade</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>connection</td>
</tr>
<tr>
<td>connection ok</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>connection.tune</td>
</tr>
<tr>
<td>connection.tune ok</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>open connection</td>
<td>==&gt;</td>
<td></td>
</tr>
<tr>
<td>收</td>
<td>&lt;==</td>
<td>open connection ok</td>
</tr>
</tbody>
</table>
<h2 id="openstack">openstack</h2><p>openstack用的就是AMQP，具体实现有两种，是rabbitMQ和qpid，二者皆可使用。曾描过一眼，说ubuntu用rabbit，centos用qpid。我司用的是ubuntu，那么就看rabbitMQ好了。<br>发送分为三类</p>
<ul>
<li>cast:发送给特定的consumer，且不等待response</li>
<li>call：发送给特定consumer，需要等待response</li>
<li>fanout：发送给订阅了此消息的一组consumer，不等待response</li>
</ul>
<h3 id="oslo-messaging">oslo.messaging</h3><p>这个组件专门负责消息。其中的/_drivers/impl_rabbit.py就是rabbitMQ的具体实现。</p>
<h2 id="吐槽">吐槽</h2><p>在折腾的过程中，在oslo.messaging的tools里发现了一个<code>simulator.py</code>，就是一个消息模拟器，然而由于原有框架是C写的，历史原因只能用C再做一个模拟器。<br>其实openstack就有一个性能测试工具，名叫rally，也很不错，但是也不让用，sigh～～</p>
<p>欲知后事如何，请看下集openstack的消息流程</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>我司的公有云产品是基于OpenStack，一直以来都有做性能测试，但以前的性能测试方法比较老土。</p>
<ul>
<li>有一部分基于http的消息是通过自己写的测试器来测试，即模拟真实场景的消息收发，测试各组件在高并发下的性能。</li>
<li>另外一些基于AMQP的消息则还是通过一堆虚拟机来做测试，需要耗费大量资源。</li>
</ul>
<p>有鉴于此，需要再把测试器完善一下，使其能模拟OpenStack的各种组件，用有限的几台虚拟机，就能完成所有组件的性能测试。<br>而作为什么都会一点的牛X人物，自然少不了被派来开荒。正好可以借此机会深入了解一下OpenStack，以前只是久闻其名，无缘深入探究，这次终于得偿所望。<br>嘎嘎嘎！！<br>]]>
    
    </summary>
    
      <category term="AMQP" scheme="http://blog.decbug.com/tags/AMQP/"/>
    
      <category term="openstack" scheme="http://blog.decbug.com/tags/openstack/"/>
    
      <category term="perfmance" scheme="http://blog.decbug.com/tags/perfmance/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习ruby on rails]]></title>
    <link href="http://blog.decbug.com/2015/10/14/ror/"/>
    <id>http://blog.decbug.com/2015/10/14/ror/</id>
    <published>2015-10-13T16:00:00.000Z</published>
    <updated>2015-10-14T15:19:04.079Z</updated>
    <content type="html"><![CDATA[<h1 id="入门文档">入门文档</h1><p><a href="http://guides.ruby-china.org/getting_started.html" target="_blank" rel="external">http://guides.ruby-china.org/getting_started.html</a><br><a id="more"></a></p>
<h1 id="install">install</h1><h2 id="ruby-lang_&amp;_sqlite">ruby-lang &amp; sqlite</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby-devel sqlite sqlite-devel ruby-rdoc</span><br><span class="line"></span><br><span class="line">ruby --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># ruby 2.0.0p598 (2014-11-13) [x86_64-linux]</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br><span class="line"></span><br><span class="line">sqlite3 --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># 3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure>
<h2 id="gem">gem</h2><h3 id="换源">换源</h3><p>需要换源，原因</p>
<blockquote>
<p>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。所以你会与遇到 gem install rack 或 bundle install 的时候半天没有响应，具体可以用 gem install rails -V 来查看执行过程。</p>
</blockquote>
<p>以上引用自<a href="https://ruby.taobao.org/" target="_blank" rel="external">https://ruby.taobao.org/</a>，好人一生平安。</p>
<h3 id="方法">方法</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:<span class="comment">//ruby.taobao.org/ --remove https://rubygems.org/</span></span><br><span class="line">gem sources -l</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># *** CURRENT SOURCES ***</span></span><br><span class="line"><span class="preprocessor"># </span></span><br><span class="line"><span class="preprocessor"># https://ruby.taobao.org/</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure>
<p>说明换成了<em>taobao</em>的源</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle config mirror<span class="class">.https</span>:<span class="comment">//rubygems.org https://ruby.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>bundle也需要换，然而似乎还是没啥用，后面还是得改<code>Gemfile</code></p>
<h2 id="rails">rails</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="keyword">install</span> rails</span><br></pre></td></tr></table></figure>
<p>漫长的等待，就装好了，查看一下版本吧<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rails --version</span><br><span class="line"><span class="preprocessor"># show ############</span></span><br><span class="line"><span class="preprocessor"># Rails 4.2.4</span></span><br><span class="line"><span class="preprocessor">##############</span></span><br></pre></td></tr></table></figure></p>
<h2 id="new_project">new project</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails <span class="keyword">new</span> learn_ror</span><br></pre></td></tr></table></figure>
<p>卡在<code>bundle install</code>，原因是learn_ror/Gemfile里的source指向的还是官网，所以需要手动改成淘宝的源<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">source</span> <span class="string">'https://rubygems.org'</span>                                                                                                                                                                             </span><br><span class="line"><span class="keyword">source</span> <span class="string">'https://ruby.taobao.org'</span></span><br></pre></td></tr></table></figure></p>
<p>再次执行install<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> learn_ror</span><br><span class="line"><span class="keyword">bundle </span>install</span><br></pre></td></tr></table></figure></p>
<h2 id="启动">启动</h2><p>执行启动命令<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rails <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<p>提示缺少jsruntime，看了下<a href="https://github.com/rails/execjs" target="_blank" rel="external">https://github.com/rails/execjs</a>，决定采用<a href="https://github.com/cowboyd/therubyracer" target="_blank" rel="external">therubyracer</a>，在<code>Gemfile</code>里添加一行<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//github.com/cowboyd/therubyracer</span></span><br></pre></td></tr></table></figure></p>
<p>再次bundle install，rails server，欢迎页面就出现了。</p>
<p>如果指定端口-p，则提示create_listener没权限<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] INFO  WEBrick <span class="number">1.3</span>.1</span><br><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] INFO  ruby <span class="number">2.0</span>.0 (<span class="number">2014</span>-<span class="number">11</span>-<span class="number">13</span>) [x86_64-linux]</span><br><span class="line">[<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">22</span>:<span class="number">46</span>] WARN  TCPServer <span class="keyword">Error</span>: Permission denied - bind(<span class="number">2</span>)</span><br><span class="line">Exiting</span><br><span class="line">/home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `require<span class="comment">': cannot load such file -- abrt/handler (LoadError)</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> require<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">240</span>:<span class="keyword">in</span> `load_dependency<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/activesupport-<span class="number">4.2</span>.4/<span class="keyword">lib</span>/active_support/dependencies.rb:<span class="number">274</span>:<span class="keyword">in</span> `require<span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /home/g640/.gem/ruby/gems/abrt-<span class="number">0.1</span>.1/<span class="keyword">lib</span>/abrt.rb:<span class="number">6</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> &lt;top (required)&gt;<span class="comment">'</span></span><br><span class="line">/usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `initialize<span class="comment">': Permission denied - bind(2) (Errno::EACCES)</span></span><br><span class="line">	<span class="keyword">from</span> /usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `<span class="keyword">new</span><span class="comment">'</span></span><br><span class="line">	<span class="keyword">from</span> /usr/share/ruby/webrick/utils.rb:<span class="number">85</span>:<span class="keyword">in</span> `block <span class="keyword">in</span> create_listeners<span class="comment">'</span></span><br></pre></td></tr></table></figure></p>
<p>这个时候需要<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo semanage port -<span class="tag">a</span> -t http_port_t -<span class="tag">p</span> tcp <span class="number">3000</span></span><br><span class="line">sudo iptables -I INPUT -<span class="tag">p</span> TCP --dport <span class="number">3000</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<h2 id="hello_world">hello world</h2><p>接下来就是照着教程做了，没啥技术含量。。。。。。。<br>练习的代码放在<a href="https://github.com/CodeJuan/learn_ror" target="_blank" rel="external">https://github.com/CodeJuan/learn_ror</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门文档">入门文档</h1><p><a href="http://guides.ruby-china.org/getting_started.html">http://guides.ruby-china.org/getting_started.html</a><br>]]>
    
    </summary>
    
      <category term="rails" scheme="http://blog.decbug.com/tags/rails/"/>
    
      <category term="ruby" scheme="http://blog.decbug.com/tags/ruby/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习ansible]]></title>
    <link href="http://blog.decbug.com/2015/10/11/ansible/"/>
    <id>http://blog.decbug.com/2015/10/11/ansible/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-10-11T13:04:34.719Z</updated>
    <content type="html"><![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/" target="_blank" rel="external">http://docs.ansible.com/</a><br><a id="more"></a></p>
<h1 id="install">install</h1><p>老规矩，从源码开始<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ansible/ansible.git --recursive</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line"><span class="built_in">source</span> ./hacking/env-setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖的库</span></span><br><span class="line">sudo pip install paramiko PyYAML Jinja2 httplib2 six</span><br></pre></td></tr></table></figure></p>
<p>当然，也可以直接用pip安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install ansible</span><br></pre></td></tr></table></figure></p>
<h1 id="Inventory">Inventory</h1><h2 id="创建hosts">创建hosts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/ansible/</span><br><span class="line"></span><br><span class="line">sudo vi /etc/ansible/hosts</span><br><span class="line"><span class="comment"># 在hosts写上agent的IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ANSIBLE_INVENTORY=/etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<h2 id="执行ping">执行ping</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure>
<h2 id="提示失败">提示失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">161.52</span> | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"ERROR! SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我明明已经把master加入到可信SSH里了呀，可以不用密码ssh到agent呢。</p>
<h2 id="配置ssh-agent试试">配置ssh-agent试试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>还是不行</p>
<h2 id="解决">解决</h2><p>查看官方文档<a href="http://docs.ansible.com/ansible/intro_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_inventory.html</a>，提到</p>
<blockquote>
<p><code>ansible_host</code><br>  The name of the host to connect to, if different from the alias you wish to give to it.<br><code>ansible_port</code><br>  The ssh port number, if not 22<br><code>ansible_user</code><br>  The default ssh user name to use.<br>ansible_ssh_pass<br>  The ssh password to use (this is insecure, we strongly recommend using —ask-pass or SSH keys)<br>ansible_ssh_private_key_file<br>  Private key file used by ssh.  Useful if using multiple keys and you don’t want to use SSH agent.<br>ansible_ssh_common_args<br>  This setting is always appended to the default command line for<br>  sftp, scp, and ssh. Useful to configure a <code>ProxyCommand</code> for a<br>  certain host (or group).<br>ansible_sftp_extra_args<br>  This setting is always appended to the default sftp command line.<br>ansible_scp_extra_args<br>  This setting is always appended to the default scp command line.<br>ansible_ssh_extra_args<br>  This setting is always appended to the default ssh command line.<br>ansible_ssh_pipelining<br>  Determines whether or not to use SSH pipelining. This can override the<br>  <code>pipelining</code> setting in <code>ansible.cfg</code>.</p>
</blockquote>
<p>需要设置IP、port和user</p>
<h2 id="改写hosts文件">改写hosts文件</h2><p>加上user<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">g530</span> ansible_user=g530 ansible_ssh_host=<span class="number">192.168.161.52</span></span><br></pre></td></tr></table></figure></p>
<p>再次调用<code>ansible all -m ping</code>，提示成功</p>
<h1 id="dynamic_inventory">dynamic_inventory</h1><p><a href="http://docs.ansible.com/ansible/intro_dynamic_inventory.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_dynamic_inventory.html</a><br>暂时不看，等用到的时候再看</p>
<h1 id="pattern_&amp;_ad-hoc_command">pattern &amp; ad-hoc command</h1><p>也暂时略过</p>
<h1 id="playbook">playbook</h1><h2 id="ping">ping</h2><p>先写一个最简单的ping</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---                                                                        &#10;- hosts: g530&#10;  tasks:&#10;  - name: ping&#10;    ping:</span><br></pre></td></tr></table></figure>
<p>然后调用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -<span class="tag">i</span> /etc/ansible/hosts playbook.yml</span><br></pre></td></tr></table></figure></p>
<p>显示<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PLAY <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=2    changed=0    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>说明成功</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/ping" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/ping</a></p>
<h2 id="advanced">advanced</h2><p>来尝试一个高端点的，带roles handler template的</p>
<h3 id="playbook-1">playbook</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: role_handler&#10;  hosts: g530&#10;  &#10;  roles:&#10;  - test</span><br></pre></td></tr></table></figure>
<h3 id="创建roles">创建roles</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">current_dir</span><br><span class="line"><span class="string">|--playbook.yml</span></span><br><span class="line"><span class="string">|--roles</span></span><br><span class="line">   <span class="string">|--test</span></span><br><span class="line">      <span class="string">|--handlers</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--tasks</span></span><br><span class="line">         <span class="string">|--main.yml</span></span><br><span class="line">      <span class="string">|--templates</span></span><br><span class="line">         <span class="string">|--存放模板</span></span><br></pre></td></tr></table></figure>
<p>需要创建一个roles文件夹，里边的子文件夹的名字就是playbook里写的roles名字</p>
<h3 id="handlers">handlers</h3><p>每个role都会有handlers文件夹，里边的main.yml放一些响应事件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: restart&#10;  service: name=iptables state=restarted enabled=yes</span><br></pre></td></tr></table></figure></p>
<p>例子里表示重启iptables</p>
<h3 id="tasks">tasks</h3><p>role的tasks里的main.yml就是真正要执行的任务<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: ping and restart iptables&#10;  ping:  &#10;  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>表示先ping，然后调用handler里的restart</p>
<h3 id="template">template</h3><p>在template里创建一个文件<code>haha</code>，将他拷贝到agent的<code>/tmp</code><br>tasks mail.yml改为<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---&#10;- name: ping&#10;  ping:   &#10;  template: src=haha dest=/tmp/haha&#10;  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>提示语法错误，看起来似乎一个<code>name</code>只能有一个操作</p>
<p>改为两个name貌似就好了<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: ping</span><br><span class="line">  ping:   </span><br><span class="line"></span><br><span class="line">- name: <span class="keyword">template</span> iptables</span><br><span class="line">  <span class="keyword">template</span>: src=haha dest=/tmp/haha</span><br><span class="line">  notify: restart test</span><br></pre></td></tr></table></figure></p>
<p>再play一下<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PLAY [role_handler] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"></span><br><span class="line">TASK [setup] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : ping] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">ok: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">TASK [test : template iptables] <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">changed: [g530 -&gt; localhost]</span><br><span class="line"></span><br><span class="line">PLAY RECAP <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">g530                       : ok=3    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure></p>
<p>果然多了一个操作</p>
<p>代码放在<a href="https://github.com/CodeJuan/ansible_play/tree/master/advancded_play" target="_blank" rel="external">https://github.com/CodeJuan/ansible_play/tree/master/advancded_play</a></p>
<h1 id="深入学习">深入学习</h1><p>已经了解了基本概念，接下来就要看一些优秀案例了<br><a href="http://docs.ansible.com/ansible/playbooks_best_practices.html" target="_blank" rel="external">http://docs.ansible.com/ansible/playbooks_best_practices.html</a><br><a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">https://github.com/ansible/ansible-examples</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="入门文档">入门文档</h1><p>开始get ops技能，自动部署应该算是基础的基础了吧，而ansible美名远扬，自然不能错过。<br>先从入门文档开始<a href="http://docs.ansible.com/">http://docs.ansible.com/</a><br>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://blog.decbug.com/tags/ansible/"/>
    
      <category term="deploy" scheme="http://blog.decbug.com/tags/deploy/"/>
    
      <category term="devops" scheme="http://blog.decbug.com/tags/devops/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换部门]]></title>
    <link href="http://blog.decbug.com/2015/10/10/dept/"/>
    <id>http://blog.decbug.com/2015/10/10/dept/</id>
    <published>2015-10-09T16:00:00.000Z</published>
    <updated>2015-10-11T07:17:25.543Z</updated>
    <content type="html"><![CDATA[<p>换了个好玩的部门<br><a id="more"></a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>换了个好玩的部门<br>]]>
    
    </summary>
    
      <category term="career" scheme="http://blog.decbug.com/tags/career/"/>
    
      <category term="mumble" scheme="http://blog.decbug.com/categories/mumble/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tornado+nginx+IP白名单]]></title>
    <link href="http://blog.decbug.com/2015/09/13/tornado/"/>
    <id>http://blog.decbug.com/2015/09/13/tornado/</id>
    <published>2015-09-12T16:00:00.000Z</published>
    <updated>2015-11-17T14:36:02.062Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>
<a id="more"></a>
<h2 id="分析一下需求">分析一下需求</h2><ul>
<li>一个input，一个button，点button就把input的内容追加到某个文件中，暂时不考虑input是否合法</li>
<li>tornado 写一个handler</li>
<li>定时把最新的IP合并到allow_ip.con</li>
</ul>
<h1 id="tornado">tornado</h1><h2 id="安装">安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/t/tornado/tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">tar zxvf tornado-<span class="number">4.2</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tornado-<span class="number">4.2</span>.<span class="number">1</span></span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="开搞">开搞</h2><h3 id="demos">demos</h3><p>先试用一下<code>tornado</code>源码里的demos，找到最简单的helloworld，运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python helloworld.py</span><br></pre></td></tr></table></figure></p>
<p>在另一台机器上访问，总是载入不了网页。于是开始排查</p>
<ul>
<li>本机上查看端口<code>netstat -tulpn | grep :8888</code></li>
<li>在本机上curl，可以打开</li>
<li>猜测可能是防火墙的问题，<code>iptables -I INPUT -p TCP --dport 8888 -j ACCEPT</code><br>再次访问，就OK啦</li>
</ul>
<h3 id="一个输入页面">一个输入页面</h3><h4 id="login-html">login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"&#123;&#123; request.path &#125;&#125;"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span>&#123;&#123; _("你的IP") &#125;&#125; <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;div&gt;&#123;&#123; _("Password") &#125;&#125; &lt;input type="password" name="password"/&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"&#123;&#123; _("</span><span class="value">输入")</span> &#125;&#125;"/&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">       &#123;% module xsrf_form_html() %&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="test-py">test.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LoginHandler</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># template from login.html</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line">        <span class="comment">#pwd=self.get_argument("password", "") </span></span><br><span class="line">        self.write(usr)</span><br><span class="line">        <span class="comment">#self.write(pwd)</span></span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login时通过LoginHandler处理</span></span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h4 id="运行效果">运行效果</h4><p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2021:59:01.png" alt="输入"></p>
<p><img src="https://github.com/CodeJuan/codejuan.github.io/raw/master/images/blog/tornado/Screenshot%20from%202015-09-14%2022:04:20.png" alt="结果"></p>
<h3 id="保存用户的IP到白名单">保存用户的IP到白名单</h3><p>先写入到一个临时文件，然后定时同步到nginx的配置里include白名单文件allow_ips.conf</p>
<h4 id="写入文件">写入文件</h4><p>先实现一个最简单的，不考虑锁啊，共享之类的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#self.write("Hello, world")</span></span><br><span class="line">        items = [<span class="string">"Item 1"</span>, <span class="string">"Item 2"</span>, <span class="string">"Item 3"</span>]</span><br><span class="line">        self.render(<span class="string">"temp.html"</span>, title=<span class="string">"My title"</span>, items=items)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    file_name = <span class="string">"ip.txt"</span></span><br><span class="line">    FILE = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.render(<span class="string">"login.html"</span>, title=<span class="string">"login"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        usr=self.get_argument(<span class="string">"username"</span>, <span class="string">""</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把用户输入的IP写入到文件</span></span><br><span class="line">        self.WriteIP(usr)</span><br><span class="line">        self.write(<span class="string">"Your IP have been added to the white list\n"</span>+usr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加一个writeIP的方法不考虑共享等问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">WriteIP</span><span class="params">(self,ip)</span>:</span></span><br><span class="line">        self.FILE = open(self.file_name, <span class="string">"w"</span>) </span><br><span class="line">        self.FILE.writelines(ip)</span><br><span class="line"></span><br><span class="line">application = tornado.web.Application([</span><br><span class="line">    (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    (<span class="string">r"/login"</span>, LoginHandler),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>
<h1 id="nginx">nginx</h1><h2 id="下载安装">下载安装</h2><h3 id="源码编译">源码编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line">tar zxvf nginx-<span class="number">1.9</span>.<span class="number">4</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="number">1.9</span>.<span class="number">4</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>
<p>提示缺少C编译器，于是<code>yum install gcc</code><br>提示缺少pcre library，于是<code>yum -y install pcre-devel</code><br>接着又提示缺少zlib。。算了，还是换别的方式吧，不从源码编了</p>
<h3 id="yum安装">yum安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/packages/centos/<span class="number">7</span>/noarch/RPMS/nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm</span><br><span class="line">sudo rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm </span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>
<h3 id="配置nginx-conf">配置nginx.conf</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">8777</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://192.168.151.55:8888/</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试配置是否正确</span></span><br><span class="line">sudo nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<h1 id="iptables">iptables</h1><p>我们只是需要一个白名单而已，用nginx是不是太重型化了？<br>iptables热插拔，即使生效，也支持可信ip，而且用起来比较简单。</p>
<h2 id="导入导出">导入导出</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># export the rules of iptable</span></span><br><span class="line">iptables-save &gt; /some/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">iptables-restore &lt;/some/file</span><br></pre></td></tr></table></figure>
<h2 id="即时生效">即时生效</h2><blockquote>
<p>Is a reboot required after edit/saving linux iptables?</p>
<blockquote>
<p>iptables rules take effect immediately.<br>Changes to iptables take effect immediately when they are run.However, your language of “edit and save” makes me think you are editing a conf file or script of some kind rather than actually running the iptables commands.If you are making your changes in a script, you must make sure that script gets run in order for the changes to take affect. </p>
</blockquote>
</blockquote>
<h2 id="使用">使用</h2><h1 id="生产环境的使用">生产环境的使用</h1><p>最终还是采用了nginx</p>
<ol>
<li>用户注册，将IP保存到数据库</li>
<li>定时从数据库中取IP，并生成allow_ips.conf</li>
<li>nginx reload -s</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 配置</span></span><br><span class="line">    <span class="title">server</span> &#123;</span><br><span class="line">        <span class="title">listen</span> <span class="number">8777</span>;</span><br><span class="line">        <span class="title">location</span> / &#123;</span><br><span class="line">            <span class="title">include</span> allow_ips.conf</span><br><span class="line">            deny all;</span><br><span class="line">            <span class="title">errorpage</span> <span class="number">403</span> <span class="url">http://register_server:port</span>;</span><br><span class="line">            <span class="title">proxy_pass</span> <span class="url">http://192.168.151.55:8888/</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><p>实现白名单，只允许可信用户访问我的服务<br>考虑采用iptables或者nginx</p>
<p>如果用nginx，那么可以建立一个<code>allow_ip.conf</code>，然后把这个配置文件include到nginx的配置中<br>用户可以主动添加他们的IP到我这，打算玩玩tornado，用户输入他的IP，然后存入到我的文件中，最后定时合并到<code>allow_ip.conf</code></p>]]>
    
    </summary>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="tornado" scheme="http://blog.decbug.com/tags/tornado/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多线程同步镜像]]></title>
    <link href="http://blog.decbug.com/2015/09/07/multi_thread_rsync/"/>
    <id>http://blog.decbug.com/2015/09/07/multi_thread_rsync/</id>
    <published>2015-09-06T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:46.038Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>为了提高工作效率，我司的软件青年们搭建了一组内网mirror，包括apache，pip，npm，jenkins，ubuntu等等。<br>想用得爽，就得保持与官方一致，需要很频繁的同步。<br>以前的同步是单线程的，感觉没有完全发挥带宽的优势，所以想尝试一下多线程同步。</p>
<h2 id="大概的思路">大概的思路</h2><ul>
<li>爬index，如hust的镜像<a href="http://mirrors.hust.edu.cn/ubuntu-releases/" target="_blank" rel="external">http://mirrors.hust.edu.cn/ubuntu-releases/</a>，找出所有<code>href</code>。</li>
<li>每个href就启动一个rsync或者wget，同步到对应的文件夹</li>
<li>记录每个href的同步状态</li>
<li>汇总全部状态，看所有href是否都同步成功<a id="more"></a>
</li>
</ul>
<h2 id="shell爬">shell爬</h2><h3 id="步骤">步骤</h3><ul>
<li>wget镜像的index.html</li>
<li>正则匹配，找到二级目录href-</li>
<li>xargs -P 八个线程同时wget -r</li>
<li>有个问题，如何获取每个href的同步状态，成功还是失败？</li>
</ul>
<h3 id="代码">代码</h3><p>放在<a href="https://github.com/CodeJuan/multi_thread_rsync_mirror" target="_blank" rel="external">https://github.com/CodeJuan/multi_thread_rsync_mirror</a></p>
<h4 id="wget_index-html">wget index.html</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get index.html</span></span><br><span class="line">wget <span class="variable">$link</span> -O <span class="variable">$file</span></span><br></pre></td></tr></table></figure>
<h4 id="regex得到二级目录">regex得到二级目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep "href" "&lt;a" "/$"</span></span><br><span class="line"><span class="comment"># cut "\""</span></span><br><span class="line">cat <span class="variable">$bak_file</span> | grep <span class="string">"href*=*\""</span> | grep <span class="string">"&lt;a"</span> | cut <span class="operator">-d</span> <span class="string">"\""</span> <span class="operator">-f</span> <span class="number">2</span> | grep <span class="string">"/$"</span> | grep -v <span class="string">"\.\."</span></span><br></pre></td></tr></table></figure>
<h4 id="xargs_-P_八个线程同时wget_-r">xargs -P 八个线程同时wget -r</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;whole_url_list[@]&#125;</span> | xargs -n <span class="number">1</span> -P <span class="number">8</span> ./single_down.sh <span class="string">"<span class="variable">$des</span>"</span></span><br></pre></td></tr></table></figure>
<h4 id="还没实现获取同步状态">还没实现获取同步状态</h4><p>如果下载失败了，完全没有办法知道。<br>下一步实现</p>
<h2 id="另一种玩法：python爬">另一种玩法：python爬</h2><h3 id="步骤-1">步骤</h3><h4 id="装beautifulsoup">装beautifulsoup</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载并安装pip</span></span><br><span class="line">wget https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-<span class="number">7.1</span>.<span class="number">2</span>.tar.gz</span><br><span class="line">tar zxvf pip-<span class="number">7.1</span>.<span class="number">2</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pip-<span class="number">7.1</span>.<span class="number">2</span></span><br><span class="line">sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment">#装beautifulsoup4</span></span><br><span class="line">sudo pip install beautifulsoup4</span><br></pre></td></tr></table></figure>
<h4 id="开始爬">开始爬</h4><p>由于index的页面都很简洁，爬起来还是相对比较容易。</p>
<p>以后有空搞定～～</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>为了提高工作效率，我司的软件青年们搭建了一组内网mirror，包括apache，pip，npm，jenkins，ubuntu等等。<br>想用得爽，就得保持与官方一致，需要很频繁的同步。<br>以前的同步是单线程的，感觉没有完全发挥带宽的优势，所以想尝试一下多线程同步。</p>
<h2 id="大概的思路">大概的思路</h2><ul>
<li>爬index，如hust的镜像<a href="http://mirrors.hust.edu.cn/ubuntu-releases/">http://mirrors.hust.edu.cn/ubuntu-releases/</a>，找出所有<code>href</code>。</li>
<li>每个href就启动一个rsync或者wget，同步到对应的文件夹</li>
<li>记录每个href的同步状态</li>
<li>汇总全部状态，看所有href是否都同步成功]]>
    
    </summary>
    
      <category term="mirror" scheme="http://blog.decbug.com/tags/mirror/"/>
    
      <category term="python" scheme="http://blog.decbug.com/tags/python/"/>
    
      <category term="rsync" scheme="http://blog.decbug.com/tags/rsync/"/>
    
      <category term="wget" scheme="http://blog.decbug.com/tags/wget/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[指标下的单元测试]]></title>
    <link href="http://blog.decbug.com/2015/08/23/fake_unit_test/"/>
    <id>http://blog.decbug.com/2015/08/23/fake_unit_test/</id>
    <published>2015-08-22T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:33.374Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><blockquote>
<p>最近领导强推单元测试覆盖率，要求达到80%。我打探了一下，据说覆盖率是更上层领导的考核指标，所以今年我们组一大任务就是这。没几个人觉得写好单元测试是为了提升软件质量，提高自己的代码水平。<br>可以预见的是，有人会<code>为了提高覆盖率，写一堆无效代码</code>。 “上有所好，下必甚焉”。</p>
</blockquote>
<p>距离我上一次吐槽已经过去了半年，我们的单元测试变成了什么情况呢？<br>半年前我的猜测是<code>为了提高覆盖率，写一堆无效代码</code>，然而实际情况却比这更糟糕。</p>
<ul>
<li>有人的测试函数的末尾始终是<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPECT_EQ(TRUE=TRUE)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样每个用例都是绿的</p>
<ul>
<li>还有人这么写<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init module</span></span><br><span class="line"><span class="comment">//run module</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>测试的是整个模块的输入输出，这样可以保证覆盖率</p>
<p>领导看到用例一片绿，覆盖率90%，觉得我们的代码质量很高。</p>
<p>然而，这并没有什么卵用！！！<br>这真的没有什么卵用！<br>这真的没有什么卵用！<br>这真的没有什么卵用！</p>
<a id="more"></a>
<h1 id="分析">分析</h1><ul>
<li>正如我所说<code>没几个人觉得写好UT是为了提升软件质量，提高自己的代码水平</code></li>
<li>责任心？能想出这样方法的人，都是比较聪明的人。只能说是责任心吧。</li>
<li>管理方式？为什么没有早点发现？为什么我没有去经常查看单元测试代码的提交记录（我平时会看看生产代码）？我有罪。</li>
</ul>
<p>待续</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><blockquote>
<p>最近领导强推单元测试覆盖率，要求达到80%。我打探了一下，据说覆盖率是更上层领导的考核指标，所以今年我们组一大任务就是这。没几个人觉得写好单元测试是为了提升软件质量，提高自己的代码水平。<br>可以预见的是，有人会<code>为了提高覆盖率，写一堆无效代码</code>。 “上有所好，下必甚焉”。</p>
</blockquote>
<p>距离我上一次吐槽已经过去了半年，我们的单元测试变成了什么情况呢？<br>半年前我的猜测是<code>为了提高覆盖率，写一堆无效代码</code>，然而实际情况却比这更糟糕。</p>
<ul>
<li>有人的测试函数的末尾始终是<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPECT_EQ(TRUE=TRUE)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样每个用例都是绿的</p>
<ul>
<li>还有人这么写<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init module</span></span><br><span class="line"><span class="comment">//run module</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>测试的是整个模块的输入输出，这样可以保证覆盖率</p>
<p>领导看到用例一片绿，覆盖率90%，觉得我们的代码质量很高。</p>
<p>然而，这并没有什么卵用！！！<br>这真的没有什么卵用！<br>这真的没有什么卵用！<br>这真的没有什么卵用！</p>]]>
    
    </summary>
    
      <category term="indicator" scheme="http://blog.decbug.com/tags/indicator/"/>
    
      <category term="unit_test" scheme="http://blog.decbug.com/tags/unit-test/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初学docker]]></title>
    <link href="http://blog.decbug.com/2015/08/23/docker_tutorial/"/>
    <id>http://blog.decbug.com/2015/08/23/docker_tutorial/</id>
    <published>2015-08-22T16:00:00.000Z</published>
    <updated>2015-09-13T14:25:20.974Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>虽然久闻docker大名，但一直没有尝试过，固然可以说是比较忙的原因，但忙不是我们不学习新技术的借口。<br>也许以后工作可能会用到docker，我得未雨绸缪，提前准备，开始学docker了</p>
<a id="more"></a>
<h2 id="安装">安装</h2><p>参考<a href="http://docs.docker.com/installation/centos/" target="_blank" rel="external">installation on CentOS</a></p>
<h3 id="查看内核版本">查看内核版本</h3><blockquote>
<p>Docker requires a 64-bit installation regardless of your CentOS version. Also, your kernel must be 3.10 at minimum, which CentOS 7 runs.<br>要求centos7 64-bit</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
<p>我的是CentOS7，<code>3.10.0-229.el7.x86_64</code>，符合要求</p>
<h3 id="用脚本安装">用脚本安装</h3><ol>
<li><p>yum package最新</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the Docker installation script.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="operator">-s</span>SL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>This script adds the <code>docker.repo</code> repository and installs Docker.</p>
<ol>
<li>Start the Docker daemon.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>失败了，提示<code>Job for docker.service failed. See &#39;systemctl status docker.service&#39; and &#39;journalctl -xn&#39; for details.</code><br>查了一下，<a href="https://github.com/docker/docker/issues/15498" target="_blank" rel="external">#15498</a>有人说要装docker-selinux<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-selinux</span><br></pre></td></tr></table></figure></p>
<p>然后<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></p>
<p>果然complete</p>
<ol>
<li>verify<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling <span class="built_in">from</span> library/hello-world</span><br><span class="line"><span class="number">535020</span>c3e8ad: Pull complete </span><br><span class="line">af340544ed62: Already exists </span><br><span class="line">library/hello-world:latest: The image you are pulling has been verified. Important: image verification is <span class="operator">a</span> tech preview feature <span class="operator">and</span> should <span class="operator">not</span> be relied <span class="command"><span class="keyword">on</span> <span class="title">to</span> <span class="title">provide</span> <span class="title">security</span>.</span></span><br><span class="line">Digest: sha256:d5fbd996e6562438f7ea5389d7da867fe58e04d581810e230df4cc073271ea52</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello <span class="built_in">from</span> Docker.</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">    executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="operator">and</span> more <span class="operator">with</span> <span class="operator">a</span> free Docker Hub account:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/userguide/</span><br></pre></td></tr></table></figure>
<h2 id="进阶">进阶</h2><hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>虽然久闻docker大名，但一直没有尝试过，固然可以说是比较忙的原因，但忙不是我们不学习新技术的借口。<br>也许以后工作可能会用到docker，我得未雨绸缪，提前准备，开始学docker了</p>]]>
    
    </summary>
    
      <category term="centos" scheme="http://blog.decbug.com/tags/centos/"/>
    
      <category term="docker" scheme="http://blog.decbug.com/tags/docker/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[抄代码引发的句柄泄漏]]></title>
    <link href="http://blog.decbug.com/2015/08/06/handle_leak/"/>
    <id>http://blog.decbug.com/2015/08/06/handle_leak/</id>
    <published>2015-08-05T16:00:00.000Z</published>
    <updated>2015-08-07T00:19:26.493Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><h2 id="现象">现象</h2><p>主进程不断调用7z.exe进行解压，当文件数量较小时，顺利运行。当文件数量达到几十万的时候，运行过程中7z报错，fatal error 2。<br>网上很多同僚说这是由于系统资源不足造成的。观察此时的内存及磁盘使用情况，都很充裕，但为何还说资源不足呢？于是开启了蛋疼的定位之旅，至于为什么说很蛋疼呢，这是因为是一个低级错误导致的问题。</p>
<p>心急的朋友可以直接看原理:<a href="https://github.com/CodeJuan/HandleLeak" target="_blank" rel="external">https://github.com/CodeJuan/HandleLeak</a></p>
<p>不着急的朋友可以慢慢看定位过程</p>
<a id="more"></a>
<h1 id="过程">过程</h1><h2 id="句柄泄漏">句柄泄漏</h2><p>鉴于内存及硬盘都充足，那么猜测可能算句柄泄漏。先简单说下句柄泄漏的概念：</p>
<ul>
<li>句柄，可以简单理解为某个资源的名字。</li>
<li>泄漏，跟内存泄漏一个泄漏，用了忘记释放，导致可用资源越来越少。</li>
<li>A handle leak is a type of software bug that occurs when a computer program asks for a handle to a resource but does not free the handle when it is no longer used. If this occurs frequently or repeatedly over an extended period of time, a large number of handles may be marked in-use and thus unavailable, causing performance problems or a crash.</li>
</ul>
<h2 id="验证泄漏">验证泄漏</h2><p>把有问题的代码抠出来，写一个demo，循环跑。观察句柄情况。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    SHELLEXECUTEINFO ShExecInfo = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    ShExecInfo.cbSize = <span class="keyword">sizeof</span>(SHELLEXECUTEINFO);</span><br><span class="line">    ShExecInfo.fMask = SEE_MASK_NOCLOSEPROCESS;</span><br><span class="line">    ShExecInfo.hwnd = NULL;</span><br><span class="line">    ShExecInfo.lpVerb = _T(<span class="string">"open"</span>);</span><br><span class="line">    ShExecInfo.lpFile = _T(<span class="string">"cmd"</span>);</span><br><span class="line">    ShExecInfo.lpParameters = _T(<span class="string">"/c echo 111"</span>);</span><br><span class="line">    ShExecInfo.lpDirectory = NULL;</span><br><span class="line">    ShExecInfo.nShow = SW_HIDE;</span><br><span class="line">    ShExecInfo.hInstApp = NULL;</span><br><span class="line"></span><br><span class="line">    ShellExecuteEx(&amp;ShExecInfo);</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(ShExecInfo.hProcess,INFINITE); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看任务管理器中性能页显示的总句柄数，果然是不停在上涨，说明猜测成立</p>
<h2 id="7z泄漏？">7z泄漏？</h2><p>猜测可能算7z自身有泄漏，然而很快又否决了。<br>就像内存泄漏一样，当进程结束的时候，所有资源都会被系统回收，不会继续作恶下去。</p>
<blockquote>
<p>When the program terminates, all its open handles are closed<br>Yes, a “memory leak” is simply memory that a process no longer has a reference to, and thus can no longer free. The OS still keeps track of all the memory allocated to a process, and will free it when that process terminates.</p>
</blockquote>
<p>说明只是我们自己的主进程有泄漏</p>
<h2 id="查看主进程句柄">查看主进程句柄</h2><p>通过任务管理器查看进程的句柄数，方法<code>选项-查看列-选中句柄计数</code></p>
<p>句柄情况如图所示</p>
<p>运行一段时间后400+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak1.JPG" alt=""></p>
<p>再过一段时间1000+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak2.JPG" alt=""></p>
<p>接下来2000+句柄</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/Leak3.JPG" alt=""></p>
<p>看来真的是泄漏了</p>
<h2 id="查看代码">查看代码</h2><p>看一下<code>SHELLEXECUTEINFOW</code>的定义<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _SHELLEXECUTEINFOW</span><br><span class="line">&#123;</span><br><span class="line">    DWORD cbSize;               <span class="comment">// in, required, sizeof of this structure</span></span><br><span class="line">    ULONG fMask;                <span class="comment">// in, SEE_MASK_<span class="doctag">XXX</span> values</span></span><br><span class="line">    HWND hwnd;                  <span class="comment">// in, optional</span></span><br><span class="line">    LPCWSTR  lpVerb;            <span class="comment">// in, optional when unspecified the default verb is choosen</span></span><br><span class="line">    LPCWSTR  lpFile;            <span class="comment">// in, either this value or lpIDList must be specified</span></span><br><span class="line">    LPCWSTR  lpParameters;      <span class="comment">// in, optional</span></span><br><span class="line">    LPCWSTR  lpDirectory;       <span class="comment">// in, optional</span></span><br><span class="line">    <span class="keyword">int</span> nShow;                  <span class="comment">// in, required</span></span><br><span class="line">    HINSTANCE hInstApp;         <span class="comment">// out when SEE_MASK_NOCLOSEPROCESS is specified</span></span><br><span class="line">    <span class="keyword">void</span> *lpIDList;             <span class="comment">// in, valid when SEE_MASK_IDLIST is specified, PCIDLIST_ABSOLUTE, for use with SEE_MASK_IDLIST &amp; SEE_MASK_INVOKEIDLIST</span></span><br><span class="line">    LPCWSTR  lpClass;           <span class="comment">// in, valid when SEE_MASK_CLASSNAME is specified</span></span><br><span class="line">    HKEY hkeyClass;             <span class="comment">// in, valid when SEE_MASK_CLASSKEY is specified</span></span><br><span class="line">    DWORD dwHotKey;             <span class="comment">// in, valid when SEE_MASK_HOTKEY is specified</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        HANDLE hIcon;           <span class="comment">// not used</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> (NTDDI_VERSION &gt;= NTDDI_WIN2K)</span></span><br><span class="line">        HANDLE hMonitor;        <span class="comment">// in, valid when SEE_MASK_HMONITOR specified</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// (NTDDI_VERSION &gt;= NTDDI_WIN2K)</span></span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    HANDLE hProcess;            <span class="comment">// out, valid when SEE_MASK_NOCLOSEPROCESS specified</span></span><br><span class="line">&#125; SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;</span><br></pre></td></tr></table></figure></p>
<p>注意看<code>HANDLE hProcess;// out, valid when SEE_MASK_NOCLOSEPROCESS specified</code></p>
<p>也就是说，如果指定了<code>SEE_MASK_NOCLOSEPROCESS</code>，<code>hProcess</code>就是返回的句柄。如果不关闭，就会造成句柄泄漏。</p>
<p>我们的代码为了等待进程结束，设置了<code>SEE_MASK_NOCLOSEPROCESS</code>，然后WaitForSingleObject(<code>ShExecInfo.hProcess</code>,INFINITE); </p>
<p>然后又没有关闭<code>ShExecInfo.hProcess</code>，导致句柄不断上涨</p>
<h2 id="CloseHandle">CloseHandle</h2><p>加上<code>CloseHandle</code>之后<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CloseHandle(ShExecInfo.hProcess);</span><br></pre></td></tr></table></figure></p>
<p>句柄始终保持在100左右</p>
<p><img src="https://github.com/CodeJuan/HandleLeak/raw/master/pic/CloseHandle.JPG" alt=""></p>
<p>修改正式代码，运行50万次依旧稳定，问题解决。</p>
<h1 id="结论">结论</h1><p>询问组内同事，说这段代码是从CSDN上抄来的，没有深入了解代码的意思，没有注意到<code>SEE_MASK_NOCLOSEPROCESS</code>。</p>
<ol>
<li>抄代码一定要小心谨慎，需要仔细阅读官方说明，把参数的意义都理解清楚</li>
<li>仅仅跑起来，凑合着用是不够的，需要做一做压力测试</li>
<li>这次看句柄的方式比较落伍，需要整理一下如何用windbg查句柄泄漏的方法，下一篇就写这个吧。</li>
</ol>
<h1 id="参考">参考</h1><p><a href="https://en.wikipedia.org/wiki/Handle_leak" target="_blank" rel="external">HandleLeak</a><br><a href="http://blogs.technet.com/b/markrussinovich/archive/2009/09/29/3283844.aspx" target="_blank" rel="external">Pushing the Limits of Windows: Handles</a><br><a href="http://stackoverflow.com/questions/2975831/is-leaked-memory-freed-up-when-the-program-exits" target="_blank" rel="external">Is leaked memory freed up when the program exits?</a></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><h2 id="现象">现象</h2><p>主进程不断调用7z.exe进行解压，当文件数量较小时，顺利运行。当文件数量达到几十万的时候，运行过程中7z报错，fatal error 2。<br>网上很多同僚说这是由于系统资源不足造成的。观察此时的内存及磁盘使用情况，都很充裕，但为何还说资源不足呢？于是开启了蛋疼的定位之旅，至于为什么说很蛋疼呢，这是因为是一个低级错误导致的问题。</p>
<p>心急的朋友可以直接看原理:<a href="https://github.com/CodeJuan/HandleLeak">https://github.com/CodeJuan/HandleLeak</a></p>
<p>不着急的朋友可以慢慢看定位过程</p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://blog.decbug.com/tags/C/"/>
    
      <category term="handle" scheme="http://blog.decbug.com/tags/handle/"/>
    
      <category term="leak" scheme="http://blog.decbug.com/tags/leak/"/>
    
      <category term="process" scheme="http://blog.decbug.com/tags/process/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动生成软件中模块依赖图]]></title>
    <link href="http://blog.decbug.com/2015/07/26/pe_depen/"/>
    <id>http://blog.decbug.com/2015/07/26/pe_depen/</id>
    <published>2015-07-25T16:00:00.000Z</published>
    <updated>2015-08-13T14:39:31.945Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>上回实现了<a href="http://blog.decbug.com/2015/07/06/dependency_in_sln/">自动生成sln中各project依赖图</a>，可以分析一个VS solution里面每个project的依赖关系，但是这个太弱了。我需要exe、dll之间依赖图，所以只能继续想办法了。</p>
<h1 id="思路">思路</h1><ol>
<li>获取该软件目录下所有模块(exe和dll)</li>
<li>通过vs自带的dumpbin命令得到每个模块文件的依赖</li>
<li>画出graphviz的dot脚本</li>
<li>graphviz绘图</li>
</ol>
<a id="more"></a>
<h1 id="使用方法">使用方法</h1><p>代码已经写好，放在<a href="https://github.com/CodeJuan/pe_dependency" target="_blank" rel="external">https://github.com/CodeJuan/pe_dependency</a><br>先说怎么用</p>
<ol>
<li>安装graphviz2.38<a href="http://www.graphviz.org/Download_windows.php" target="_blank" rel="external">http://www.graphviz.org/Download_windows.php</a>到D盘program files</li>
<li>安装VS2010到到D盘program files<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell .\dependency.ps1 -sw_path &#34;&#36719;&#20214;&#30340;&#36335;&#24452;&#34;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>比如说我要分析腾讯TM，那么<code>powershell .\dependency.ps1 -sw_path &quot;D:\Program Files\Tencent\TM&quot;</code>就OK啦</p>
<h1 id="代码">代码</h1><h2 id="获取目录下所有PE">获取目录下所有PE</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$get_pe_cmd</span> = <span class="string">"dir /S /B /a-d-h-s `"<span class="variable">$sw_path</span>`" | findstr /I `".dll .exe`" &gt; files.txt"</span></span><br><span class="line">cmd /c <span class="string">"<span class="variable">$get_pe_cmd</span>"</span></span><br></pre></td></tr></table></figure>
<p>其中<code>findstr /I</code>表示忽略大小写</p>
<h2 id="拷贝mspdb100-dll">拷贝mspdb100.dll</h2><p>由于无法直接调用vs2010 command prompt，所以没有设置环境变量，在使用dumpbin的时候会提示缺少<code>mspdb100.dll</code>，这就需要把<code>mspdb100.dll</code>拷贝到dumpbin.exe所在的<code>vc_bin</code>目录下<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vs_path</span>=<span class="string">"D:\Program Files\Microsoft Visual Studio 10.0"</span></span><br><span class="line"><span class="built_in">copy-item</span> <span class="string">"<span class="variable">$vs_path</span>\Common7\IDE\mspdb100.dll"</span> <span class="string">"<span class="variable">$vc_bin</span>"</span> -Force</span><br></pre></td></tr></table></figure></p>
<p>我的测试机是<code>x86 32位</code>，如果路径有变化，修改<code>$vs_path</code>即可</p>
<h2 id="graphviz画图">graphviz画图</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$graph_dot</span>=<span class="string">"D:\Program Files\Graphviz2.38\bin\dot.exe"</span></span><br><span class="line"><span class="variable">$draw</span> = <span class="string">"`"<span class="variable">$graph_dot</span>`"  -Tpng graph.txt &gt; graph.png"</span> </span><br><span class="line">cmd /c <span class="string">"<span class="variable">$draw</span>"</span></span><br></pre></td></tr></table></figure>
<p>我的graphviz装在D盘，如果有变化，修改<code>$graph_dot</code>即可</p>
<h2 id="通过dumpbin获取依赖">通过dumpbin获取依赖</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dump_cmd</span> = <span class="string">"`"<span class="variable">$dumpbin</span>`" /dependents `"<span class="variable">$line</span>`" | findstr /I .dll | findstr /I /vi `"dump of file`" &gt; <span class="variable">$deptxt</span>"</span></span><br><span class="line">cmd /c <span class="string">"`"<span class="variable">$dump_cmd</span>`""</span></span><br></pre></td></tr></table></figure>
<h2 id="把依赖关系写入dot">把依赖关系写入dot</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">append <span class="string">"`"<span class="variable">$pename</span>`"[shape=box,fontname=consolas];"</span></span><br><span class="line">append <span class="string">"`"<span class="variable">$pename</span>`"-&gt;&#123;"</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$bFound</span> <span class="operator">-eq</span> <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    append <span class="string">"`"<span class="variable">$depen</span>`";"</span></span><br><span class="line">&#125;</span><br><span class="line">append <span class="string">"&#125;;"</span></span><br></pre></td></tr></table></figure>
<h2 id="graphviz画图-1">graphviz画图</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$draw</span> = <span class="string">"`"<span class="variable">$graph_dot</span>`" <span class="variable">$graphtxt</span> -Tpng  &gt; dependency_graph.png"</span> </span><br><span class="line"><span class="built_in">write-host</span> <span class="variable">$draw</span></span><br><span class="line">cmd /c <span class="string">"<span class="variable">$draw</span>"</span></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<h1 id="效果图">效果图</h1><p>分析了一下腾讯TM<br><img src="https://github.com/CodeJuan/pe_dependency/raw/master/dependency_graph11.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>上回实现了<a href="http://blog.decbug.com/2015/07/06/dependency_in_sln/">自动生成sln中各project依赖图</a>，可以分析一个VS solution里面每个project的依赖关系，但是这个太弱了。我需要exe、dll之间依赖图，所以只能继续想办法了。</p>
<h1 id="思路">思路</h1><ol>
<li>获取该软件目录下所有模块(exe和dll)</li>
<li>通过vs自带的dumpbin命令得到每个模块文件的依赖</li>
<li>画出graphviz的dot脚本</li>
<li>graphviz绘图</li>
</ol>]]>
    
    </summary>
    
      <category term="dependency" scheme="http://blog.decbug.com/tags/dependency/"/>
    
      <category term="graphviz" scheme="http://blog.decbug.com/tags/graphviz/"/>
    
      <category term="module" scheme="http://blog.decbug.com/tags/module/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在家里玩分布式(1)install centos]]></title>
    <link href="http://blog.decbug.com/2015/07/25/install_centos/"/>
    <id>http://blog.decbug.com/2015/07/25/install_centos/</id>
    <published>2015-07-24T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.455Z</updated>
    <content type="html"><![CDATA[<h1 id="扯淡">扯淡</h1><p>自己在家玩，买了一堆二手配件，整了4个台式机，打算</p>
<pre><code>-<span class="ruby"> 弄个scrapy爬数据
</span>-<span class="ruby"> 存到分布式内存数据库(redis吧)
</span>-<span class="ruby"> 再存到分布式文件系统(打算用fastdfs)
</span>-<span class="ruby"> 同时用storm流计算，弄个什么东西挖掘一下
</span>-<span class="ruby"> 最后用<span class="constant">PHP</span>展示</span>
</code></pre><p>也勉强算是跟大数据沾点边，几台机器都自动化起来，也get以下运维技能吧。</p>
<a id="more"></a>
<h1 id="centos">centos</h1><h2 id="下载iso">下载iso</h2><p><a href="http://www.centos.org/download/" target="_blank" rel="external">http://www.centos.org/download/</a></p>
<ul>
<li>minimal: The aim of this image is to install a very basic CentOS system, with the minimum of packages needed to have a functional system</li>
<li>dvd: 一般选择这个<br>下载x86_64</li>
</ul>
<h2 id="分区">分区</h2><p>/、/boot、/home、swap 就够了</p>
<h2 id="预装软件">预装软件</h2><p>选择开发者模式，可以把python jdk都装上</p>
<h2 id="设置自动登录">设置自动登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/gdm/custom.conf</span><br></pre></td></tr></table></figure>
<p>写上<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[daemon]</span></span><br><span class="line"><span class="setting">AutomaticLoginEnable=<span class="value"><span class="keyword">true</span></span></span></span><br><span class="line"><span class="setting">AutomaticLogin=<span class="value">你的用户名</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="启动网络">启动网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ntsysv</span><br><span class="line"><span class="comment"># TAB切换到OK</span></span><br></pre></td></tr></table></figure>
<p>修改<code>/etc/sysconfig/network-scripts/ifcfg-enp2s0</code>,设置为<code>onboot=yes</code></p>
<h2 id="安装启动SSH">安装启动SSH</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ssh&#10;service sshd start&#10;chkconfig sshd on</span><br></pre></td></tr></table></figure>
<h2 id="路由器设置固定IP">路由器设置固定IP</h2><ul>
<li>查看每台机器的MAC ifconfig</li>
<li>进入路由器管理页面，DHCP - 静态地址分配 - 绑定MAC和IP</li>
</ul>
<h2 id="安装vim_git">安装vim git</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim&#10;yum -y install git</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/CodeJuan/config.git</span><br><span class="line">cp config/.vimrc ~/</span><br><span class="line">cat config/.gitconfig &gt;&gt; ~/.gitconfig</span><br></pre></td></tr></table></figure>
<h1 id="装爬虫">装爬虫</h1><h2 id="装pip">装pip</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://github.com/pypa/pip/archive/<span class="number">7.1</span>.<span class="number">0</span>.tar.gz</span><br><span class="line">tar zvxf <span class="number">7.1</span>.<span class="number">0</span>.tar.gz    <span class="comment">#解压文件</span></span><br><span class="line"><span class="built_in">cd</span> pip-<span class="number">7.1</span>.<span class="number">0</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="装scrapy">装scrapy</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install scrapy</span><br></pre></td></tr></table></figure>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="扯淡">扯淡</h1><p>自己在家玩，买了一堆二手配件，整了4个台式机，打算</p>
<pre><code>-<span class="ruby"> 弄个scrapy爬数据
</span>-<span class="ruby"> 存到分布式内存数据库(redis吧)
</span>-<span class="ruby"> 再存到分布式文件系统(打算用fastdfs)
</span>-<span class="ruby"> 同时用storm流计算，弄个什么东西挖掘一下
</span>-<span class="ruby"> 最后用<span class="constant">PHP</span>展示</span>
</code></pre><p>也勉强算是跟大数据沾点边，几台机器都自动化起来，也get以下运维技能吧。</p>]]>
    
    </summary>
    
      <category term="system" scheme="http://blog.decbug.com/tags/system/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自动生成sln中各project依赖图]]></title>
    <link href="http://blog.decbug.com/2015/07/06/dependency_in_sln/"/>
    <id>http://blog.decbug.com/2015/07/06/dependency_in_sln/</id>
    <published>2015-07-05T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.431Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>为了提高构建效率，需要分析sln中各project的依赖关系，将相互独立的project分配到不同机器并行构建。如果是一个个打开工程并查看dependency，然后画出依赖图，实在是太繁琐了。这就需要将这一些工作用脚本来实现。</p>
<p>写好的代码放在<a href="https://github.com/CodeJuan/dependency_in_sln" target="_blank" rel="external">https://github.com/CodeJuan/dependency_in_sln</a>，使用方法也很简单。</p>
<a id="more"></a>
<h1 id="思考">思考</h1><h2 id="采用的技术">采用的技术</h2><blockquote>
<p><code>Graphviz</code> is open source graph visualization software. Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. It has important applications in networking, bioinformatics,  software engineering, database and web design, machine learning, and in visual interfaces for other technical domains.</p>
<p><code>DOT</code> is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use.</p>
</blockquote>
<p>graphviz是画图神器，dot可以描述图，二者结合，就能画出各种神奇的图片</p>
<h2 id="步骤">步骤</h2><ol>
<li>解析sln，得出各工程的依赖关系</li>
<li>依据第1步的依赖关系生成dot文件</li>
<li>graphviz调用第2步的dot文件，生成图片</li>
</ol>
<h1 id="实施">实施</h1><h2 id="sln规律">sln规律</h2><p>先看一段例子<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Project("&#123;8BC9CEB8-8B4A-<span class="number">11D0-8D11</span>-00A0C91BC942&#125;") = "gtest_unittest", "gtest_unittest.vcxproj", "&#123;4D9FDFB5-986A-<span class="number">4139-823</span>C-F4EE0ED481A1&#125;"</span><br><span class="line">	ProjectSection(ProjectDependencies) = postProject</span><br><span class="line">		&#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; = &#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125;</span><br><span class="line">		&#123;C<span class="number">8F6C172-56</span>F2-4E76-B5FA-C<span class="number">3B423B31</span>BE7&#125; = &#123;C<span class="number">8F6C172-56</span>F2-4E76-B5FA-C<span class="number">3B423B31</span>BE7&#125;</span><br><span class="line">	EndProjectSection</span><br><span class="line">EndProject</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>project的开头</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Project</span>(<span class="string">"&#123;8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942&#125;"</span>) = <span class="string">"gtest_unittest"</span>, <span class="string">"gtest_unittest.vcxproj"</span>, <span class="string">"&#123;4D9FDFB5-986A-4139-823C-F4EE0ED481A1&#125;"</span> # 格式是<span class="keyword">Project</span>(<span class="string">"&#123;sln guid&#125;"</span>) = <span class="string">"project name"</span>, <span class="string">"relative path"</span>, <span class="string">"&#123;project guid&#125;"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>project的结尾</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EndProject</span><br></pre></td></tr></table></figure>
</li>
<li><p>依赖关系</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProjectSection(ProjectDependencies) = postProject # 依赖了哪些工程的开头</span><br><span class="line">&#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; = &#123;<span class="number">24848551</span>-EF4F-<span class="number">47E8-9A9</span>D-EA4D49BC3ECA&#125; #依赖工程的guid</span><br><span class="line">EndProjectSection # 依赖描述结尾</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>发现这样的规律，就能够很方便的解析了</p>
<h2 id="代码">代码</h2><p>由于是在windows上面解析，有同事不会用shell，于是只好用powershell重写一遍</p>
<p>遍历sln的每一行，进行分析，并写入dot<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"Project(`"&#123;*"</span>) <span class="comment">#如果匹配到了project开头</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$array</span> = <span class="variable">$line</span>.split(<span class="string">"`""</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$array</span>[<span class="number">3</span>]</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$array</span>[<span class="number">7</span>]</span><br><span class="line">    <span class="variable">$script:prj_name_list</span> += <span class="variable">$name</span></span><br><span class="line">    <span class="variable">$script:prj_id_list</span> += <span class="variable">$id</span></span><br><span class="line">    append <span class="string">"<span class="variable">$name</span>[shape=box,fontname=consolas];"</span> <span class="comment"># 在dot写入这个project的描述</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*ProjectSection(*"</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="variable">$name</span> = <span class="variable">$script:prj_name_list</span>[<span class="variable">$script:prj_name_list</span>.length - <span class="number">1</span>]</span><br><span class="line">       append <span class="string">"<span class="variable">$name</span>-&gt;&#123;"</span> <span class="comment"># 匹配到依赖了哪些工程的开头，开始写入依赖关系</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*EndProjectSection*"</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       append <span class="string">"&#125;;"</span> <span class="comment"># 匹配到了依赖描述结尾，写入&#125;;，完成了这个project的依赖描述</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$line</span> <span class="operator">-like</span> <span class="string">"*&#123;*&#125; = &#123;*&#125;*"</span>) <span class="comment"># 通过大括号识别是否是工程依赖</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$right</span> = <span class="variable">$line</span>.lastindexof(<span class="string">"&#125;"</span>)</span><br><span class="line">    <span class="variable">$left</span> = <span class="variable">$line</span>.lastindexof(<span class="string">"&#123;"</span>)</span><br><span class="line">    <span class="variable">$dep_id</span> = <span class="variable">$line</span>.substring(<span class="variable">$left</span>+<span class="number">1</span>, <span class="variable">$right</span>-<span class="variable">$left</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="variable">$script:prj_id_list_query</span>.length; <span class="variable">$i</span>++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$cur_id</span> = <span class="variable">$script:prj_id_list_query</span>[<span class="variable">$i</span>]</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$dep_id</span> <span class="operator">-like</span> <span class="string">"<span class="variable">$cur_id</span>"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$dep_name</span> = <span class="variable">$script:prj_name_list_query</span>[<span class="variable">$i</span>]</span><br><span class="line">            append <span class="string">"<span class="variable">$dep_name</span>;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成的dot">生成的dot</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;&#10;rankdir=BT;&#10;gtest[shape=box,fontname=consolas];&#10;gtest_main[shape=box,fontname=consolas];&#10;gtest_unittest[shape=box,fontname=consolas];&#10;gtest_unittest-&#62;&#123;&#10;gtest_prod_test;&#10;gtest;&#10;&#125;;&#10;gtest_prod_test[shape=box,fontname=consolas];&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="demo">demo</h2><p><img src="https://github.com/CodeJuan/dependency_in_sln/raw/master/gtest.sln.png" alt=""></p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>为了提高构建效率，需要分析sln中各project的依赖关系，将相互独立的project分配到不同机器并行构建。如果是一个个打开工程并查看dependency，然后画出依赖图，实在是太繁琐了。这就需要将这一些工作用脚本来实现。</p>
<p>写好的代码放在<a href="https://github.com/CodeJuan/dependency_in_sln">https://github.com/CodeJuan/dependency_in_sln</a>，使用方法也很简单。</p>]]>
    
    </summary>
    
      <category term="dependency" scheme="http://blog.decbug.com/tags/dependency/"/>
    
      <category term="dot" scheme="http://blog.decbug.com/tags/dot/"/>
    
      <category term="graphviz" scheme="http://blog.decbug.com/tags/graphviz/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo and pelican]]></title>
    <link href="http://blog.decbug.com/2015/06/22/Pelican_hexo/"/>
    <id>http://blog.decbug.com/2015/06/22/Pelican_hexo/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2015-08-04T14:28:02.463Z</updated>
    <content type="html"><![CDATA[<p>用pelican或hexo建一个漂亮的博客<br><a id="more"></a></p>
<h2 id="install">install</h2><h3 id="python_2-7">python 2.7</h3><p><a href="https://www.python.org/downloads/release/python-2710/" target="_blank" rel="external">https://www.python.org/downloads/release/python-2710/</a></p>
<h3 id="easy_install">easy_install</h3><p><a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">https://pypi.python.org/pypi/setuptools</a><br><a href="https://bootstrap.pypa.io/ez_setup.py" target="_blank" rel="external">https://bootstrap.pypa.io/ez_setup.py</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Python27\python.exe ez_setup.py</span><br></pre></td></tr></table></figure></p>
<h3 id="pip">pip</h3><p>easy_install pip 提示找不到命令<br>设置环境变量 E:\Python27;E:\Python27\Scripts<br>其实新版的python都自带了pip，无需安装</p>
<h3 id="make">make</h3><p><a href="http://pan.baidu.com/s/1hqzJBBe" target="_blank" rel="external">http://pan.baidu.com/s/1hqzJBBe</a><br>解压到python目录</p>
<h3 id="pelican">pelican</h3><p>pip install pelican</p>
<h3 id="markdown">markdown</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown</span><br></pre></td></tr></table></figure>
<h3 id="quick-start">quick-start</h3><p><a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a><br>timezone Asia/Shanghai</p>
<h3 id="run">run</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pelican content&#10;cd ~/projects/yoursite/output&#10;python -m pelican.server</span><br></pre></td></tr></table></figure>
<h3 id="themes">themes</h3><p>下载themes<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pelican theme -i &#34;&#20320;&#21916;&#27426;&#30340;&#20027;&#39064;&#34;</span><br></pre></td></tr></table></figure></p>
<h1 id="hexo">hexo</h1><h2 id="install-1">install</h2><p><a href="https://nodejs.org/dist/v0.12.5/node-v0.12.5-x86.msi" target="_blank" rel="external">download</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo&#10;mkdir blog&#10;cd blog&#10;hexo init&#10;npm install&#10;hexo generate&#10;hexo server</span><br></pre></td></tr></table></figure></p>
<h2 id="theme">theme</h2><p>clone theme to folder <code>themes</code><br>_config.yml theme: jacman</p>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[用pelican或hexo建一个漂亮的博客]]>
    
    </summary>
    
      <category term="blog" scheme="http://blog.decbug.com/tags/blog/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[身边的过早优化事件]]></title>
    <link href="http://blog.decbug.com/2015/06/13/Premature_Optimization/"/>
    <id>http://blog.decbug.com/2015/06/13/Premature_Optimization/</id>
    <published>2015-06-13T15:30:09.000Z</published>
    <updated>2015-08-04T14:28:02.435Z</updated>
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>组里小伙要对他们的代码进行优化，分析之后，觉得没有什么拖慢性能的代码，于是决定多开几个线程。我得知之后，与他进行了一番对话，终于说服了他在动手优化之前进行充分测量，找出瓶颈再有针对性的优化。</p>
<a id="more"></a>
<ul>
<li>对话如下：</li>
<li>我：你测量过了嘛？</li>
<li>他：什么是测量？</li>
<li>我：测量就是对你现有的代码profile，因为经验也好，直觉也罢，都是不可靠的，我们需要证据。从我目前看到的情况来看，我觉得你的数据不足以支持你进行多线程改造。</li>
<li>他：我已经看了三遍代码，没有发现优化的地方。</li>
<li>我：细节里藏着魔鬼，有时候我们的肉眼，我们的直觉都不可靠。所以我希望你能够测量之后再优化。</li>
<li>他：相信我，我觉得多线程是目前最好的解决方案。</li>
<li>此时我想，看来光讲道理行不通，得换个方式了，于是说道：好的，假定多线程是最好的解决方案。那么我想知道，你完成你的方案需要多长时间？能跟上我们版本的节奏吗？</li>
<li>他犹豫一下说道：大约需要5天吧，放心，我肯定不会拖后腿的。</li>
<li>我：好的，我相信你的能力，你肯定能把你的方案做好。但是，我有一个建议。如果我有一个简单的方案，只需要2～3个小时，就能得出结果。也许能解决你的问题，当然，也可能无法解决，你还得做你的多线程。但无论如何，这都算是一个投入非常少的方案，愿不愿意试一下？就算是无法解决，你也不算一无所获，至少掌握了profile的方法。</li>
<li>他：好的，试一下吧，如果不行，我还是要弄多线程的。你可要帮我检查一下我写的多线程代码。</li>
</ul>
<p>然后我把使用文档给他，他照着文档用性能分析工具跑了一下代码，果然找到了瓶颈代码，在一个循环里用一个vector对另外一个vector赋值，如你所知，会产生NNNN多次的构造析构，不慢才怪。修改之后，性能瞬间提升1倍，达成了目标。</p>
<p>坦白说，这是一个很低级的错误，我曾在编码tips里提过多次，然而并没有什么卵用。周围的小伙子们依旧如故，有时候真的挺失望的，一定要通过领导来施压，他们才愿意遵守吗？其实我特别不想通过行政手段来实现目标，低效且低级的手段。当然，这是另一件事，这里就不吐槽了。</p>
<h2 id="过早优化是万恶之源">过早优化是万恶之源</h2><ul>
<li>Donald Knuth曾经曰过：Don’t Cut Yourself: Code Optimization as a Double-Edged Sword。</li>
<li>中文翻译：过早优化是万恶之源。 </li>
<li>1  究竟要优化什么？ </li>
<li>2  选择一个正确的优化指标 </li>
<li>3  优化在刀刃上 </li>
<li>4  优化层次越高越好 </li>
<li>5  不要过早优化 </li>
<li>6  依赖性能分析，而不是直觉 </li>
<li>7  优化不是万金油 </li>
</ul>
<p>大道理，我们都懂，然而却过不好这一生。这句话我们经常听到，但是在实际工作中却对自己过于自信。</p>
<h2 id="总结">总结</h2><p>我的优化流程：</p>
<ul>
<li>先对当前代码profile，多采集几次，有足够的样本。</li>
<li>针对热点进行分析，尽量用小的改动，实现大的提升。</li>
<li>改一点，验证一点，并记录下优化后的数据。如此往复。</li>
</ul>
<h2 id="PS">PS</h2><ul>
<li>一直以来，这个小伙都比较傲娇，都不怎么听周围的人的意见，也不怎么听我的（后来才知道，因为之前有人谣传我是91年的，而他是89年的，所以他觉得我比较菜。。。。。）自从这件事之后，他对我的态度明显好多了。码农圈子还是要用技术说话啊，吹的天花乱坠都没用。</li>
<li>和别人沟通（也许可以算是辩论）的时候，一定面带微笑，降低语速，摆事实讲道理表明自己的意见。越是意见不一致，就越需要控制语气。舒适的对话，是达成共识的基础。</li>
</ul>
<hr>
<p><code>本博客欢迎转发,但请保留原作者信息</code><br>github:<a href="https://github.com/CodeJuan" target="_blank" rel="external">codejuan</a><br>博客地址:<a href="http://blog.decbug.com/">http://blog.decbug.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="背景">背景</h2><p>组里小伙要对他们的代码进行优化，分析之后，觉得没有什么拖慢性能的代码，于是决定多开几个线程。我得知之后，与他进行了一番对话，终于说服了他在动手优化之前进行充分测量，找出瓶颈再有针对性的优化。</p>]]>
    
    </summary>
    
      <category term="optimize" scheme="http://blog.decbug.com/tags/optimize/"/>
    
      <category term="profiler" scheme="http://blog.decbug.com/tags/profiler/"/>
    
      <category term="code" scheme="http://blog.decbug.com/categories/code/"/>
    
  </entry>
  
</feed>